<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>「Note」并查集</title>
    <url>/2020/06/21/2020-06-21-%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>并查集，在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。这一类问题近几年来反复出现在信息学的国际国内赛题中，其特点是看似并不复杂，但数据量极大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。<br>并查集是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。常常在使用中以森林来表示。<br>                                                                                                      —— baidu<span id="more"></span></p>
</blockquote>
<p>并查集一般包括两个操作：</p>
<ul>
<li>查找 ： 寻找根节点</li>
<li>合并 ： 将同类的集合合并在一棵树上<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2></li>
<li>使用 <strong>代表法</strong>，即<strong>每个集合选择一个固定的元素，将其作为整个集合的代表</strong></li>
<li>通过维护数组 $fa[]$ 来表示两个集合之间的<strong>所属</strong>关系，即用$fa[x]$记录$x$的父节点。<strong>根节点的fa[]指向自己</strong>。</li>
</ul>
<h2 id="储存方式"><a href="#储存方式" class="headerlink" title="储存方式"></a>储存方式</h2><h3 id="1-链表储存"><a href="#1-链表储存" class="headerlink" title="1.链表储存"></a>1.链表储存</h3><p>即使用一般的树形结构</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>;</span><br><span class="line"><span class="keyword">typedef</span> node * tree;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> data, father;</span><br><span class="line">&#125;;</span><br><span class="line">tree bt;</span><br><span class="line">```		 </span><br><span class="line">### <span class="number">2.</span>数组储存</span><br><span class="line">即直接定义$fa[x]$为$x$的父节点;</span><br><span class="line">#### <span class="number">2.1</span>初始化</span><br><span class="line">```<span class="function">cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MakeSet</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) &#123;</span><br><span class="line">		fa[i] = i;<span class="comment">//每个节点的父节点都指向自己</span></span><br><span class="line">		rank[i] = <span class="number">0</span>;<span class="comment">//保存高度</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2查找父节点"><a href="#2-2查找父节点" class="headerlink" title="2.2查找父节点"></a>2.2查找父节点</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">//路径压缩版</span></span><br><span class="line">	<span class="keyword">if</span>(fa[x] != x) 	</span><br><span class="line">		fa[x] = <span class="built_in">FindSet</span>(fa[x]);	</span><br><span class="line">	<span class="keyword">return</span> fa[x];</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h4 id="2-3合并集合"><a href="#2-3合并集合" class="headerlink" title="2.3合并集合"></a>2.3合并集合</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> u = <span class="built_in">FindSet</span>(x);	</span><br><span class="line">	<span class="type">int</span> v = <span class="built_in">FindSet</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(u == v) <span class="keyword">return</span>;	<span class="comment">//已经在同一个集合之中</span></span><br><span class="line">	<span class="keyword">if</span>(rank[u] &gt; rank[v])	</span><br><span class="line">		fa[v] = u;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		fa[u] = v;</span><br><span class="line">		<span class="keyword">if</span>(rank[u] == rank[v])	 </span><br><span class="line">			rank[v] ++;</span><br><span class="line">	&#125;						</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」老鼠与猫的交易</title>
    <url>/2020/07/05/2020-07-05-%E8%B4%AA%E5%BF%83%20-%20%E8%80%81%E9%BC%A0%E4%B8%8E%E7%8C%AB%E7%9A%84%E4%BA%A4%E6%98%93/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一只老鼠很喜欢奶酪，但是奶酪被分别放在N个房间里，而且这些房间都有一只猫咪看守，现在它准备和猫咪们做个交易。它有M磅的猫食，想用这M磅猫食换取奶酪。在猫咪看守的每一个房间里有奶酪J[i] 磅，同时猫咪需要F[i]磅的食物，如果老鼠给猫咪F[i] * (a)%的猫食，那么它就可以得到J[i] * (a)%的奶酪。现在已知每只猫咪对猫食的需求量和每个房间的奶酪数，那老鼠怎样才能换得最多的奶酪呢？</p>
<span id="more"></span>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行输入两个正整数M和N（M和N不大于10000），后面跟N行（每个房间的奶酪数和猫食的需求量）。</p>
<p>输出格式<br>输出老鼠得到的最多的奶酪数，保留三位小数。</p>
<p>样例<br>样例1输入<br>5 3<br>7 2<br>4 3<br>5 2<br>样例1输出<br>13.333<br>样例2输入<br>20 3<br>25 18<br>24 15<br>15 10<br>样例2输出<br>31.500</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>典型的贪心，一道性价比问题，即需要在有限的总钱数下得到更高价格的商品，在输入时求出物价，并按从高到低排序即可。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10005</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">double</span> j, f, p;<span class="comment">//定义成double更方便</span></span><br><span class="line">&#125;;</span><br><span class="line">node a[MAXN];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">double</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;<span class="comment">//按性价比从搞到低排序</span></span><br><span class="line">	<span class="keyword">return</span> x.p &gt; y.p;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;a[i].j, &amp;a[i].f);</span><br><span class="line">		a[i].p = a[i].j / a[i].f;<span class="comment">//求性价比</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;<span class="comment">//统计</span></span><br><span class="line">		<span class="keyword">if</span>(m &gt;= a[i].f) &#123;<span class="comment">//如果奶酪没有用完</span></span><br><span class="line">			m -= a[i].f;</span><br><span class="line">			ans += a[i].j;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			ans += a[i].p * m;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」拓扑排序</title>
    <url>/2020/07/11/2020-07-07-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><p>拓扑排序是对一张 <strong>有向</strong> 并且 <strong>无环</strong> 的图进行<strong>遍历排序</strong>。<br>如果在图中所有的节点构成的序列$A$中，对于每一条边$(x, y)$：$x$都出现在$y$的前面，则序列$A$就为这张图的拓扑序。<span id="more"></span></p>
<h4 id="关于入度和出度"><a href="#关于入度和出度" class="headerlink" title="关于入度和出度"></a>关于入度和出度</h4><p>入度 ：以节点$x$为终点的有向边的条数被称为$x$的入度。记作 $deg(x)$ .<br>出度 ：以节点$x$为起点的有向边的条数被称为$x$的出度。<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovLzYxLjE4Ni4xNzMuODk6MjAxOS8yMDIwLzA3LzExLzVjMDA0Nzg5Mjk3N2QucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>例如在此图中，节点3的入度就为2 ，节点4的入度也为2.</p>
<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>不断选择图中入度为0的节点入队（如上图中的节点5、2、 1）。<br>再将$x$连向的节点的入度减一。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>1.建一个空的拓扑序列$A$。<br>2.预处理入度，将入度是0的节点全部入队。<br>3.取出队头，此时的对头$x$一定是入度为0的节点，所以$A[++ cnt] &#x3D; x;$<br>4.对于此时的队头$x$，把所连的$y$的入度减一，即$deg[y] –;$<br>5.操作至队列为空，此时$A[]$则为这张图的拓扑排序。<br>6.在最后将$A[]$的长度检查以下，即看此时的$cnt$是否为图中的节点个数，如果少于了节点数，则说明图中有环。</p>
<h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p>初始图<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovLzYxLjE4Ni4xNzMuODk6MjAxOS8yMDIwLzA3LzExLzUyYjFlMmIzMzgxNTgucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>1.建立空序列<br>2.2.预处理入度，将入度是0的节点全部入队。<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovLzYxLjE4Ni4xNzMuODk6MjAxOS8yMDIwLzA3LzExL2I0NzA2MDg0ZWYyMzQucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>3.取出队头，此时的对头$x$一定是入度为0的节点，所以$A[++ cnt] &#x3D; x;$<br>4.对于此时的队头$x$，把所连的$y$的入度减一，即$deg[y] –;$<br>5.操作至队列为空，此时$A[]$则为这张图的拓扑排序。</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovLzYxLjE4Ni4xNzMuODk6MjAxOS8yMDIwLzA3LzExLzYyNmY2YTdiNzEzYWEucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>6.在最后将$A[]$的长度检查以下，即看此时的$cnt$是否为图中的节点个数，此时发现少了三个节点，所以图中含有环，即$(2, 4) (4, 6)(6, 2)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>本人太菜了，邻接表出了点玄学错误，就只能用矩阵。。。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10005</span>;</span><br><span class="line"><span class="type">int</span> n, m, cnt;</span><br><span class="line"><span class="type">bool</span> a[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> deg[MAXN], ans[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topsort</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (deg[i] == <span class="number">0</span>)</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        ans[++cnt] = u;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (a[u][i]) &#123;</span><br><span class="line">                deg[i]--;</span><br><span class="line">                <span class="keyword">if</span> (deg[i] == <span class="number">0</span>)</span><br><span class="line">                    q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        a[x][y] = <span class="number">1</span>;</span><br><span class="line">        deg[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">topsort</span>();</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no solution\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」火柴排队</title>
    <url>/2020/07/12/2020-07-12-%E7%81%AB%E6%9F%B4%E6%8E%92%E9%98%9F%20%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="火柴排队"><a href="#火柴排队" class="headerlink" title="火柴排队"></a>火柴排队</h3><blockquote>
<p>内存限制：128 MiB<br>时间限制：1000 ms</p>
</blockquote>
<h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>涵涵有两盒火柴，每盒装有n 根火柴，每根火柴都有一个高度。 现在将每盒中的火柴各自排成一列， 同一列火柴的高度互不相同， 两列火柴之间的距离定义为： $∑(ai-bi)^2$其中 ai 表示第一列火柴中第 i 个火柴的高度，bi 表示第二列火柴中第 i 个火柴的高度。每列火柴中相邻两根火柴的位置都可以交换，请你通过交换使得两列火柴之间的距离最小。</p>
<p>请问得到这个最小的距离，最少需要交换多少次？如果这个数字太大，请输出这个最小交换次数对 99,999,997 取模的结果。</p>
<span id="more"></span>

<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共三行，第一行包含一个整数 n，表示每盒中火柴的数目。</p>
<p>第二行有 n 个整数，每两个整数之间用一个空格隔开，表示第一列火柴的高度。</p>
<p>第三行有 n 个整数，每两个整数之间用一个空格隔开，表示第二列火柴的高度。</p>
<h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出共一行，包含一个整数，表示最少交换次数对 99,999,997 取模的结果。</p>
<h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><p>样例1输入<br>4<br>2 3 1 4<br>3 2 1 4<br>样例1输出<br>1<br>样例2输入<br>4<br>1 3 4 2<br>1 7 2 4<br>样例2输出<br>2</p>
<h4 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h4><p>输入输出样例说明1：</p>
<p>最小距离是 0，最少需要交换 1 次，比如：交换第 1 列的前 2 根火柴或者交换第 2 列的前 2 根火柴。</p>
<p>输入输出样例说明2：</p>
<p>最小距离是 10，最少需要交换 2 次，比如：交换第 1 列的中间 2 根火柴的位置，再交换第 2 列中后 2 根火柴的位置。</p>
<p>数据范围：对于 10%的数据， 1 ≤ n ≤ 10；对于 30%的数据，1 ≤ n ≤ 100；对于 60%的数据，1 ≤ n ≤ 1,000；对于 100%的数据，1 ≤ n ≤ 100,000，0 ≤火柴高度≤ maxlongint</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>感谢<a href="https://me.csdn.net/c202207lyx">C202207LYX</a>提出问题，现将证明给出。<br>这是一道比较有意思的题目。<br>如果要使$∑(ai-bi)^2$最小，那么$(ai-bi)$的值就因该为最小，为了保证所有$(ai-bi)$的总值最小，就需要让序列$A$中的第$k$个数对应序列$B$的第$k$个数。<br>可以得出一个结论就是<strong>同序和≥乱序和≥逆序和<br>证明：<br>设有序数列k1<del>kn,p1</del>pn，取k1&lt;k2、p1&lt;p2 因此容易得到：k1p1+k2p2&gt;k1p2+k2p1; 将上述不等式变形一下： k2p2-k2p1&gt;k1p2-k1p1 即k2(p2-p1)&gt;k1(p2-p1) ∵k2&gt;k1,p2&gt;p1 ∴k2(p2-p1)&gt;k1(p2-p1) 证毕； 推广2中的结论到1中，乱序就是不断将顺序交换打乱的过程，最终结果符合2的结论，因此 顺序之乘&gt;&#x3D;乱序之乘，证毕</strong></p>
<h4 id="同序操作"><a href="#同序操作" class="headerlink" title="同序操作"></a>同序操作</h4><p>首先定义一个结构体:$node$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	LL val, num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里引入一个思想——离散化。<br>通过数据范围，可以得知：<strong>1 ≤ n ≤ 100,000，&amp;&amp; 0 ≤火柴高度≤ maxlongint，</strong>也就是说，火柴的高度分布比较稀疏，并且如果排序，那么$long$ $long$会直接<strong>溢出</strong>。、<br>此时接需要离散化</p>
<h6 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h6><p>定义：离散化，把无限空间中有限的个体映射到有限的空间中去，离散化是在<strong>不改变数据相对大小的条件下</strong>，对数据进行相应的缩小。例如：<br>原数据：$1,999,100000,15$；处理后：$1,3,4,2；$<br>原数据：${100,200}，{20,50000}，{1,400}；$<br>处理后：${3,4}，{2,6}，{1,5}；$</p>
<p>此时可以通过$node$中的$num$实现对数据离散化的操作。<br><font color = red size = 5->警示：简单的离散化不能去重</font><br>但在此题中必然会有相同的元素出现<del>因为是毒瘤数据</del><br>所以可以通过先保存下标，再根据$val$的大小$sort$。<br>给出参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x.val == y.val)</span><br><span class="line">		<span class="keyword">return</span> x.num &lt; y.num;</span><br><span class="line">	<span class="keyword">return</span> x.val &lt; y.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].val);</span><br><span class="line">	a[i].num = i;</span><br><span class="line">&#125;	</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b[i].val);</span><br><span class="line">	b[i].num = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line"><span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n, cmp);</span><br></pre></td></tr></table></figure>
<p>然后经行同序排列。<br>假设我们离散化之后得到了这样两个序列：<br>$A:(1,3,4,2)和B:(1,4,2,3)$<br>我们以$a[i]$为关键字对$b[i]$排序，令$x[a[i]]&#x3D;b[i]$，在$a$和$b$中构造一种映射关系。<br>若序列$a$与序列$b$相等，那么此时$x[a[i]]$应该等于$a[i]$的，也就是$x[i]&#x3D;i$。<br>那么也就是说如果我们想让序列$a$与序列$b$相等，那么我们需要让$x$升序排列。<br>问题就变为，将原本乱的$X$序列升序排列的最少交换次数。<br>我们会得到：$x[1]&#x3D;1,x[3]&#x3D;4,x[4]&#x3D;2,x[2]&#x3D;3$，x序列就是这样的：$(1,4,2,3)$。哪里是“乱”的，就调整哪里。$(4,2)$和$(4,3)$是“乱”的，调整这两处即可。也就是说，要维护这个例子中的这两个序列的“距离”最小值，我们最少只需要调整2次即可。在这里就是一组逆序对。有几个逆序对，就要调整几次。<br>那么这题可以最终得到一个结论：在$X$序列中逆序对的个数就是本题的答案。</p>
<h5 id="逆序对"><a href="#逆序对" class="headerlink" title="逆序对"></a>逆序对</h5><p>求逆序对一共有三种方法：</p>
<ul>
<li><p>1.暴力枚举$O(n^2)$<br>只能得到80pts。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">           <span class="keyword">if</span> (x[i] &gt; x[j]) &#123;</span><br><span class="line">               ans++;</span><br><span class="line">               ans %= MOD;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.归并排序$O(logn)$</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(LL L, LL R, LL Mid)</span></span>&#123;</span><br><span class="line">   LL i = L;LL j = Mid + <span class="number">1</span>;LL k = L;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= Mid &amp;&amp; j &lt;= R)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x[i] &lt;= x[j])t[k ++] = x[i ++];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans += Mid - i + <span class="number">1</span>;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">            t[k ++] = x[j ++]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= Mid)t[k ++] = x[i ++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= R)t[k ++] = x[j ++];</span><br><span class="line">    <span class="keyword">for</span>(i = L; i &lt;= R; i ++)x[i] = t[i]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(LL L, LL R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt; R)&#123;</span><br><span class="line">        LL Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">mergesort</span>(L, Mid),<span class="built_in">mergesort</span>(Mid + <span class="number">1</span>, R);</span><br><span class="line">        <span class="built_in">merge</span>(L, R, Mid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>3.树状数组<br>我太菜了。。。还没学会。。。</li>
</ul>
<h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">99999997</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	LL val, num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LL n, ans, x[MAXN], t[MAXN];</span><br><span class="line">node a[MAXN], b[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x.val == y.val)</span><br><span class="line">		<span class="keyword">return</span> x.num &lt; y.num;</span><br><span class="line">	<span class="keyword">return</span> x.val &lt; y.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(LL L, LL R, LL Mid)</span></span>&#123;</span><br><span class="line">   LL i = L;LL j = Mid + <span class="number">1</span>;LL k = L;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= Mid &amp;&amp; j &lt;= R)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x[i] &lt;= x[j])t[k ++] = x[i ++];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans += Mid - i + <span class="number">1</span>;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">            t[k ++] = x[j ++]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= Mid)t[k ++] = x[i ++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= R)t[k ++] = x[j ++];</span><br><span class="line">    <span class="keyword">for</span>(i = L; i &lt;= R; i ++)x[i] = t[i]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(LL L, LL R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt; R)&#123;</span><br><span class="line">        LL Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">mergesort</span>(L, Mid),<span class="built_in">mergesort</span>(Mid + <span class="number">1</span>, R);</span><br><span class="line">        <span class="built_in">merge</span>(L, R, Mid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(LL i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].val);</span><br><span class="line">		a[i].num = i;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">for</span>(LL i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b[i].val);</span><br><span class="line">		b[i].num = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line">	<span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n, cmp);</span><br><span class="line">	<span class="keyword">for</span>(LL i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		x[a[i].num] = b[i].num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">mergesort</span>(<span class="number">1</span>, n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans % MOD);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>离散化</category>
      </categories>
      <tags>
        <tag>逆序对</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」分离与合体</title>
    <url>/2020/07/19/2020-07-19-%E5%88%86%E7%A6%BB%E4%B8%8E%E5%90%88%E4%BD%93%E9%A2%98%E8%A7%A3%20%E5%8C%BA%E9%97%B4DP%20%20%20DFS/</url>
    <content><![CDATA[<h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>经过在机房里数日的切磋，LYD 从杜神牛那里学会了分离与合体，出关前，杜神牛给了他一个测试……<span id="more"></span><br>杜神牛造了n 个区域，他们紧邻着排成一行，编号 1 ~ n  。在每个区域里都放着一把 OI 界的金钥匙，每一把都有一定的价值，LYD 当然想得到他们了。然而杜神牛规定 LYD 不能一下子把他们全部拿走，而是每次只可以拿一把。为了尽快得到所有金钥匙，LYD 自然就用上了刚学的分离与合体特技。<br>一开始 LYD 可以选择 1 … n - 1 中的任何一个区域进入，我们不妨把这个区域记为k 。进入后 LYD 会在  区域发生分离，从而分离成两个小 LYD。分离完成的同时会有一面墙在 k 区域和 k + 1 区域间升起，从而把1…k  和 k + 1 … n 阻断成两个独立的区间，并在各自区间内任选除区间末尾之外（即从 1..k-1 和 k+1…n-1中选取）的任意一个区域再次发生分离，这样就有了四个小小 LYD……重复以上所叙述的分离，直到每个小 LYD 发现自己所在的区间只剩下了一个区域，那么他们就可以抱起自己梦寐以求的 OI 金钥匙。<br>但是 LYD 不能就分成这么多个个体存在于世界上，这些小 LYD 还会再合体，合体的小 LYD 所在区间中间的墙会消失。合体会获得 合并后所在区间左右端区域里金钥匙价值之和之前分离的时候所在区域的金钥匙价值。<br>LYD 请你编程求出最终可以获得的最大总价值，并按照分离阶段从前到后，区域从左到右的顺序，输出发生分离区域编号。若有多种方案，选择分离区域尽量靠左的方案（也可以理解为输出字典序最小的）。<br>例如先打印一分为二的区域，然后从左到右打印二分为四的分离区域，然后是四分为八的……</p>
<h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行一个正整数n  第二行 n 个用空格分开的正整数 $a_i$  ，表示  区域里每把金钥匙的价值。</p>
<h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>第一行一个数，表示获得的最大价值<br>第二行按照分离阶段从前到后，区域从左到右的顺序，输出发生分离区域编号。若有多种方案，选择分离区域尽量靠左的方案（也可以理解为输出字典序最小的）。</p>
<h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><h6 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h6><p>7<br>1 2 3 4 5 6 7</p>
<h6 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h6><p>238<br>1 2 3 4 5 6<br>数据范围与提示<br>对于100% 的数据，$n_i$，$a_i$保证运算过程和结果不超过 $int$ 位正整数范围。</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>首先，求出获得的最大价值可以直接通过区间DP得到，只是将合并石子的条件做了改动。<br>可以设$dp[i, j]$是从第$i$个区域到第$j$个区域之间获得的最大价值。<br>状态转移方程为：</p>
<p>$dp[i,j]&#x3D;dp[i,k]+dp[k+1,j]+a[i]*a[k]*a[j]$<br>$(1&lt;&#x3D;i&lt;&#x3D;n-len+1, j&#x3D;i+len-1, i&lt;&#x3D;k&lt;j)$</p>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">2</span>;len &lt;= n; len++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n - len + <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = i;k &lt; j; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(dp[i][k] + dp[k + <span class="number">1</span>][j] + (a[i] + a[j]) * a[k] &gt; dp[i][j]) &#123;</span><br><span class="line">					dp[i][j] = dp[i][k] + dp[k + <span class="number">1</span>][j] + (a[i] + a[j]) * a[k];</span><br><span class="line">					pre[i][j] = k;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">1</span>][n]);</span><br></pre></td></tr></table></figure>

<p>重点在于如何输出路径。<br>注意读题：</p>
<h4 id="求出最终可以获得的最大总价值，并按照分离阶段从前到后，区域从左到右的顺序，输出发生分离区域编号。若有多种方案，选择分离区域尽量靠左的方案（也可以理解为输出字典序最小的）。例如先打印一分为二的区域，然后从左到右打印二分为四的分离区域，然后是四分为八的……"><a href="#求出最终可以获得的最大总价值，并按照分离阶段从前到后，区域从左到右的顺序，输出发生分离区域编号。若有多种方案，选择分离区域尽量靠左的方案（也可以理解为输出字典序最小的）。例如先打印一分为二的区域，然后从左到右打印二分为四的分离区域，然后是四分为八的……" class="headerlink" title="求出最终可以获得的最大总价值，并按照分离阶段从前到后，区域从左到右的顺序，输出发生分离区域编号。若有多种方案，选择分离区域尽量靠左的方案（也可以理解为输出字典序最小的）。例如先打印一分为二的区域，然后从左到右打印二分为四的分离区域，然后是四分为八的……"></a>求出最终可以获得的最大总价值，并按照分离阶段从前到后，区域从左到右的顺序，输出发生分离区域编号。若有多种方案，选择分离区域尽量靠左的方案（也可以理解为输出字典序最小的）。例如先打印一分为二的区域，然后从左到右打印二分为四的分离区域，然后是四分为八的……</h4><h3 id="也就是说需要倒着输出，从最后的划分点往回找，先递归输出左边，再输出右边。"><a href="#也就是说需要倒着输出，从最后的划分点往回找，先递归输出左边，再输出右边。" class="headerlink" title="也就是说需要倒着输出，从最后的划分点往回找，先递归输出左边，再输出右边。"></a>也就是说需要倒着输出，从最后的划分点往回找，先递归输出左边，再输出右边。</h3><p>结果考试的时候以为要从左往右输出，于是所有的输出都是从1~n-1…   又因为一些bug导致基本没得分。。。<br>输出可以用dfs，从最后一个划分点往回找。</p>
<p>定义$dfs(x, y, end)$,$x$表示左边界，$y$表示右边界，$end$ 表示划分次数。<br>要配合使用一个$while$循环，原理如下</p>
<p>1.定义一个$h$表示输出的序号，每轮循环+1,与$dfs$中的$end$配合，保证输出的顺序不乱，将$h$初始化为0，$flag$置为1.<br>2.进入循环 {</p>
<ul>
<li>先把flag置为0：如果在dfs中满足了h &#x3D;&#x3D; end即现在的划分次数$end$刚好等于          此时应该为的划分次数$h$，即可以将它置为1。</li>
<li>再把h++，更新划分点的次数。</li>
<li>进行$dfs(1， n， 1)$.</li>
</ul>
<p>3.dfs(…….) {</p>
<ul>
<li>如果左端点大于等于了右端点，那么就return ;</li>
<li>如果如果在dfs中满足了h &#x3D;&#x3D; end即现在的划分次数$end$刚好等于此时应该为的划分次数$h$，（以确保顺序没乱）</li>
<li>就可以将$pre[x, y]$输出。</li>
<li>然后递归输出左半部分，在输出右半部分  （血的教训告诉我要审题。。。）</li>
<li>左半部分边界：左端点为$x$，右端点为$pre[x][y]$,end++.</li>
<li>左半部分边界：左端点为$pre[x][y]+1$，右端点为$y$,end++.<br><font color = white> tab       </font>}<br>}</li>
</ul>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= y) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (end == h) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, pre[x][y]);</span><br><span class="line">		flag = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(x, pre[x][y], end + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">dfs</span>(pre[x][y] + <span class="number">1</span>, y, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">	flag = <span class="number">0</span>;</span><br><span class="line">	h ++;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>区间DP</category>
      </categories>
      <tags>
        <tag>区间DP</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」STL技巧整理</title>
    <url>/2020/07/22/2020-07-22-STL%20%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86%207_22/</url>
    <content><![CDATA[<blockquote>
<p>关于STL的简单总结</p>
</blockquote>
<h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><p>STL是Standard Template Library的简称，中文名标准模板库，惠普实验室开发的一系列软件的统称。它是由Alexander Stepanov、Meng Lee和David R Musser在惠普实验室工作时所开发出来的。从根本上说，STL是一些“容器”的集合，这些“容器”有list,vector,set,map等，STL也是算法和其他一些组件的集合。这里的“容器”和算法的集合指的是世界上很多聪明人很多年的杰作。STL的目的是标准化组件，这样就不用重新开发，可以使用现成的组件。STL是C++的一部分，因此不用安装额外的库文件。</p>
<span id="more"></span>
<h3 id="STL-目录一览"><a href="#STL-目录一览" class="headerlink" title="STL 目录一览"></a>STL 目录一览</h3><ul>
<li>vector</li>
<li>queue</li>
<li>priority_queue</li>
<li>deque</li>
<li>set</li>
<li>map<h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3>  变长数组，内部基于倍增思想。<h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b[<span class="number">250</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;...&#125;;</span><br><span class="line">vector&lt;node&gt; c;</span><br></pre></td></tr></table></figure>
<h5 id="size-x2F-empty"><a href="#size-x2F-empty" class="headerlink" title="size&#x2F;empty"></a>size&#x2F;empty</h5><p>size 返回的是已知vector的长度，empty返回bool，判断是否为空。</p>
<h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5><p>清空。。。</p>
<h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a><strong>迭代器</strong></h5><p>类似于指针，用’*’解除引用。<br><strong>声明方式</strong></p>
<blockquote>
<p>vector<int>::iterator it;</p>
</blockquote>
<h5 id="begin-x2F-end-amp-front-x2F-back"><a href="#begin-x2F-end-amp-front-x2F-back" class="headerlink" title="begin&#x2F;end &amp; front&#x2F;back"></a>begin&#x2F;end &amp; front&#x2F;back</h5><p>begin&#x2F;end :望文生义，返回第一个元素与最后一个元素的<strong>迭代器</strong>。<br>front&#x2F;back : 返回第一个元素与最后一个元素的<strong>数值</strong>。<br><strong>遍历方式</strong><br>1.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= a.<span class="built_in">size</span>(); i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i];</span><br></pre></td></tr></table></figure>
<ol start="2">
<li></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it = a.<span class="built_in">begin</span>();it != a.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="push-back-amp-pop-back"><a href="#push-back-amp-pop-back" class="headerlink" title="push_back() &amp; pop_back()"></a>push_back() &amp; pop_back()</h5><p>向最后一位插入元素， 或删除元素。</p>
<hr>
<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">res</span>&#123;...&#125;; queue&lt;res&gt; q;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">res</span>&#123;...&#125;; priority_queue&lt;res&gt; q;</span><br></pre></td></tr></table></figure>

<h4 id="queue-1"><a href="#queue-1" class="headerlink" title="queue"></a>queue</h4><blockquote>
<p>循环队列</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
<th>实例</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>push</td>
<td>入队（从队尾）</td>
<td>q.push(val)</td>
<td>$O(1)$</td>
</tr>
<tr>
<td>pop</td>
<td>出队（从队头）</td>
<td>q.pop()</td>
<td>$O(1)$</td>
</tr>
<tr>
<td>front</td>
<td>队头元素</td>
<td>int x &#x3D; q.front</td>
<td>$O(1)$</td>
</tr>
<tr>
<td>back</td>
<td>队尾元素</td>
<td>int y &#x3D; q.front</td>
<td>$O(1)$</td>
</tr>
</tbody></table>
<h4 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h4><blockquote>
<p>优先队列 —&gt;大根堆</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
<th>实例</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>push</td>
<td>把元素插入堆</td>
<td>q.push(val)</td>
<td>$O(log n)$</td>
</tr>
<tr>
<td>pop</td>
<td>删除堆顶</td>
<td>q.pop()</td>
<td>$O(log n)$</td>
</tr>
<tr>
<td>top</td>
<td>查询堆顶元素（最大值）</td>
<td>int x &#x3D; q.top</td>
<td>$O(1)$</td>
</tr>
</tbody></table>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><blockquote>
<p>双端队列 &#x3D; vector + queue</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
<th>实例</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>[]</td>
<td>随机访问</td>
<td>同vector</td>
<td>$O(1)$</td>
</tr>
<tr>
<td>begin&#x2F;end</td>
<td>头尾迭代器</td>
<td>同vector</td>
<td>$O(1)$</td>
</tr>
<tr>
<td>front&#x2F;back</td>
<td>头尾元素</td>
<td>同queue</td>
<td>$O(1)$</td>
</tr>
<tr>
<td>clear</td>
<td>清空</td>
<td>q.clear</td>
<td>$O(n)</td>
</tr>
</tbody></table>
<p>另一些望文生义的函数<br>push_back&#x2F;push_front<br>pop_front&#x2F;pop_back</p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><h4 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h4><h5 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">res</span>&#123;...&#125;; set&lt;res&gt; s;</span><br></pre></td></tr></table></figure>

<h5 id="size-x2F-empty-x2F-clear"><a href="#size-x2F-empty-x2F-clear" class="headerlink" title="size&#x2F;empty&#x2F;clear"></a>size&#x2F;empty&#x2F;clear</h5><p>与vector的相关函数相似。<br>时间复杂度$O(1)$</p>
<h5 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a><strong>迭代器</strong></h5><p>set的迭代器是一个<em>双向访问迭代器</em>，不支持随机访问，但可以使用’<em>‘解除引用，并且*<em>只支持’++’与‘–’两个运算符。</em></em></p>
<h6 id="迭代器声明"><a href="#迭代器声明" class="headerlink" title="迭代器声明"></a>迭代器声明</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt;::ioerator it;</span><br></pre></td></tr></table></figure>
<h5 id="begin-x2F-end"><a href="#begin-x2F-end" class="headerlink" title="begin&#x2F;end"></a>begin&#x2F;end</h5><p>返回首尾元素的<strong>迭代器</strong></p>
<h5 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h5><p>插入元素。<br><strong>注意</strong> set与数学中的集合相似，不包含重复的元素，如果插入的元素已经存在，则不会重复操作。时间复杂度$O(log n)$</p>
<h6 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) s.<span class="built_in">insert</span>(a[i]);</span><br><span class="line"><span class="keyword">for</span>(set&lt;<span class="type">int</span>&gt;::ioerator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="find-x2F-lower-bound-amp-upper-bound"><a href="#find-x2F-lower-bound-amp-upper-bound" class="headerlink" title="find &#x2F; lower_bound &amp; upper_bound"></a>find &#x2F; lower_bound &amp; upper_bound</h5><p>在set集合中寻找一个等于x元素，返回迭代器，如果寻找不到，则返回s.end()。<br>lower_bound :寻找 ≥ x的元素中最小的一个<br>upper_bound:寻找&gt;x的元素中最小的一个</p>
<h5 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h5><p>删除迭代器it所指向的元素</p>
<h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>返回set中等于x的元素个数</p>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map是对于 $key - value$的映射，$key$和$value$可以为任意的类型。</p>
<p><strong>size&#x2F;empty&#x2F;clear&#x2F;begin&#x2F;end</strong><br>同前<br><strong>迭代器</strong><br>是一个双向访问器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">map&lt;key, value&gt;::iterator it = m.<span class="title function_">begin</span>();</span><br><span class="line">it-&gt;first --- key;</span><br><span class="line">it-&gt;second --- value;</span><br></pre></td></tr></table></figure>
<p><strong>find</strong><br>$find(x)$ 为在map里寻找以$x$为$key$的迭代器，如果没有就返回$m.end()$</p>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>实用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」数三角</title>
    <url>/2020/07/25/2020-07-25-%E6%95%B0%E4%B8%89%E8%A7%92%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>@<a href="%E6%95%B0%E4%B8%89%E8%A7%92">TOC</a></p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>这是一个数三角的游戏。长度为1或SQRT(2)的小木棍放在一个网格上。如图所示，有水平的，垂直的或对角的。对角放置的木棍可以交叉。<span id="more"></span></p>
<p><img data-src="https://img-blog.csdnimg.cn/20200725202412539.png" alt="在这里插入图片描述"></p>
<p>将木棍随意地放在网格上得到的图案可能不含三角形，也可能含一个或多个三角形。如下图所示，</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200725202422527.png" alt="在这里插入图片描述"></p>
<p>(a),(b),(c),(d)和(e)分别含有2,5,12,0,0个三角形。你的任务是写一个程序数出一个图案中的三角形个数。。cpp</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入文件count.in包括N+1行：</p>
<p>先输入图案中木棍的个数N。下面输入这N根木棍的位置，用两个网格坐标表示，这两个坐标分别为木棍两端的位置。网格大小不超过10´10，因此网格左下和右上的坐标分别为(0,0)和(9,9)。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输入文件count.out包括1行：</p>
<p>三角形的个数。</p>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>3<br>0 0 0 1<br>0 0 1 0<br>0 1 1 0</p>
<h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><p>1</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我在考试时的思路是定义一个 <strong>三维数组</strong> $G[x][y][state]$<br>表示取火柴棒较上的端点的位置，$state$表示摆放的状态 ： 1 -&gt; 向左倾斜 2 -&gt; 向右倾斜  3 -&gt; 垂直于网格线 4 -&gt; 平行于网格线<br>但我在实现的过程中发现了问题，如果在端点离得比较远的时候，枚举会很浪费时间，并且能够构成三角形的组合非常多，不易写出代码，调试程序会变得非常的麻烦。<br>考试后看了$LJS$的代码后又重新理了一下思路：<br>此题的步骤大致分成三个板块 ：</p>
<ul>
<li><input disabled="" type="checkbox"> 预处理</li>
<li><input disabled="" type="checkbox"> 处理连通性 -&gt; $Floyd$</li>
<li><input disabled="" type="checkbox"> 判断是否构成三角形</li>
</ul>
<h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p> 1.将输入坐标依次扩大两倍<br> 如下图：<br> <img data-src="https://img-blog.csdnimg.cn/20200725204848591.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NxYnpfQ2hlbkppYWdl,size_16,color_FFFF01,t_70" alt="在这里插入图片描述"><br>这样的话就可以判断如小图中对角线交叉，可以使得对对角线的交点处于网格上。<br>在一次判断两点之间的关系<br>2.标记所连接的线段是对角线还是在网格线上面。<br>参考代码如下(比较累赘)：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">	<span class="type">int</span> a1, a2, a3, a4;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;a1, &amp;a2, &amp;a3, &amp;a4);</span><br><span class="line">	a1 *= <span class="number">2</span>, a2 *= <span class="number">2</span>, a3 *= <span class="number">2</span>, a4 *= <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (a3 + a4 - a1 - a2 == <span class="number">2</span>) &#123; <span class="comment">//在网格线的直边上面 </span></span><br><span class="line">           <span class="keyword">if</span> (a2 == a4) &#123;<span class="comment">//竖 </span></span><br><span class="line">               map[a1 + <span class="number">1</span>][a2][a3][a2] = <span class="number">1</span>;</span><br><span class="line">               map[a3][a2][a1 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">               map[a1 + <span class="number">1</span>][a2][a1][a2] = <span class="number">1</span>;</span><br><span class="line">               map[a1][a2][a1 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (a1 == a3) &#123;<span class="comment">//横 </span></span><br><span class="line">               map[a1][a2 + <span class="number">1</span>][a1][a4] = <span class="number">1</span>;</span><br><span class="line">               map[a1][a4][a1][a2 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">               map[a1][a2 + <span class="number">1</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">               map[a1][a2][a1][a2 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (a1 + a2 - a3 - a4 == <span class="number">2</span>) &#123;<span class="comment">//反向 </span></span><br><span class="line">           <span class="keyword">if</span> (a2 == a4) &#123;</span><br><span class="line">               map[a1][a2][a3 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">               map[a3 + <span class="number">1</span>][a2][a1][a2] = <span class="number">1</span>;</span><br><span class="line">               map[a3][a2][a3 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">               map[a3][a2][a3 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (a1 == a3) &#123;</span><br><span class="line">               map[a1][a2][a1][a4 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">               map[a1][a4 + <span class="number">1</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">               map[a1][a4 + <span class="number">1</span>][a1][a4] = <span class="number">1</span>;</span><br><span class="line">               map[a1][a4][a1][a4 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (a1 + a2 - a3 - a4 == <span class="number">4</span>) &#123;<span class="comment">//在对角线上面 </span></span><br><span class="line">           map[a3 + <span class="number">1</span>][a4 + <span class="number">1</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">           map[a1][a2][a3 + <span class="number">1</span>][a4 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">           map[a3][a4][a3 + <span class="number">1</span>][a4 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">           map[a3 + <span class="number">1</span>][a4 + <span class="number">1</span>][a3][a4] = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (a3 + a4 - a1 - a2 == <span class="number">4</span>) &#123;</span><br><span class="line">           map[a1 + <span class="number">1</span>][a2 + <span class="number">1</span>][a3][a4] = <span class="number">1</span>;</span><br><span class="line">           map[a3][a4][a1 + <span class="number">1</span>][a2 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">           map[a1][a2][a1 + <span class="number">1</span>][a2 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">           map[a1 + <span class="number">1</span>][a2 + <span class="number">1</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (a1 + a2 == a3 + a4) &#123;</span><br><span class="line">           map[a1][a2][(a1 + a3) / <span class="number">2</span>][(a2 + a4) / <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">           map[(a1 + a3) / <span class="number">2</span>][(a2 + a4) / <span class="number">2</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">           map[a3][a4][(a1 + a3) / <span class="number">2</span>][(a2 + a4) / <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">           map[(a1 + a3) / <span class="number">2</span>][(a2 + a4) / <span class="number">2</span>][a3][a4] = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       map[a1][a2][a3][a4] = <span class="number">1</span>;<span class="comment">//将已经给出的两点连在一起 </span></span><br><span class="line">       map[a3][a4][a1][a2] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求出连通性"><a href="#求出连通性" class="headerlink" title="求出连通性"></a>求出连通性</h4><p>参考$Floyd$算法的思想：<br>枚举中转点$i$与和它相连接的另外两个<strong>不同于中转点</strong>且<strong>没有连接</strong>的节点$z$,$j$，判断两点之间的可连性（三点共线），如果可以，就将其连接。<br>可连性判断：<br>$(z1 - i1) * (j - i) - (j1 - i1) * (z - i) &#x3D;&#x3D; 0$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">18</span>; i++) &#123; </span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">18</span>; j++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt;= <span class="number">18</span>; z++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt;= <span class="number">18</span>; i1++) &#123;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="type">int</span> j1 = <span class="number">0</span>; j1 &lt;= <span class="number">18</span>; j1++) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="type">int</span> z1 = <span class="number">0</span>; z1 &lt;= <span class="number">18</span>; z1++) &#123;</span><br><span class="line">                           <span class="keyword">if</span> (map[i][i1][j][j1] == <span class="number">1</span> &amp;&amp; map[i][i1][z][z1] == <span class="number">1</span> </span><br><span class="line">                           &amp;&amp; !(i == j &amp;&amp; i1 == j1) &amp;&amp; !(i == z &amp;&amp; i1 == z1)</span><br><span class="line">                            &amp;&amp; (z1 - i1) * (j - i) - (j1 - i1) * (z - i) == <span class="number">0</span> </span><br><span class="line">                            &amp;&amp; map[j][j1][z][z1] == <span class="number">0</span> &amp;&amp; map[z][z1][j][j1] == <span class="number">0</span>) &#123;</span><br><span class="line">                               map[j][j1][z][z1] = <span class="number">1</span>;</span><br><span class="line">                               map[z][z1][j][j1] = <span class="number">1</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否构成三角形"><a href="#判断是否构成三角形" class="headerlink" title="判断是否构成三角形"></a>判断是否构成三角形</h4><p>判断方式：暴力枚举三角形的三个端点，如果三点之间能够相连，那么能够组成三角形，就$ans++$。<br>在输出时应该注意要将$ans &#x2F; 6$，因为在枚举三个端点会出现重复，根据乘法原理可知，$ans$的枚举将会重复$3 * 2 * 1$次。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">18</span>; i++) &#123; </span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">18</span>; j++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt;= <span class="number">18</span>; z++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt;= <span class="number">18</span>; i1++) &#123;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="type">int</span> j1 = <span class="number">0</span>; j1 &lt;= <span class="number">18</span>; j1++) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="type">int</span> z1 = <span class="number">0</span>; z1 &lt;= <span class="number">18</span>; z1++) &#123;</span><br><span class="line">                           <span class="keyword">if</span> (map[i][i1][j][j1] == <span class="number">1</span> &amp;&amp; map[i][i1][z][z1] == <span class="number">1</span> </span><br><span class="line">                           &amp;&amp; map[j][j1][z][z1] == <span class="number">1</span> </span><br><span class="line">                           &amp;&amp; !(i == j &amp;&amp; i1 == j1) &amp;&amp; !(i == z &amp;&amp; i1 == z1) </span><br><span class="line">                               &amp;&amp; !(j == z &amp;&amp; j1 == z1) </span><br><span class="line">                               &amp;&amp; (z1 - i1) * (j - i) - (j1 - i1) * (z - i) != <span class="number">0</span>) &#123;</span><br><span class="line">                                   ans++;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">ans /= (<span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> map[MAXN][MAXN][MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> a1, a2, a3, a4;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;a1, &amp;a2, &amp;a3, &amp;a4);</span><br><span class="line">		a1 *= <span class="number">2</span>, a2 *= <span class="number">2</span>, a3 *= <span class="number">2</span>, a4 *= <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (a3 + a4 - a1 - a2 == <span class="number">2</span>) &#123; <span class="comment">//在网格线的直边上面 </span></span><br><span class="line">            <span class="keyword">if</span> (a2 == a4) &#123;<span class="comment">//竖 </span></span><br><span class="line">                map[a1 + <span class="number">1</span>][a2][a3][a2] = <span class="number">1</span>;</span><br><span class="line">                map[a3][a2][a1 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">                map[a1 + <span class="number">1</span>][a2][a1][a2] = <span class="number">1</span>;</span><br><span class="line">                map[a1][a2][a1 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a1 == a3) &#123;<span class="comment">//横 </span></span><br><span class="line">                map[a1][a2 + <span class="number">1</span>][a1][a4] = <span class="number">1</span>;</span><br><span class="line">                map[a1][a4][a1][a2 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                map[a1][a2 + <span class="number">1</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">                map[a1][a2][a1][a2 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a1 + a2 - a3 - a4 == <span class="number">2</span>) &#123;<span class="comment">//反向 </span></span><br><span class="line">            <span class="keyword">if</span> (a2 == a4) &#123;</span><br><span class="line">                map[a1][a2][a3 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">                map[a3 + <span class="number">1</span>][a2][a1][a2] = <span class="number">1</span>;</span><br><span class="line">                map[a3][a2][a3 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">                map[a3][a2][a3 + <span class="number">1</span>][a2] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a1 == a3) &#123;</span><br><span class="line">                map[a1][a2][a1][a4 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                map[a1][a4 + <span class="number">1</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">                map[a1][a4 + <span class="number">1</span>][a1][a4] = <span class="number">1</span>;</span><br><span class="line">                map[a1][a4][a1][a4 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a1 + a2 - a3 - a4 == <span class="number">4</span>) &#123;<span class="comment">//在对角线上面 </span></span><br><span class="line">            map[a3 + <span class="number">1</span>][a4 + <span class="number">1</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">            map[a1][a2][a3 + <span class="number">1</span>][a4 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            map[a3][a4][a3 + <span class="number">1</span>][a4 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            map[a3 + <span class="number">1</span>][a4 + <span class="number">1</span>][a3][a4] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a3 + a4 - a1 - a2 == <span class="number">4</span>) &#123;</span><br><span class="line">            map[a1 + <span class="number">1</span>][a2 + <span class="number">1</span>][a3][a4] = <span class="number">1</span>;</span><br><span class="line">            map[a3][a4][a1 + <span class="number">1</span>][a2 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            map[a1][a2][a1 + <span class="number">1</span>][a2 + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            map[a1 + <span class="number">1</span>][a2 + <span class="number">1</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a1 + a2 == a3 + a4) &#123;</span><br><span class="line">            map[a1][a2][(a1 + a3) / <span class="number">2</span>][(a2 + a4) / <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            map[(a1 + a3) / <span class="number">2</span>][(a2 + a4) / <span class="number">2</span>][a1][a2] = <span class="number">1</span>;</span><br><span class="line">            map[a3][a4][(a1 + a3) / <span class="number">2</span>][(a2 + a4) / <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            map[(a1 + a3) / <span class="number">2</span>][(a2 + a4) / <span class="number">2</span>][a3][a4] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map[a1][a2][a3][a4] = <span class="number">1</span>;<span class="comment">//将已经给出的两点连在一起 </span></span><br><span class="line">        map[a3][a4][a1][a2] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">18</span>; i++) &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">18</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt;= <span class="number">18</span>; z++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt;= <span class="number">18</span>; i1++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j1 = <span class="number">0</span>; j1 &lt;= <span class="number">18</span>; j1++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> z1 = <span class="number">0</span>; z1 &lt;= <span class="number">18</span>; z1++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (map[i][i1][j][j1] == <span class="number">1</span> &amp;&amp; map[i][i1][z][z1] == <span class="number">1</span> &amp;&amp; !(i == j &amp;&amp; i1 == j1) &amp;&amp; !(i == z &amp;&amp; i1 == z1) &amp;&amp; (z1 - i1) * (j - i) - (j1 - i1) * (z - i) == <span class="number">0</span> &amp;&amp; map[j][j1][z][z1] == <span class="number">0</span> &amp;&amp; </span><br><span class="line">                                map[z][z1][j][j1] == <span class="number">0</span>) &#123;</span><br><span class="line">                                map[j][j1][z][z1] = <span class="number">1</span>;</span><br><span class="line">                                map[z][z1][j][j1] = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">18</span>; i++) &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">18</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt;= <span class="number">18</span>; z++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt;= <span class="number">18</span>; i1++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j1 = <span class="number">0</span>; j1 &lt;= <span class="number">18</span>; j1++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> z1 = <span class="number">0</span>; z1 &lt;= <span class="number">18</span>; z1++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (map[i][i1][j][j1] == <span class="number">1</span> &amp;&amp; map[i][i1][z][z1] == <span class="number">1</span> &amp;&amp; map[j][j1][z][z1] == <span class="number">1</span> &amp;&amp;</span><br><span class="line">                                !(i == j &amp;&amp; i1 == j1) &amp;&amp; !(i == z &amp;&amp; i1 == z1) &amp;&amp; !(j == z &amp;&amp; j1 == z1) &amp;&amp;</span><br><span class="line">								(z1 - i1) * (j - i) - (j1 - i1) * (z - i) != <span class="number">0</span>) &#123;</span><br><span class="line">                                    ans++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	ans /= (<span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>题解</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」树状数组</title>
    <url>/2020/07/26/2020-07-26-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>树状数组(Binary Indexed Tree(B.I.T), Fenwick Tree)是一个查询和修改复杂度都为log(n)的数据结构。主要用于查询任意两位之间的所有元素之和，但是每次只能修改一个元素的值；经过简单修改可以在log(n)的复杂度下进行范围修改，但是这时只能查询其中一个元素的值(如果加入多个辅助数组则可以实现区间修改与区间查询)。 —— by baidu<span id="more"></span></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>用一个数组$bit[i]$表示从$[i - lowbit(x) + 1, x]$中的所有的数的和。<br>如下图：<br><img data-src="https://img-blog.csdnimg.cn/20200726220329744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NxYnpfQ2hlbkppYWdl,size_16,color_FFFF11,t_70" alt="在这里插入图片描述"></p>
<h4 id="lowbit操作"><a href="#lowbit操作" class="headerlink" title="lowbit操作"></a>lowbit操作</h4><p>$lowbit$表示一个数在二进制中只保留最后一位1及其以后的0所表示的数字。<br>常用的方法：<br>先将原数取反再与上原数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="update操作"><a href="#update操作" class="headerlink" title="update操作"></a>update操作</h4><p>$update$是单点修改操作，可以修改任意一个点上的数值，并进行全局维护。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x;i &lt;= n; i += <span class="built_in">lowbit</span>(i)) </span><br><span class="line">		bit[i] += y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Sum操作"><a href="#Sum操作" class="headerlink" title="Sum操作"></a>Sum操作</h4><p>$Sum(x)$是将从$1 -x$的所有数值的和累加起来：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">		ans += bit[i];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="常用模板"><a href="#常用模板" class="headerlink" title="常用模板"></a>常用模板</h3><h4 id="单点修改，区间查询"><a href="#单点修改，区间查询" class="headerlink" title="单点修改，区间查询"></a>单点修改，区间查询</h4><p>基本操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a, bit[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; (- x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x;i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) ans += bit[i];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x;i &lt;= n; i += <span class="built_in">lowbit</span>(i)) bit[i] += y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a);</span><br><span class="line">		<span class="built_in">update</span>(i, a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= q; i++) &#123;</span><br><span class="line">		<span class="type">int</span> oder;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;oder);</span><br><span class="line">		<span class="keyword">if</span>(oder == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="type">int</span> k, x;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;k, &amp;x);</span><br><span class="line">			<span class="built_in">update</span>(k, x);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">if</span>(oder == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="type">int</span> l, r;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Sum</span>(r) - <span class="built_in">Sum</span>(l - <span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h4 id="区间修改，区间查询"><a href="#区间修改，区间查询" class="headerlink" title="区间修改，区间查询"></a>区间修改，区间查询</h4><p>$P[]仍为A[]的差分数组，那么原数组的前缀和<br>A[1]+A[2]+……+ A[n]<br>&#x3D;P[1]+(P[1]+P[2])+(P[1]+P[2]+P[3])+……+(P[1]+P[2]+……+P[n])<br>&#x3D;n<em>P[1]+(n-1)<em>P[2]+(n-2)<em>P[3]+……+P[n]<br>&#x3D;n</em>(P[1]+P[2]+P[3]+……+P[n])-(0</em>P[1]+1</em>P[2]+2*P[3]+……+(n-1)<em>P[n])$<br>观察减式两边，分别将P[i]和(i-1)p[i]建立两个树状数组BIT1和BIT2，BIT1就是<strong>差分数组</strong>，区间修改按上一例进行；BIT2的增量就不是x了，而是x</em>(i-1)。至于区间查询，我们已经知道原数组前缀和了，直接相减即可查询区间和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> bit1[MAXN], bit2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updata</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x;i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">		bit1[i] += (<span class="type">long</span> <span class="type">long</span>) y;</span><br><span class="line">		bit2[i] += (<span class="type">long</span> <span class="type">long</span>) (x - <span class="number">1</span>) * y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = k; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">		ans += (<span class="type">long</span> <span class="type">long</span>) bit1[i] * k - (<span class="type">long</span> <span class="type">long</span>) bit2[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">		<span class="built_in">updata</span>(i, a[i] - a[i - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= q; i++) &#123;</span><br><span class="line">		<span class="type">int</span> opt, l, r, x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">			<span class="built_in">updata</span>(l, x);</span><br><span class="line">			<span class="built_in">updata</span>(r + <span class="number">1</span>, -x);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Sum</span>(r) - <span class="built_in">Sum</span>(l - <span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="区间修改，单点查询"><a href="#区间修改，单点查询" class="headerlink" title="区间修改，单点查询"></a>区间修改，单点查询</h4><p>$对原数组A[]建一个差分数组P[i]&#x3D;A[i]-A[i-1]那么A[i]&#x3D;P[1]+P[2]+……+P[i]$<br>将差分数组P[]建立BIT，单点查询就是sum，区间修改就是update(left, x)和update(right+1, -x)，BIT求前缀和sum就是区间修改后的单点查询了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, q, a[MAXN];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> p[MAXN], bit[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; (- x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updata</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x;i &lt;= n; i += <span class="built_in">lowbit</span>(i)) bit[i] += y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x;i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">		ans += bit[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">		p[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">updata</span>(i, p[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= q; i++) &#123;</span><br><span class="line">		<span class="type">int</span> oder;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;oder);</span><br><span class="line">		<span class="keyword">if</span>(oder == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="type">int</span> l, r, x;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">			<span class="built_in">updata</span>(l, x);</span><br><span class="line">			<span class="built_in">updata</span>(r + <span class="number">1</span>, -x);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Sum</span>(x));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二维树状数组-：单点修改，区间查询"><a href="#二维树状数组-：单点修改，区间查询" class="headerlink" title="二维树状数组 ：单点修改，区间查询"></a>二维树状数组 ：单点修改，区间查询</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, opt;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> bit[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = y; j &lt;= m; j += <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">			bit[i][j] += k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = y; j &gt; <span class="number">0</span>; j -= <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">			ans += bit[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt) != EOF) &#123;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="type">int</span> x, y, k;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;k);</span><br><span class="line">			<span class="built_in">update</span>(x, y, k);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> a, b, c, d;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Sum</span>(c, d) - <span class="built_in">Sum</span>(a - <span class="number">1</span>, d) - <span class="built_in">Sum</span>(c, b - <span class="number">1</span>) + <span class="built_in">Sum</span>(a - <span class="number">1</span>, b - <span class="number">1</span>));</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h4 id="二维树状数组-：区间修改，区间查询"><a href="#二维树状数组-：区间修改，区间查询" class="headerlink" title="二维树状数组 ：区间修改，区间查询"></a>二维树状数组 ：区间修改，区间查询</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2055</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, arr[MAXN], opt;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> bit1[MAXN][MAXN], bit2[MAXN][MAXN], bit3[MAXN][MAXN], bit4[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> c, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = c; j &lt;= m; j += <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">            bit1[i][j] += (LL)x;</span><br><span class="line">            bit2[i][j] += (LL)c * x;</span><br><span class="line">            bit3[i][j] += (LL)a * x;</span><br><span class="line">            bit4[i][j] += (LL)a * c * x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y; j; j -= <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">            ans += (LL)bit1[i][j] * (x + <span class="number">1</span>) * (y + <span class="number">1</span>) - (LL)bit2[i][j] * (x + <span class="number">1</span>) - (LL)bit3[i][j] * (y + <span class="number">1</span>) +</span><br><span class="line">                   (LL)bit4[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt) != EOF) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c, d, x;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;x);</span><br><span class="line">            <span class="built_in">update</span>(a, b, x);</span><br><span class="line">            <span class="built_in">update</span>(c + <span class="number">1</span>, b, -x);</span><br><span class="line">            <span class="built_in">update</span>(a, d + <span class="number">1</span>, -x);</span><br><span class="line">            <span class="built_in">update</span>(c + <span class="number">1</span>, d + <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Sum</span>(c, d) + <span class="built_in">Sum</span>(a - <span class="number">1</span>, b - <span class="number">1</span>) - <span class="built_in">Sum</span>(a - <span class="number">1</span>, d) - <span class="built_in">Sum</span>(c, b - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」图论学习笔记2</title>
    <url>/2020/07/29/2020-07-29-%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<p>@<a href="%E6%9C%80%E7%9F%AD%E8%B7%AF">TOC</a><span id="more"></span></p>
<h3 id="多源最短路"><a href="#多源最短路" class="headerlink" title="多源最短路"></a>多源最短路</h3><h4 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h4><p>$Floyd$是基于$DP$思想。<br>设$k$为中转点，与$i$, $j$都有边相连。<br>那么可以得到$dis[i][j]$的最短路径的状态转移方程为：<br>$dis[k,i,j]&#x3D;min(dis[k-1,i,j], dis[k-1,i,k]+dis[k-1,k,j]$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="built_in">sizeof</span>(pre));</span><br><span class="line">pre[u][v] = u;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n; k++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(dis[i][j] &gt; dis[i][k] + dis[k][j]) &#123;</span><br><span class="line">					dis[i][j] = dis[i][k] + dis[k][j];</span><br><span class="line">					pre[i][j] = pre[k][j];<span class="comment">//输出路径</span></span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pre[s][x] == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, s);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(pre[s][x]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h4><p>$Dijkstra$使用贪心思想，求最短路的步骤如下：<br>1.初始化：把$dis[]$置为∞，$v[]$置为0表示还没有访问过。<br>2.循环遍历与当前节点相邻的节点，找出最短的距离。<br>3.用找出的最短距离更新剩下的节点。</p>
<h5 id="一般版本"><a href="#一般版本" class="headerlink" title="一般版本"></a>一般版本</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">	<span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="built_in">sizeof</span>(v));</span><br><span class="line">	v[s] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(! v[j] &amp;&amp; (k == <span class="number">0</span> || dis[j] &lt; dis[k])) k = j;</span><br><span class="line">		&#125;</span><br><span class="line">		v[k] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(dis[k] + w[k][j] &lt; dis[j]) &#123;</span><br><span class="line">				dis[j] = dis[k] + w[k][j];</span><br><span class="line">				pre[j] = k;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pre[x] == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(pre[x]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="邻接表优化"><a href="#邻接表优化" class="headerlink" title="邻接表优化"></a>邻接表优化</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> v, w;</span><br><span class="line">	<span class="built_in">edge</span>()&#123;&#125;</span><br><span class="line">	<span class="built_in">edge</span>(<span class="type">int</span> V, <span class="type">int</span> W) &#123;</span><br><span class="line">		v = V;</span><br><span class="line">		W = W;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DijkstraAdl</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">	<span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="built_in">sizeof</span>(v));</span><br><span class="line">	dis[s] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> u, v, w;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(! v[i] &amp;&amp; dis[i] &lt; dis[u]) u = i;</span><br><span class="line">		&#125;</span><br><span class="line">		v[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; G[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			v = G[u][j].v, w = G[u][j].w;</span><br><span class="line">			<span class="keyword">if</span>(dis[v] &gt; dis[u] + w) &#123;</span><br><span class="line">				dis[v] = dis[u] + w;</span><br><span class="line">				pre[v] = u;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="优先队列优化"><a href="#优先队列优化" class="headerlink" title="优先队列优化"></a>优先队列优化</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2505</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="type">int</span> dis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> v, w;</span><br><span class="line">    <span class="built_in">edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> V, <span class="type">int</span> W) &#123;</span><br><span class="line">        v = V;</span><br><span class="line">        w = W;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, dis;</span><br><span class="line">    <span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> U, <span class="type">int</span> D) &#123;</span><br><span class="line">        u = U;</span><br><span class="line">        dis = D;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(node x, node y) &#123; <span class="keyword">return</span> x.dis &gt; y.dis; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line">vector&lt;edge&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    G[u].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v, w));</span><br><span class="line">    G[v].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(u, w));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">node</span>(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">top</span>().u;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[now])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[now] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[now].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> v = G[now][i].v;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[now] + G[now][i].w) &#123;</span><br><span class="line">                dis[v] = dis[now] + G[now][i].w;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">node</span>(v, dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        <span class="built_in">AddEdge</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dijkstra</span>(s, t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dis[t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」图论学习笔记3</title>
    <url>/2020/07/30/2020-07-30-%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<p>@<a href="%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03">toc</a></p>
<h3 id="Bellman-Ford-算法"><a href="#Bellman-Ford-算法" class="headerlink" title="Bellman-Ford  算法"></a>Bellman-Ford  算法</h3><p>Bellman-Ford算法：<br>$Dijkstra$类似，都以松弛操作为基础，即估计的最短路径值渐渐地被更加准确的值替代，直至得到最优解。在两个算法中，计算时每个边之间的估计距离值都比真实值大，并且被新找到路径的最小长度替代。 <span id="more"></span></p>
<h6 id="松弛"><a href="#松弛" class="headerlink" title="松弛"></a>松弛</h6><p>每次松弛操作实际上是对相邻节点的访问，第 n次松弛操作保证了所有深度为n的路径最短。由于图的最短路径最长不会经过超过 |V|-1条边。</p>
<h6 id="负边权操作"><a href="#负边权操作" class="headerlink" title="负边权操作"></a>负边权操作</h6><p>“松弛”操作是在广度上找路，所以对负边进行操作而不会影响结果。</p>
<h6 id="负权环判定"><a href="#负权环判定" class="headerlink" title="负权环判定"></a>负权环判定</h6><p>在处理完所有的边后，如果还有边可以松弛，那么就一定存在负权环。</p>
<h4 id="朴素实现"><a href="#朴素实现" class="headerlink" title="朴素实现"></a>朴素实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">505</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">&#125; node[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t;</span><br><span class="line"><span class="type">int</span> dis[MAXN], pre[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    pre[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;<span class="comment">//迭代 n - 1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;<span class="comment">//遍历每一条边</span></span><br><span class="line">            <span class="keyword">if</span> (dis[node[j].u] + node[j].w &lt; dis[node[j].v]) &#123;<span class="comment">//松弛</span></span><br><span class="line">                dis[node[j].v] = dis[node[j].u] + node[j].w;</span><br><span class="line">                pre[node[j].v] = node[j].u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;<span class="comment">//判断负权环</span></span><br><span class="line">        <span class="keyword">if</span> (dis[node[i].u] + node[i].w &lt; dis[node[i].v]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">//输出路径</span></span><br><span class="line">    <span class="keyword">if</span> (pre[x] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(pre[x]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ui, vi, wi; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;ui, &amp;vi, &amp;wi);</span><br><span class="line">        node[i].u = ui;</span><br><span class="line">        node[i].v = vi;</span><br><span class="line">        node[i].w = wi;</span><br><span class="line">        pre[vi] = ui;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;s, &amp;t);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Bellman_Ford</span>(s, t)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dis[t]);</span><br><span class="line">        <span class="built_in">print</span>(t);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No Solution\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spfa"><a href="#Spfa" class="headerlink" title="Spfa"></a>Spfa</h3><h4 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h4><p>建一个队列 ，取队头顶点u；将与点u相连的所有点v松弛，如果能更新估计值，那么就更新，如果点v没有在队列中，那么要将点v入队，如果已经在队列中了，那么就不用，循环直到队空为止，完成了单源最短路的求解。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t;</span><br><span class="line"><span class="type">int</span> dis[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;<span class="comment">//存边</span></span><br><span class="line">    <span class="type">int</span> v, w;</span><br><span class="line">    <span class="built_in">edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> V, <span class="type">int</span> W) &#123;</span><br><span class="line">        v = V;</span><br><span class="line">        w = W;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;edge&gt; G[MAXM];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;<span class="comment">//加边</span></span><br><span class="line">    G[u].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v, w));</span><br><span class="line">    G[v].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(u, w));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();<span class="comment">//取出队头</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[u] + G[u][i].w &lt; dis[G[u][i].v]) &#123;<span class="comment">//扩展新节点</span></span><br><span class="line">                dis[G[u][i].v] = dis[u] + G[u][i].w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[G[u][i].v]) &#123;</span><br><span class="line">                    vis[G[u][i].v] = <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(G[u][i].v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」图论学习笔记1</title>
    <url>/2020/07/28/2020-07-28-%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<p>@<a href="%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">TOC</a></p>
<h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><p>图：由<strong>顶点（vertex）</strong>和<strong>边（edge）</strong>组成。</p>
<span id="more"></span>
<p><strong>顶点</strong>—具体事物<br><strong>边</strong>—具体事物之间的联系</p>
<p>顶点的集合$V$，边的集合$E$，图记为$G &#x3D; (V,E)$</p>
<h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3><p>一般分为两种 ： 邻接矩阵、邻接表</p>
<h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>由一个二维数组实现,比较简单，但是在存储稠密图时比较不划算。<br>$G[i][j]$表示的是顶点i与顶点j的关系。<br>如果顶点i和顶点j之间有边相连， $G[i][j]&#x3D;1$<br>如果顶点i和顶点j之间无边相连， $G[i][j]&#x3D;0$</p>
<p>对于无向图：$G[i][j]&#x3D;G[j][i]$<br>如果边上面有权值，则$G[i][j] &#x3D; val$</p>
<h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>通过使用$vector$实现</p>
<h5 id="存点"><a href="#存点" class="headerlink" title="存点"></a>存点</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> v, w;</span><br><span class="line">	<span class="built_in">edge</span>()&#123;&#125;;<span class="comment">//首先申明函数</span></span><br><span class="line">	<span class="built_in">edge</span>(<span class="type">int</span> V, <span class="type">int</span> W) &#123;</span><br><span class="line">		v = V;</span><br><span class="line">		w = W;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; </span><br><span class="line">vector&lt;edge&gt; G[MAXN];</span><br></pre></td></tr></table></figure>
<h5 id="加边"><a href="#加边" class="headerlink" title="加边"></a>加边</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;<span class="comment">//u 起点  v 终点  w 边上的权值</span></span><br><span class="line">	G[u].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v, w));</span><br><span class="line">	G[v].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(u, w));<span class="comment">//如果是无向图就加上这一句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><p>有深度优先遍历和广度优先遍历两种</p>
<h5 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h5><p>初始状态是图中所有顶点未曾被访问，可从图中顶点v出发，访问此顶点，然后依次从v的未被访问的邻接点出发深度优先遍历图，直至图中所有和v有路径相通的顶点都被访问到；若此时图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">bool</span> v[MAXN];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">	v[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">sort</span>(G[x].<span class="built_in">begin</span>(), G[x].<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; G[x].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(! v[G[x][i]]) &#123;</span><br><span class="line">			v[G[x][i]] = <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(G[x][i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">int</span> u, v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">addEdge</span>(u, v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(! v[i]) <span class="built_in">dfs</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="广度优先"><a href="#广度优先" class="headerlink" title="广度优先"></a>广度优先</h5><p>假设从图中某顶点v出发，在访问v之后依次访问v的各个未被访问过的邻接点，然后分别从这些邻接点出发依次访问它们的邻接点，并使“先被访问的顶点的邻接点”先于“后被访问的顶点的邻接点”被访问，直至图中所有已被访问的顶点的邻接点都被访问到。若此时图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。换句话说，广度优先搜索遍历图的过程是以v为起始点，由近至远，依次访问和v有路径相通且路径长度为1，2，…的顶点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">bool</span> v[MAXN];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(k);</span><br><span class="line">	v[k] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, k);</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> a = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="built_in">sort</span>(G[a].<span class="built_in">begin</span>(), G[a].<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; G[a].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(! v[G[a][i]]) &#123;</span><br><span class="line">				v[G[a][i]] = <span class="number">1</span>;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, G[a][i]);</span><br><span class="line">				q.<span class="built_in">push</span>(G[a][i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">int</span> u, v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">addEdge</span>(u, v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(! v[i]) <span class="built_in">bfs</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>「Notice」最小生成树</title>
    <url>/2020/08/05/2020-08-05-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%20-%20Kruskal/</url>
    <content><![CDATA[<p>@<a href="%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91">toc</a></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>给定一个<strong>带权图</strong>，满足以下条件：</p>
<ul>
<li>1.保证图中所有的点都<strong>联通</strong></li>
<li>2.在满足条件1的情况下尽可能去掉多的边，使得所有的边权之和最小，即$\Sigma_{i&#x3D;1}^{i&lt;&#x3D;m}w_i$最小。<span id="more"></span>
<h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3></li>
</ul>
<p><strong>Kruskal</strong>是基于<strong>贪心</strong>的思想，根据以上的定义描述依次枚举$1-m$条边，如果两个点<strong>没有</strong>存在于一个<strong>连通分量中</strong>，那么就连上这一条边。<br>此算法的难点在于查询两个点是否在一个<strong>连通分量</strong>中，朴素思想可以使用$DFS$&#x2F;$BFS$进行遍历，但是会使得时间复杂度非常高，此时可以使用<strong>并查集</strong>进行维护，优化时间。</p>
<hr>
<h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p>1.建立并查集，初始化$fa[i] &#x3D; i$.<br>2.按边权从小到大枚举。<br>3.如果$(u, v, w)$中$u$和$v$不连通，就合并$u$,$v$所在的集合，$ans$累加上$w$.<br>4.否则直接跳过<br>5.如果已经加上了$n - 1$条边，那么就退出，得到答案。</p>
<p><strong>时间复杂度</strong>为 $O(m log m)$.</p>
<hr>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="建立结构体存边"><a href="#建立结构体存边" class="headerlink" title="建立结构体存边"></a>建立结构体存边</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> u, v, w; <span class="comment">// u -&gt; 起点  v -&gt; 终点 w -&gt; 边权</span></span><br><span class="line">&#125; dis[MAXM];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;<span class="comment">//自定义排序 贪心 保证边权较小的排在前面</span></span><br><span class="line">	<span class="keyword">return</span> x.w &lt; y.w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="并查集维护"><a href="#并查集维护" class="headerlink" title="并查集维护"></a>并查集维护</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;<span class="comment">//查询父节点</span></span><br><span class="line">	<span class="keyword">if</span>(fa[v] == v) <span class="keyword">return</span> v;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);<span class="comment">//路径压缩</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> u)</span> </span>&#123;<span class="comment">//查询是否在一个连通分量之中 + 合并</span></span><br><span class="line">	<span class="type">int</span> x = <span class="built_in">FindSet</span>(v);</span><br><span class="line">	<span class="type">int</span> y = <span class="built_in">FindSet</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	fa[x] = fa[y];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">105</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MANM = MAXN * MAXN;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, ans;</span><br><span class="line"><span class="type">int</span> fa[MAXN];</span><br><span class="line"><span class="comment">//存边与排序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> u, v, w;</span><br><span class="line">&#125; dis[MAXM];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span>  x.w &lt; y.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//并查集维护</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(fa[v] == v) <span class="keyword">return</span> v;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="built_in">FindSet</span>(v);</span><br><span class="line">	<span class="type">int</span> y = <span class="built_in">FindSet</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	fa[y] = fa[x];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;dis[i].u, &amp;dis[i].v, &amp;dis[i].w);<span class="comment">//输入每一条边的值</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(dis + <span class="number">1</span>, dis + <span class="number">1</span> + m, cmp) ;<span class="comment">//按w从小到大排序</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;<span class="comment">//并查集初始化</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;<span class="comment">//枚举每一条边</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">UnionSet</span>(dis[i].u, dis[i].v)) &#123;<span class="comment">//查询是否在一个连通分量之中</span></span><br><span class="line">			ans += dis[i].w;<span class="comment">//加入边权</span></span><br><span class="line">			tot ++;<span class="comment">//记录已经加入的边数</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tot == n - <span class="number">1</span>) <span class="keyword">break</span>; <span class="comment">//如果边数已满，就积时退出</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」SCOI 滑雪与时间胶囊</title>
    <url>/2020/08/15/2020-08-15-SCOI%20%E6%BB%91%E9%9B%AA%E4%B8%8E%E6%97%B6%E9%97%B4%E8%83%B6%E5%9B%8A%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="SCOI-滑雪与时间胶囊"><a href="#SCOI-滑雪与时间胶囊" class="headerlink" title="SCOI 滑雪与时间胶囊"></a>SCOI 滑雪与时间胶囊</h1><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>a180285 非常喜欢滑雪。<br>他来到一座雪山，这里分布着$M$条供滑行的轨道和$N$个轨道之间的交点（同时也是景点），而且每个景点都有一编号$i(1&lt;&#x3D;i&lt;&#x3D;n)$和一高度$$。a180285 能从景点$i$滑到景点$j$当且仅当存在一条$i$和$j$之间的边，且$i$的高度不小于$j$。<span id="more"></span><br>与其他滑雪爱好者不同， a180285 喜欢用最短的滑行路径去访问尽量多的景点。如果仅仅访问一条路径上的景点，他会觉得数量太少。于是 a180285 拿出了他随身携带的时间胶囊。这是一种很神奇的药物，吃下之后可以立即回到上个经过的景点（不用移动也不被认为是 a180285 滑行的距离）。请注意，这种神奇的药物是可以连续食用的，即能够回到较长时间之前到过的景点（比如上上个经过的景点和上上上个经过的景点）。<br>现在， a180285 站在$1$号景点望着山下的目标，心潮澎湃。他十分想知道在不考虑时间胶囊消耗的情况下，以最短滑行距离滑到尽量多的景点的方案（即满足经过景点数最大的前提下使得滑行总距离最小）。你能帮他求出最短距离和景点数吗？</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行是两个整数$N$,$M$。<br>接下来$1$行有$N$个整数$H_i$，分别表示每个景点的高度。<br>接下来$M$行，表示各个景点之间轨道分布的情况。每行$3$个整数,$U_i$,$V_i$,$K_i$。表示编号为$U_i$的景点和编号为$V_i$的景点之间有一条长度为$K_i$的轨道。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，表示 a180285 最多能到达多少个景点，以及此时最短的滑行距离总和。</p>
<h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><h6 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h6><p>3 3<br>3 2 1<br>1 2 1<br>2 3 1<br>1 3 10</p>
<h6 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h6><p>3 2</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用$Kruskal$或$Prim$肯定是过不了的,因为题目中有限制.<br>首先在输入时处理起点与终点,从高向低去存边,再用$DFS$从点$1$开始跑一遍,用$vis$存一下哪些边可以到达,最后用$node$存可以使用的边.<br>写一个$cmp$,以$u$的高度为第一关键字,用$w$为第二关键字.<br>最后跑一遍$Kruskal$或者$Prim$就可以求解.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5</span> * <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, h[MAXN], maxl, tot, cnt, fa[MAXN];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">&#125; dis[MAXM];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h[x.v] != h[y.v])</span><br><span class="line">        <span class="keyword">return</span> h[x.v] &gt; h[y.v];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x.w &lt; y.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> v, w;</span><br><span class="line">    <span class="built_in">edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> V, <span class="type">int</span> W) &#123;</span><br><span class="line">        v = V;</span><br><span class="line">        w = W;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;edge&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123; G[u].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v, w)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[v] == v)</span><br><span class="line">        <span class="keyword">return</span> fa[v];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">FindSet</span>(u);</span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">FindSet</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        fa[x] = fa[y];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(dis + <span class="number">1</span>, dis + <span class="number">1</span> + cnt, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">UnionSet</span>(dis[i].u, dis[i].v)) &#123;</span><br><span class="line">            ans += dis[i].w;</span><br><span class="line">            tot++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tot == maxl - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    maxl++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[x].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = G[x][i].v;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">intn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (vis[i] == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (vis[G[i][j].v] == <span class="number">1</span>) &#123;</span><br><span class="line">					cnt ++;</span><br><span class="line">					dis[cnt].u = i;</span><br><span class="line">					dis[cnt].v = G[i][j].v;</span><br><span class="line">					dis[cnt].w = G[i][j].w;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ui, vi, wi; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;ui, &amp;vi, &amp;wi);</span><br><span class="line">        <span class="keyword">if</span> (h[ui] &gt;= h[vi]) &#123;</span><br><span class="line">            <span class="built_in">AddEdge</span>(ui, vi, wi);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h[ui] &lt;= h[vi]) &#123;</span><br><span class="line">            <span class="built_in">AddEdge</span>(vi, ui, wi);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, maxl);</span><br><span class="line">    <span class="built_in">intn</span>();</span><br><span class="line">    <span class="built_in">Kruskal</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」构造完全图</title>
    <url>/2020/08/17/2020-08-17-%E6%9E%84%E9%80%A0%E5%AE%8C%E5%85%A8%E5%9B%BE%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://loj.ac/problem/10067">题目链接</a></h3><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>假设有如下图两个集合 $x$ &amp; $y$。因为要构造一个完全图，所以应该将$x$中的$s[x]$个节点与$y$中的$s[y]$个节点一一连接即连接$s[x] * s[y] - 1$（此处减一是为了在后面单独处理原图中的$dis[i].w$）个节点，为了保证此完全图的最小生成树所以要用$(s[x] * s[y] - 1) * (dis[i].w + 1)$，最后加上原图中的$dis[i].w$。 <span id="more"></span><br><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMjEyNjk0My8yMDIwMDgvMjEyNjk0My0yMDIwMDgxNjE5NDEwOTU0NS00OTE1NDYxMTUucG5n?x-oss-process=image/format,png"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, fa[MAXN], s[MAXN];</span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> u, v, w;</span><br><span class="line">&#125; dis[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span> <span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.w &lt; y.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (fa[v] == v) &#123;</span><br><span class="line">		<span class="keyword">return</span> v;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="built_in">FindSet</span>(v);</span><br><span class="line">	<span class="type">int</span> y = <span class="built_in">FindSet</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		fa[x] = fa[y];</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">sort</span> (dis + <span class="number">1</span>, dis + n, cmp);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		s[i] = <span class="number">1</span>;</span><br><span class="line">		fa[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x = <span class="built_in">FindSet</span>(dis[i].u);</span><br><span class="line">		<span class="type">int</span> y = <span class="built_in">FindSet</span>(dis[i].v);</span><br><span class="line">		<span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</span><br><span class="line">		ans += (<span class="type">long</span> <span class="type">long</span>)(dis[i].w + <span class="number">1</span>) * (s[x] * s[y] - <span class="number">1</span>) + dis[i].w;</span><br><span class="line">		fa[x] = y;</span><br><span class="line">		s[y] += s[x];</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d %d&quot;</span>, &amp;dis[i].u, &amp;dis[i].v, &amp;dis[i].w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Kruskal</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」数星星 Stars</title>
    <url>/2020/08/17/2020-08-17-%E6%95%B0%E6%98%9F%E6%98%9F%20Stars%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p> <a href="https://loj.ac/problem/10114">题目链接</a></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一道<strong>树状数组</strong>，但坑点比较多。。。<span id="more"></span><br>首先在草稿纸上画图可以得知：星星的等级与$x$无关，至于$y$的大小有关，于是我们可以根据输入顺序一一将其插入树状数组进行维护，此星星的等级其实就是在插入前以$1$~星星的$y$的星星数量和。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>星星的坐标是从$(0, 0)$开始存，但树状数组不能够维护，所以要提前将所有星星的$x$加上一。(如果在求和函数中把限度跳到0就会卡死循环<del>我就错了</del>)</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x[MAXN], n, m, star[MAXN], t[MAXN];</span><br><span class="line"><span class="type">int</span> bit[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt;= MAXN; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">		bit[i] += x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = k; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">		ans += bit[i];</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	freopen(&quot;star.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//	freopen(&quot;star.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, y; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;x[i], &amp;y);</span><br><span class="line">		++x[i];</span><br><span class="line">		m = <span class="built_in">max</span>(m, x[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		star[<span class="built_in">Sum</span>(x[i])] ++;</span><br><span class="line">		<span class="built_in">update</span>(x[i], <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, star[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」秘密的牛奶运输</title>
    <url>/2020/08/07/2020-08-17-%E7%A7%98%E5%AF%86%E7%9A%84%E7%89%9B%E5%A5%B6%E8%BF%90%E8%BE%93%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://loj.ac/problem/10068">题目连接</a></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一道可以暴力水过去的<strong>次小生成树</strong><span id="more"></span></p>
<ul>
<li><h5 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h5>首先用$Kruskal$||$Prim$求出原图的一颗最小生成树，在连边的时候，用一个$vis$记录一下那些已经在最小生成树里面。</li>
<li><h5 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h5>提前暴力$dfs$或者$bfs$求出任意两点构成的环之间的最大权值<h6 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h6>定义函数$dfs(int s, int u, int father, int mw1, int mw2)$<br>s -&gt; 起点  u -&gt; 终点 father 判断是否回到原起点 mw1 最大值 mw2 次大值<br>再用md1[s][u]保存从s -&gt; u的最大边权值， 用md2[s][u]保存从s -&gt; u的次大边权值<br>循环遍历与重点u相连接的每一个点（v)，如果没有回到father就继续。<br>定义t1, t2<br>如果 从u -&gt; v的 权值(w) 大于了现在的mw1<br>- 把t1 更新为 w<br>- 把t2 更新为 mw1</li>
</ul>
<p><strong>否则</strong> 如果 w 大于了现在的mw2 并且小于 mw1<br>      - 把t1 更新为 mw1<br>      - 把t2 更新为 w<br>最后递归遍历 dfs(s, v, u, t1, t2)</p>
<ul>
<li><h5 id="step2-1"><a href="#step2-1" class="headerlink" title="step2"></a>step2</h5>再一次考虑每一条<strong>非树边</strong>，用这条边上的权值考虑替换原边<h4 id="END"><a href="#END" class="headerlink" title="END"></a>END</h4></li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">505</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, m, tot, fa[MAXN], md1[MAXN][MAXN], md2[MAXN][MAXN];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans, sum;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> u, v, w;</span><br><span class="line">    <span class="type">bool</span> vis;</span><br><span class="line">&#125; dis[MAXM];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.w &lt; y.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> v, w;</span><br><span class="line">    <span class="built_in">edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> V, <span class="type">int</span> W) &#123;</span><br><span class="line">        v = V;</span><br><span class="line">        w = W;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;edge&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">long</span> <span class="type">long</span> w)</span> </span>&#123; G[u].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v, w)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[v] == v)</span><br><span class="line">        <span class="keyword">return</span> fa[v];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">FindSet</span>(u);</span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">FindSet</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        fa[x] = fa[y];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> mw1, <span class="type">int</span> mw2)</span> </span>&#123;</span><br><span class="line">	md1[s][u] = mw1;</span><br><span class="line">	md2[s][u] = mw2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][j].v;</span><br><span class="line">		<span class="type">int</span> w = G[u][j].w;</span><br><span class="line">		<span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			<span class="type">int</span> t1, t2;</span><br><span class="line">			<span class="keyword">if</span> (w &gt; mw1) &#123;</span><br><span class="line">				t1 = w;</span><br><span class="line">				t2 = mw1;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (w &lt; mw1 &amp;&amp; w &gt; mw2) &#123;</span><br><span class="line">				t1 = mw1;</span><br><span class="line">				t2 = w;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">dfs</span> (s, v, u, t1, t2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(dis + <span class="number">1</span>, dis + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">UnionSet</span>(dis[i].u, dis[i].v)) &#123;</span><br><span class="line">            sum += dis[i].w;</span><br><span class="line">            tot++;</span><br><span class="line">            dis[i].vis = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">AddEdge</span>(dis[i].u, dis[i].v, dis[i].w);</span><br><span class="line">            <span class="built_in">AddEdge</span>(dis[i].v, dis[i].u, dis[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tot == n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    	<span class="built_in">dfs</span> (i, i, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">1e19</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">	<span class="keyword">if</span> (dis[i].vis == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="type">int</span> w = dis[i].w, u = dis[i].u, v = dis[i].v;</span><br><span class="line">		<span class="keyword">if</span> (w &gt; md1[u][v]) ans = <span class="built_in">min</span>(ans, sum + w - md1[u][v]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (w &gt; md2[u][v]) ans = <span class="built_in">min</span>(ans, sum + w - md2[u][v]);</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;dis[i].u, &amp;dis[i].v, &amp;dis[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Kruskal</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」叶子清除计划【第五周】</title>
    <url>/2020/08/19/2020-08-19-%E5%8F%B6%E5%AD%90%E6%B8%85%E9%99%A4%E8%AE%A1%E5%88%92%E3%80%90%E7%AC%AC%E4%BA%94%E5%91%A8%E3%80%91%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="叶子清除计划【第五周】"><a href="#叶子清除计划【第五周】" class="headerlink" title="叶子清除计划【第五周】"></a>叶子清除计划【第五周】</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>⼩Y同学是⼀位数据结构⼤师同时也是⼀位园艺⼤师。</p>
<p>秋天到了，⼩Y同学需要对学校内的⼀棵树展现他顶尖的修叶⽔平。</p>
<p>学校内的这棵树是⼀颗拥有n个点的⽆根树，每次⼩Y会删去所有的叶⼦节点（即度数小于等于1的节点)，直到所有的点都被删除了为⽌。</p>
<p>⼩Y现在想问你对于每个点，求出它是第⼏次操作中被删除的。<span id="more"></span></p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第⼀⾏⼀个数字n，表⽰树上节点个数</p>
<p>接下来n−1⾏，每⾏两个数字u,v，表⽰树上的⼀条边。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>⼀⾏n个数字，第i个数字表⽰节点i在第⼏次操作中被删除。</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1:"></a>样例输入1:</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h4 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1:"></a>样例输出1:</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="样例输入2"><a href="#样例输入2" class="headerlink" title="样例输入2:"></a>样例输入2:</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h4 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2:"></a>样例输出2:</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h3><p>对于30%的数据，n≤1000</p>
<p>对于100%的数据，2≤n≤100000,1≤u,v≤n</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先看到题目，所给树是一棵<strong>无根树</strong>,一棵没有特定的根节点的树，称为无根树。<br>所以任意选取图中某个点为根，均可将无根树转化成为有根树，即在输入时要双向加边。<br>因为每次是要将叶子节点删去，那么当入度为1时（假设此边所连点为根节点，此节点就是叶子节点），就应该删掉。<br>题目要求删除的顺序，所以就定义一个结构体，保存<strong>入度</strong>和<strong>删除的次序</strong>，通过以上推论可得删掉的节点的次序就应该是<strong>它倒数第二条边所连接的节点的次序加一</strong>。<br>用拓扑序变形就可解决。<br>分析至此，不难写出代码.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> in, flo;</span><br><span class="line">&#125; a[MAXN];</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i].in == <span class="number">1</span>) &#123;</span><br><span class="line">			q.<span class="built_in">push</span>(i);</span><br><span class="line">			a[i].flo = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//		printf (&quot;%d: &quot;, u);</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="type">int</span> v = G[u][i];</span><br><span class="line">			a[v].in --;</span><br><span class="line">			<span class="keyword">if</span> (a[v].in == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//				printf (&quot;%d &quot;, v);</span></span><br><span class="line">				a[v].flo = a[u].flo + <span class="number">1</span>;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		printf (&quot;\n&quot;);</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">		G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">		a[u].in ++, a[v].in ++;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line"><span class="comment">//		printf (&quot;%d %d\n&quot;, a[i].flo, a[i].in);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	<span class="built_in">topsort</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>, a[i].flo);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」Ant Trip</title>
    <url>/2020/08/20/2020-08-20-Ant%20Trip%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="Ant-Trip"><a href="#Ant-Trip" class="headerlink" title="Ant Trip"></a><a href="https://loj.ac/problem/10108">Ant Trip</a></h2><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题意很简单，爆搜的时间复杂度比较高，不考虑。<br>应该使用欧拉回路的相关知识求解。<span id="more"></span></p>
<h3 id="intn"><a href="#intn" class="headerlink" title="intn()"></a>intn()</h3><p>输入时将两个节点的入度都加一（无向），然后将两个节点合并在一个<strong>连通图</strong>中.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">      in[v] ++, in[u] ++;</span><br><span class="line">      <span class="built_in">UnionSet</span>(u, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color = white>TFW居然都不知道要将两个节点合并在一个<strong>连通图</strong>中</font></p>
<h3 id="work"><a href="#work" class="headerlink" title="work()"></a>work()</h3><h4 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h4><p>从1~n循环，依次枚举，记录每个连通图中的点数。<br>用一个ans[]数组保存连通图中度为<strong>奇数</strong>的节点。</p>
<h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><p>再枚举一遍<br>如果一个连通图中的节点数不大于1，就不用画，跳过。<br>如果ans[]为0，这次图是一个欧拉回路，就sum++<br>如果ans[]不为零 sum +&#x3D; ans[]&#x2F;2   <font color = white>TFW只顾抄代码，连ans[]&#x2F;2都不知道啥意思</font><br>因为一笔只能够画掉两个<strong>奇数</strong>度数的节点<font color = white> （因为TFW不停问，特此强调) ,</font>所以只加上ans[]&#x2F;2</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, sum;</span><br><span class="line"><span class="type">int</span> in[MAXN], num[MAXN], ans[MAXN], fa[MAXN];</span><br><span class="line"><span class="comment">/* num -&gt; 保存一个连通块里有几个节点*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (fa[v] == v) <span class="keyword">return</span> v;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="built_in">FindSet</span>(u);</span><br><span class="line">	<span class="type">int</span> y = <span class="built_in">FindSet</span>(v);</span><br><span class="line">	<span class="keyword">if</span> (x == y) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">else</span> fa[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			fa[i] = i;</span><br><span class="line">			ans[i] = <span class="number">0</span>;</span><br><span class="line">			num[i] = <span class="number">0</span>;</span><br><span class="line">			in[i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">			in[v] ++, in[u] ++;</span><br><span class="line">			<span class="built_in">UnionSet</span>(u, v);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			num[<span class="built_in">FindSet</span>(i)] ++;</span><br><span class="line">			<span class="keyword">if</span> (in[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">				ans[<span class="built_in">FindSet</span>(i)] ++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (num[i] &lt;= <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span> (ans[i] == <span class="number">0</span>) sum ++;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				sum += ans[i] / <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>欧拉回路</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」「一本通 3.1 练习 4」Tree</title>
    <url>/2020/08/19/2020-08-19-%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E7%BB%83%E4%B9%A0%204%E3%80%8DTree%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://loj.ac/problem/10069">题目地址</a></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>第一眼看到此题，感觉就是一道<del>水题</del>，直接加上前$need$小的白边就行了，再处理到$n-1$条黑边，但是，打完后突然发现有问题。。。 虽然加上了前$need$小的白边，但是会出现<strong>树不连通的现象</strong>，即无法构成<strong>生成树</strong>。<span id="more"></span></p>
<h4 id="正解思路"><a href="#正解思路" class="headerlink" title="正解思路"></a>正解思路</h4><p>二分一个增量$mid$(可正可负)。<br>跑一遍$Kruskal$，将所有的白边都加上$a$，记录构成生成树后所用到的白边，如果数量小于$need$就将右端点往左移，否则往右移。<br>最后的$ans$需要减去增量$need * mid$</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5</span> * <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, need, fa[MAXN], l, r, mid, ans, cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w, color;</span><br><span class="line">&#125; dis[MAXM];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.w == y.w)</span><br><span class="line">        <span class="keyword">return</span> x.color &lt; y.color;</span><br><span class="line">    <span class="keyword">return</span> x.w &lt; y.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[v] == v)</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">FindSet</span>(u);</span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">FindSet</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    fa[x] = fa[y];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>, white = <span class="number">0</span>;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[i].color == <span class="number">0</span>) &#123;</span><br><span class="line">            dis[i].w += mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(dis + <span class="number">1</span>, dis + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">UnionSet</span>(dis[i].u, dis[i].v)) &#123;</span><br><span class="line">            tot++;</span><br><span class="line">            cnt += dis[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[i].color == <span class="number">0</span>)</span><br><span class="line">                white++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tot == n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[i].color == <span class="number">0</span>) &#123;</span><br><span class="line">            dis[i].w -= mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (white &lt; need) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;need);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;dis[i].u, &amp;dis[i].v, &amp;dis[i].w, &amp;dis[i].color);</span><br><span class="line">    &#125;</span><br><span class="line">    l = <span class="number">-1e2</span> - <span class="number">5</span>, r = <span class="number">1e2</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            ans = cnt - need * mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」假日住宿</title>
    <url>/2020/10/04/2020-10-04-%E5%81%87%E6%97%A5%E4%BD%8F%E5%AE%BF%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="假日住宿"><a href="#假日住宿" class="headerlink" title="假日住宿"></a>假日住宿</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出一棵$N$节点的树，每个节点代表一个城市，每个城市有一个人，每个人离开自己的城市到另一个城市，每个城市只能有一个人，问这$N$个人移动距离和的最大值。</p>
<span id="more"></span>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数<br>$T(1&lt;&#x3D;t&lt;&#x3D;10)$，表示测试用例的数量。每个测试用例包含几行。 第一行包含一个整数$2&lt;&#x3D;N&lt;&#x3D;10^5$<br>，代表城市数。 然后接下来的行分别包含三个整数$X， Y， Z$<br>意味着在城市$X$和城市$Y$之间有一条高速公路，其长度为$Z$。 您可以假设所有城市都已连接并且高速公路是双向的。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出每个样例中，所有人员的最大总行程。</p>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><h5 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span> </span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> </span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h5 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">62</span></span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题其实和树的重心有异曲同工的地方，虽然并不是求出重心来进行相关的操作，但是它所用的统计边数的方法与其十分类似。<br>此题关键不是在于人在怎么走，即不需要考虑人的移动，而是如何把边的作用发挥到最大。<br>考虑边的情况：<br>    一条边连接了两个顶点，这两个顶点又可以拓展为两棵子树，如果想要最后的路程最长，那么就应该要更多的人去走这一条边，此时最多的人数就是左右两颗子树的点数中的较小者<em>2</em>w（左边的人走到右边，右边的人走到左边），点数就可以用与重心相同的方法计算。</p>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(LL fa, LL u)</span> </span>&#123;</span><br><span class="line">    s[u] = <span class="number">1</span>;<span class="comment">//边界出口 || 初始只有自己一个节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        LL v = G[u][i].v, w = G[u][i].w;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(u, v);</span><br><span class="line">        s[u] += s[v];<span class="comment">//累加点数</span></span><br><span class="line">        ans += w * <span class="number">2</span> * <span class="built_in">min</span>(s[v], n - s[v]);<span class="comment">//即左右两颗子树的点数中的较小者 * 2 * w</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>树</category>
      </categories>
      <tags>
        <tag>树的重心</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」RMQ算法</title>
    <url>/2020/08/24/2020-08-24-RMQ%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="RMQ"><a href="#RMQ" class="headerlink" title="RMQ"></a>RMQ</h2><p>RMQ 即范围最小值问题 $(Range$ $Minimum$ $Query)$<br>支持&#x3D;&#x3D;查询从$A_l, A_{l+1},A_{l+2}…，A_r$中的<strong>极值</strong>$(Max$ $or$ $Min)$&#x3D;&#x3D;<span id="more"></span></p>
<h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>设$dp_{i,j}$为左端点为$i$， 右端点为$2^j(1 &lt;&lt; j)$数组中的<strong>极值</strong>。</p>
<p>可以画出图像:(如下图)<br><img data-src="https://img-blog.csdnimg.cn/20200824212642482.png#pic_center" alt="在这里插入图片描述"></p>
<p>可以求出递推式：<br>&#x3D;&#x3D;$dp_{i, j} &#x3D; (min || max)(dp_{i, j-1}, dp_{i+2^{j-1}, j-1})$&#x3D;&#x3D;</p>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RMQ_intn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		dp[i][<span class="number">0</span>] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> t = <span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; t; j++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">			dp[i][j] = <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">RMQ_query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> k = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(dp[l][k], dp[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>RMQ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」初二普及组全真模拟赛</title>
    <url>/2020/09/12/2020-09-12-%E5%88%9D%E4%BA%8C%E6%99%AE%E5%8F%8A%E7%BB%84%E5%85%A8%E7%9C%9F%E6%A8%A1%E6%8B%9F%E8%B5%9B%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="数你太美【第一周】"><a href="#数你太美【第一周】" class="headerlink" title="数你太美【第一周】"></a>数你太美【第一周】</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>PB 获得了两个正整数数列 ${a_i}$ , ${b_i}$ ，长度分别为 n , m ，其中每个数都小于 10。 定义一个正整数是“美丽的正整数”，当且仅当:这个数的十进制表示中，至少有一个 数位上的数在数列 a_i 出现过，至少有一个数位上的数在数列 b_i 出现过。现在 PB 希 望求出最小的“美丽的正整数”。<span id="more"></span></p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行，两个正整数 n , m ;</p>
<p>第二行，n 个正整数，第 i 个为 a_i ;</p>
<p>第三行，m 个正整数，第 i 个为 b_i 。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一行，一个正整数表示最小的“美丽的正整数”。</p>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 1"></a>样例输入 1</h5><p>2 3<br>2 4<br>6 5 2</p>
<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 1"></a>样例输出 1</h4><p>2</p>
<h4 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释 1"></a>样例解释 1</h4><p>2 既在数列 a 中出现又在数列 b 中出现，且可知没有比 2 小的正整数是“美丽的正整 数”。</p>
<h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 2"></a>样例输入 2</h4><p>2 6<br>8 7<br>1 1 4 5 1 4</p>
<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 2"></a>样例输出 2</h4><p>17</p>
<h4 id="样例解释-2"><a href="#样例解释-2" class="headerlink" title="样例解释 2:"></a>样例解释 2:</h4><p>17 中有数位 1,7 。1 在数列 b 中出现， 7 在数列 a 中出现，且可以证明没有比 17 小 的正整数是“美丽的正整数”。</p>
<h4 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h4><p>对于 30% 的数据， $1&lt;&#x3D;n,m&lt;&#x3D;4;$<br>对于 100% 的数据， $1&lt;&#x3D;n,m&lt;&#x3D;9,1&lt;&#x3D;a_i,b_i&lt;&#x3D;9。$</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先已知所有的$a_i$和$b_i$都不会大于9，则可知道组合的“美丽的正整数”一定没有单独的“美丽的正整数”优。<br>不难想出方法，先排序，遍历两个数组，如果有相同元素，则直接输出并退出，否则就比较两个序列的最小值，将其组成两位数输出。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">105</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[MAXN], b[MAXN], ans;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + m);</span><br><span class="line">    ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j]) &#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, a[i]);</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%d\n&quot;</span>, <span class="built_in">min</span>(a[<span class="number">1</span>], b[<span class="number">1</span>]), <span class="built_in">max</span>(a[<span class="number">1</span>], b[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="逃亡【第一周】"><a href="#逃亡【第一周】" class="headerlink" title="逃亡【第一周】"></a>逃亡【第一周】</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>从前有个平面直角坐标系，坐标系里有座学校。这是一个矩形，左下角是 (0,0)，右上角是 (n,m)。有 k 个蒟蒻在校园中。第 i 个蒟蒻在 (xi,yi) 的位置。由于一些不可 抗因素，所有 xi 互不相同，所有 yi 互不相同。这时 PB 要来抓蒟蒻们做实验了!</p>
<p>蒟蒻们听到这个消息，也是四处逃亡，只要逃到校园的边界上就不会被 PB 抓到。 每个蒟蒻可以沿着任意路线逃亡。然而蒟蒻们反应迟钝，所以如果两个蒟蒻的逃亡路线 有交点，它们就有可能相撞，就会被 PB 抓住。所以任意两人的路线不能有交点。</p>
<p>现在蒟蒻们想知道，蒟蒻全部能成功逃亡的路线的长度之和的最小值。(虽然，这 对神通广大的 PB 根本不是一回事……)</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行三个整数 n, m, k，相邻两数用一个空格分开。</p>
<p>接下来 k 行，第 i 行两个正整数 xi 和 yi，用一个空格分开。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>一行一个数表示总距离的最小值，保留 3 位小数。</p>
<h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h5><p>5 5 1<br>1 2</p>
<h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><p>1.000</p>
<h4 id="数据范围与提示-1"><a href="#数据范围与提示-1" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h4><p>对于前 30% 的数据，0&lt;&#x3D;n,m&lt;&#x3D;6, 1&lt;&#x3D;k&lt;&#x3D;5。</p>
<p>对于前 100% 的数据，0&lt;&#x3D;n,m&lt;&#x3D;10^9, 1&lt;&#x3D;k&lt;&#x3D;5000, 1&lt;&#x3D;xi&lt;n, 1&lt;&#x3D;yi&lt;m</p>
<p>对于所有数据，xi 互不相同，yi 互不相同。</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>开始读题有点晕，准备想如何分配每个蒟蒻的逃跑路线，但画图后我发现 “任意两人的路线不能有交点。”是一句废话。<br>假设有一个点$(x, y)$，那么在不考虑其他点的情况下，它的最优逃跑路线就是它分别到四个边界的距离的最小值即$Min(x, y, n - x, n - y)$。并且此题也<strong>不需要考虑其他点</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, x, y;</span><br><span class="line"><span class="type">double</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">		x = <span class="built_in">min</span>(x, n - x);</span><br><span class="line">		y = <span class="built_in">min</span>(y, m - y);</span><br><span class="line">		ans += <span class="built_in">min</span>(x, y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%.3lf\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="数数字【第一周】"><a href="#数数字【第一周】" class="headerlink" title="数数字【第一周】"></a>数数字【第一周】</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>PB 带来了若干只蒟蒻。</p>
<p>众所周知，NTF 是数论学会的会长，于是 PB 准备用数字击败 NTF，以证明 PB 比 NTF 更强。</p>
<p>于是 PB 准备了一些卡片，并在每个蒟蒻头上都贴了一张卡牌。每个卡牌上都写了一个数字。</p>
<p>由于蒟蒻太弱了，甚至不会看镜子来了解自己头上的数字，但他们由于经常被大佬吊打，所以观察力敏锐，他们都知道别人头上的数字。</p>
<p>第 i 个蒟蒻会告诉你他看到了 ai 种数字(定义两个数字不同种当且仅当它们的值不同)</p>
<p>但是由于蒟蒻太弱了，可能会报错数据，NTF 需要核实是否有一种情况使所有蒟 蒻说的话都正确。(可能情况不唯一)</p>
<h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>多组测试，文件第一行一个整数 T，表示测试数据组数;</p>
<p>对于每组数据，第一行，一个整数 n，表示蒟蒻的数量;</p>
<p>第二行，n 个整数用空格隔开，表示数组 ai，意义同题面。</p>
<h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果至少有一种情况使所有蒟蒻的话都正确，输出”yes”，否则，输出”no”。</p>
<h4 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h4><h5 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h5><p>2<br>2<br>1 1<br>4<br>1 3 2 2</p>
<h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h5><p>yes<br>no</p>
<h4 id="数据范围与提示-2"><a href="#数据范围与提示-2" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h4><p>对于所有数据，T&lt;&#x3D;10</p>
<p>对于 20% 的数据，N≤8</p>
<p>对于所有数据，1≦N≤1000000, 0≦ai&lt;N</p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>一道思维题。<br>考试时先打了一个假暴力，<del>考完看提交记录有50pts</del>，然后开始想数学解法。<br>打假暴力时想到了一个优化：如果这个数列中最大值与最小值已经相差了2及以上，就不用管了。<br>因为每个蒟蒻看到的种数是$a_i$, 那么总种树无非就是$a_i +1$(自己头上的数字唯一)或者$a_i$(自己头上的数字不唯一，已经出现过)，当两个$a_i$相差2及以上是，是无论如何也无法匀平的。<br>继续按思路往下走，当最大值和最小值不同时，就只有两种情况，相差一或相等。</p>
<p>当最大值等于最小值的时候，分两种情况讨论，最大值等于$n-1$说明所有的蒟蒻的数字都是唯一的，符合条件。如果最大值的二倍小于$n$，也满足条件，因为每个每个蒟蒻都不唯一，所以至少有两个蒟蒻的数字一样，则他们可以互相看到，可以弥补上统计，正是如此，那么也可以得知此时每个数字都有两个重复的元素，所以最大值的二倍要小于$n$.</p>
<p>那么当他们相差一的时候，就说明有蒟蒻头上的数字唯一(因为蒟蒻无法看到自己头上的数字，所以会统计掉一个，但其他头上是重复数字的蒟蒻则会把他统计上，导致相差一)，用一个$sum$统计有多少个数字唯一的蒟蒻(即$a_i&#x3D;Min(a_1 … a_n)$)，可得$sum$应该大于$Min(a_1 … a_n)$，因为已经得到了最大值与最小值相同时的结论，我们可以在现在的数列中去掉数字唯一的蒟蒻，那么最大值应该小于等于$(n - sum) &#x2F; 2 + sum$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, t1, t2, sum;</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">		t1 = INF;</span><br><span class="line">		t2 = <span class="number">-1</span>;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">			t1 = <span class="built_in">min</span>(t1, a[i]);</span><br><span class="line">			t2 = <span class="built_in">max</span>(t2, a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (t2 - t1 &gt; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (t2 - t1 == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a[i] == t1) &#123;</span><br><span class="line">					sum ++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (sum &lt; t2 &amp;&amp; t2 &lt;= (n - sum) / <span class="number">2</span> + sum) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (t2 == t1) &#123;</span><br><span class="line">			<span class="keyword">if</span> (t2 == n - <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125; </span><br><span class="line">			<span class="keyword">if</span> (t2 * <span class="number">2</span> &lt;= n) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>考试</category>
      </categories>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」关于两次dfs-bfs求树的直径反证法思路</title>
    <url>/2020/10/04/2020-10-04-%E5%85%B3%E4%BA%8E%E4%B8%A4%E6%AC%A1dfs-bfs%E6%B1%82%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E5%8F%8D%E8%AF%81%E6%B3%95%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p>刚刚听了jmy讲他的证明方法，大致意思就是树上的任意一点所能到达的最远距离一定会在直径的两个端点上。<br>但我认为反证法其实来得更快。思路如下：</p>
<p>证明：<br>      反证法。假设已经用两次bfs&#x2F;dfs求得的直径为$AB$,且$AB$上有一点$N$。如果$AB$不是这颗树的直径，那么一定存在一条链$CD$，使得$CD &gt; AB$，不妨设$CD$与$AB$的交点为$M$，所以$NB &gt; NC$即可以得到$MB &gt; MC$，可以得到$MB + MD &gt; MC + MD$所以$CD$不是树的直径，与假设矛盾。故假设不成立，原命题成立。<br>   证毕。<br><img data-src="https://img2020.cnblogs.com/blog/2126943/202010/2126943-20201004170817683-2068192468.png"></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」[NOIP2009]最优贸易</title>
    <url>/2020/10/07/2020-10-07-%E3%80%90NOIP2009%E3%80%91%E6%9C%80%E4%BC%98%E8%B4%B8%E6%98%93%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<span id="more"></span>

<p>今天考了一道分层图，本来是一道板题，结果我被误导了，想成了 架设电话线一题，考完写炸了才发现，架设电话线只需要&#x3D;&#x3D;求出第k+1大的长度，只需要满足局部最优&#x3D;&#x3D;，但是飞行线路要&#x3D;&#x3D;使总和最小&#x3D;&#x3D;，只能用分层图，然后我翻了半天标签，找到了这道题。</p>
<h3 id="link"><a href="#link" class="headerlink" title="link"></a><a href="http://222.180.160.110:1024/problem/8465"><font color = black>link<font></a></h3><p>但是当旁边LH看到之后，他告诉我，这是一道DP。</p>
<p>结果我没看出来。。。</p>
<p>分层图倒是很简单。</p>
<h3 id="Sulotion"><a href="#Sulotion" class="headerlink" title="Sulotion"></a>Sulotion</h3><p><strong>step1</strong><br>首先，他可以在图上到处走动，所以很自然地可以建一张图，所有的边权都是0。<br>然后这道题只与水晶球的价格有关，所以我们把点权搬到边权上面。<br><strong>step2</strong><br>因为他只进行一次买卖，所以有下面两种情况：<br>假设从$u$到$v$，水晶球在$u$的价格为$w$.<br>1.买. 建第二层图，连接第一层图 -&gt; 在$u$和$v$之间建一条边边权为$-w$。<br>2.卖. 建第三层图，连接第二层图 -&gt; 在$u$和$v$之间建一条边边权为$w$。<br><strong>step3</strong><br>我们在最后有两种方法走向终点：<br><strong>不买卖直接走向终点</strong><br>直接在第一层图的n号节点建立边权为0的有向边接入一个“大终点”<br><strong>买卖一次后走向终点</strong><br>在第三层图的n号节点建立边权为0的有向边接入“大终点”</p>
<p>至此，这道题就只需要求一个最长路即可。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span> * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="type">int</span> dis[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &gt; <span class="string">&#x27;9&#x27;</span> || c &lt; <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (c &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; c &gt;= <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">		x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> v, w;</span><br><span class="line">	<span class="built_in">edge</span>()&#123;&#125;</span><br><span class="line">	<span class="built_in">edge</span>(<span class="type">int</span> V, <span class="type">int</span> W) &#123;</span><br><span class="line">		v = V;</span><br><span class="line">		w = W;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	G[u + n * <span class="number">0</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	G[u + n * <span class="number">1</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">	G[u + n * <span class="number">2</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">	G[u + n * <span class="number">0</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">1</span>, -w));</span><br><span class="line">	G[u + n * <span class="number">1</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">2</span>, w));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0xcf</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">	dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		vis[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="type">int</span> v = G[u][i].v, w = G[u][i].w;</span><br><span class="line">			<span class="keyword">if</span> (dis[v] &lt; dis[u] + w) &#123;</span><br><span class="line">				dis[v] = dis[u] + w;</span><br><span class="line">				<span class="keyword">if</span> (vis[v] == <span class="number">0</span>) &#123;</span><br><span class="line">					vis[v] = <span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(n);</span><br><span class="line">	<span class="built_in">read</span>(m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">read</span>(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v, opt; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(opt);</span><br><span class="line">		<span class="built_in">AddEdge</span>(u, v, a[u]);</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">AddEdge</span>(v, u, a[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	G[n].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(n * <span class="number">3</span> + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">	G[n * <span class="number">3</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(n * <span class="number">3</span> + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">	n *= <span class="number">3</span>;</span><br><span class="line">	n++;</span><br><span class="line">	<span class="built_in">Spfa</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」简单数论</title>
    <url>/2020/10/17/2020-10-17-%E7%AE%80%E5%8D%95%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<h3 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>设$a,b \in \mathbb{Z}$,且$b \neq 0$.如果存在$q\in\mathbb{Z}$，使得$a&#x3D;bq$,则$b$整除a，记作$b\mid a$，此时$b$为$a$的<strong>因数</strong>，$a$叫做$b$的<strong>倍数</strong>.</p>
<hr>
<h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><p>$如果a \mid b 且 b\mid c$,那么$c\mid a$<br>证明 ： $设an&#x3D;b, bm&#x3D;c (n, m \in \mathbb{Z}).$<br>$\therefore c&#x2F;a &#x3D; nm.$<br>$\therefore c\mid a.$</p>
<h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><p>$如果a\mid b且a\mid c，有a\mid (bx+cy)$<br>证明：<br>$设 as &#x3D; b, at &#x3D; c$<br>$s,t\in\mathbb{Z^+}$<br>$\therefore ast &#x3D; c$<br>$\therefore a\mid c$</p>
<h5 id="3"><a href="#3" class="headerlink" title="3"></a>3</h5><p>$如果c\mid a, c\mid b，那么对于任意m, n\in\mathbb{Z},有c\mid ma+mb$.<br>证明<br>$如果m\neq 0,则a\mid b \Leftrightarrow mb\mid ma$<br>$\because a\mid b$<br>$\therefore 不妨设an&#x3D;b$<br>$\therefore anm &#x3D; bm$<br>$\therefore n*am &#x3D; bm$<br>$\therefore mb\mid ma$</p>
<h5 id="4"><a href="#4" class="headerlink" title="4"></a>4</h5><p>$如果ax+by&#x3D;1，a\mid n, a\mid n. \Rightarrow ab\mid n$.<br>证明：<br>$设as&#x3D;n&#x3D;1, bt&#x3D;n, s,t\in\mathbb{Z}且s, t \neq 0$.<br>$\because ax+by&#x3D;1$.<br>$\therefore \frac{x}{b} + \frac{y}{a}$.<br>$\because ab\mid n$<br>$\therefore \frac{n}{ab}\in\mathbb{Z}$<br>$\therefore n \times \frac{1}{ab}$<br>$&#x3D;\frac{nx}{b}+\frac{ny}{a}$<br>$&#x3D;tx+sy$</p>
<h5 id="5"><a href="#5" class="headerlink" title="5"></a>5</h5><p>如果$b&#x3D;d\times q + c,q\in\mathbb{Z}$<br>$d\mid c \Leftrightarrow d\mid b$</p>
<hr>
<h3 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>对于整数$a,b (b \neq 0)$,求$a \div b$的余数.记作$a$ $mod$ $b$$(a%b)$.</p>
<hr>
<h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><h4 id="1-分配率"><a href="#1-分配率" class="headerlink" title="1.分配率"></a>1.分配率</h4><p>$(a+b)%c&#x3D;(a%c+b%c)%c$<br>$(a-b)%c&#x3D;(a%c-b%c)%c$<br>$(a\times b)%c&#x3D;(a%c\times b%c)%c$<br>$(a^b)%c&#x3D;(a%b)^b%c$<br>统一证明:<br>设$ka+m_a&#x3D;c, kb+m_b&#x3D;c$<br>带入整理可得:<br>$\Rightarrow(a+b)%c&#x3D;(m_a+m_b)%c$<br>$\Rightarrow(a-b)%c&#x3D;(m_a-m_b)%c$<br>$\Rightarrow(a<em>b)%c&#x3D;(m_a</em>m_b)%c$<br>而幂运算可与看做多个乘法运算</p>
<hr>
<h4 id="2-缩放性"><a href="#2-缩放性" class="headerlink" title="2.缩放性"></a>2.缩放性</h4><h5 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h5><p>$如果a%b&#x3D;c,d\neq 0$<br>$\Rightarrow (ab)%(bd)&#x3D;cd$<br>证明:<br>      设$a&#x3D;bs+c$<br>      $\Rightarrow ad&#x3D;(bs+c)d$<br>      $\Rightarrow ad&#x3D;sbd+cd$<br>      $\Rightarrow (ab)%(bd)&#x3D;cd$      </p>
<hr>
<h5 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h5><p>$如果a%b&#x3D;c,d\mid a, d\mid b$<br>$\Rightarrow(a&#x2F;d)%(b&#x2F;d)&#x3D;(c&#x2F;d).$<br>证明：<br>      设$bs+c&#x3D;a$.<br>      $\frac{b}{d}\times s + \frac{c}{d}&#x3D;\frac{a}{d}$    </p>
<hr>
<h5 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h5><p>$\frac{a}{b}%c&#x3D;\frac{a%(bc)}{b}$<br>证明：<br>      两边同时乘$b$，可以得到：<br>      $a%(bc)&#x3D;a%(bc)$</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」KMP</title>
    <url>/2020/11/23/2020-11-23-KMP/</url>
    <content><![CDATA[<p>KMP算法模板<span id="more"></span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[MAXN], b[MAXN];</span><br><span class="line"><span class="type">int</span> nxt[MAXN], f[MAXN], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KMP</span><span class="params">(<span class="type">char</span>* a, <span class="type">char</span>* b)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="built_in">strlen</span>(a + <span class="number">1</span>), m = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">	nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; a[i] != a[j + <span class="number">1</span>]) j = nxt[j];</span><br><span class="line">		<span class="keyword">if</span> (a[i] == a[j + <span class="number">1</span>]) j++;</span><br><span class="line">		nxt[i] = j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; (j == n || b[i] != a[j + <span class="number">1</span>])) j = nxt[j];</span><br><span class="line">		<span class="keyword">if</span> (b[i] == a[j + <span class="number">1</span>]) j++;</span><br><span class="line">		f[i] = j;</span><br><span class="line">		<span class="keyword">if</span> (f[i] == n) &#123;</span><br><span class="line">			ans++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」Matrix</title>
    <url>/2020/11/24/2020-11-24-Matrix/</url>
    <content><![CDATA[<p>矩阵模板，支持相乘与相加</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">	<span class="type">int</span> r, c;</span><br><span class="line">	LL m[MAXN][MAXN];</span><br><span class="line">	<span class="built_in">Matrix</span>()&#123;&#125;</span><br><span class="line">	<span class="built_in">Matrix</span>(<span class="type">int</span> r, <span class="type">int</span> c) : <span class="built_in">r</span>(r), <span class="built_in">c</span>(c)&#123;&#125;; </span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(m, <span class="number">0</span>, <span class="built_in">sizeof</span>(m));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= r; i++) m[i][i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Matrix <span class="keyword">operator</span> * (<span class="type">const</span> Matrix B) <span class="type">const</span> &#123;</span><br><span class="line">		<span class="function">Matrix <span class="title">C</span><span class="params">(r, B.c)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= C.r; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= C.c; j++) &#123;</span><br><span class="line">				C.m[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= c; k++) &#123;</span><br><span class="line">					C.m[i][j] += ((m[i][k] * B.m[k][j]) % mod) % mod;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> C;</span><br><span class="line">	&#125;</span><br><span class="line">	Matrix <span class="keyword">operator</span> ^ (<span class="type">const</span> <span class="type">int</span> p) <span class="type">const</span> &#123;</span><br><span class="line">		<span class="type">int</span> t = p;</span><br><span class="line">		<span class="function">Matrix <span class="title">res</span><span class="params">(r, r)</span>, <span class="title">tmp</span><span class="params">(r, r)</span></span>;</span><br><span class="line">		res.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= r; i++) res.m[i][i] = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">memcpy</span>(tmp.m, m, <span class="built_in">sizeof</span>(tmp.m));</span><br><span class="line">		<span class="keyword">while</span> (t) &#123;</span><br><span class="line">			<span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = res * tmp;</span><br><span class="line">			tmp = tmp * tmp;</span><br><span class="line">			t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」编码问题[NOIP1995普及+提高]</title>
    <url>/2020/12/01/2020-12-01-%E9%A2%98%E8%A7%A3%20%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E3%80%90NOIP1995%E6%99%AE%E5%8F%8A%20%E6%8F%90%E9%AB%98%E3%80%91/</url>
    <content><![CDATA[<p>为上个世纪的题写个题解吧。。。      <span id="more"></span><br><a href="http://222.180.160.110:1024/contest/1016/problem/4">题面</a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>因为本人开始做题习惯从1开始标号，所以在$T &#x3D; 2$的情况下的数字大小其实是离散化后的大小，要得到$a[i]$直接–就好了。</p>
<h3 id="T-x3D-1"><a href="#T-x3D-1" class="headerlink" title="$T &#x3D; 1$"></a>$T &#x3D; 1$</h3><p>当$T &#x3D; 1$时很好做，直接用树状数组求一个<strong>顺序对</strong>即可。<br>对于求<strong>顺序对</strong>其实可以直接反着打逆序对。<br>即是在循环$a[i]$时，先输出$query(a[i])$，再在$a[i]$的后面$update(a[i], 1)$就好了。</p>
<h3 id="T-x3D-2"><a href="#T-x3D-2" class="headerlink" title="$T &#x3D; 2$"></a>$T &#x3D; 2$</h3><p>这个就有点难想了。<br>已知这个数的大小应该是在他前面且比他小的数与在他后面比他小的数的和。可是树状数组只能维护前缀和。<br>那么现在就可以从后往前循环。<br>对于最后一位，它的大小肯定就是给出的$b[i] + 1$，那么倒数第二位数可以分类讨论：</p>
<ul>
<li>1 假如倒数第一位比倒数第二位大<br>则此值为$(b[i] + 1) + 1$</li>
<li>2 反之即为$b[i] + 1$<br>那么其实在维护树状数组时只需要查询$b[i] + 1$这个位置就行了。<br>为了在查询时方便，我们在得到上一个数的大小后，应$update(a[i], -1)$，将此点初始化时的增量减带即可。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, a[MAXN], b[MAXN];</span><br><span class="line"><span class="type">int</span> bit[MAXN], add;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">		bit[i] += k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">		res += bit[i];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;t, &amp;n);</span><br><span class="line">	<span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">			a[i] ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>, <span class="built_in">query</span>(a[i]));</span><br><span class="line">			<span class="built_in">update</span>(a[i], <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">			<span class="built_in">update</span>(i, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">			<span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">			<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">				<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">query</span>(mid) &lt;= b[i]) &#123;</span><br><span class="line">					l = mid + <span class="number">1</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> r = mid;</span><br><span class="line">			&#125;</span><br><span class="line">			a[i] = r;</span><br><span class="line">			<span class="built_in">update</span>(r, <span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>, --a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>逆序对</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>「Summary」CSP2020总结</title>
    <url>/2020/12/09/2020-12-09-CSP2020%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是我第一次参加比较大型的比赛，也是我自认为打得最糟糕的一场比赛了，或许是前期模拟赛几起又几落，导致对自己实力概况不太熟悉，一参考心态就紧张的缘故，打pj时智商完全不在线上。<br>还是应该静下来好好总结一下吧。</p>
<span id="more"></span>
<h3 id="PJ"><a href="#PJ" class="headerlink" title="PJ"></a>PJ</h3><h4 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h4><p>关于pj，我T1看错题，T2没想出来（直到看完，LYR提醒我才想起一个叫桶排的东西），然后没了信心做T3，T4，从考试开始一直慌到结束。分数难以接受，整个人郁闷到了极点。<br>考完之后反省，发现还是基础掌握薄弱，学了一些较为高级的算法后，把最根本的东西忘了，有一些知识点囫囵吞枣略过了。在考试的临场发挥上出了大问题，拿到题后整个人就麻了，心态没有调整好，没有提前做题的预判。</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><h5 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h5><p>题目看错了，以为必须2的幂连加。这本来就是一个简单的二进制拆分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> d[<span class="number">50</span>] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>, <span class="number">4096</span>, <span class="number">8192</span>, <span class="number">16384</span>, <span class="number">32768</span>, <span class="number">65536</span>, <span class="number">131072</span>, <span class="number">262144</span>, <span class="number">524288</span>, <span class="number">1048576</span>, <span class="number">2097152</span>, <span class="number">4194304</span>, <span class="number">8388608</span>, <span class="number">16777216</span>, <span class="number">33554432</span>, <span class="number">67108864</span>, <span class="number">134217728</span>, <span class="number">268435456</span>, <span class="number">536870912</span>, <span class="number">1073741824</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> tmp = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> (tmp &gt;= d[i]) &#123;</span><br><span class="line">			tmp -= d[i];</span><br><span class="line">			ans.<span class="built_in">push_back</span>(d[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tmp == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h5><p>考场上没看出来，忽略了分数的范围，搞忘了桶排。<br>扫一遍，来一个，桶排加一个，在从600往回找即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">605</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len, w, a, t[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;len, &amp;w);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">		t[a] ++;</span><br><span class="line">		<span class="type">int</span> p = <span class="built_in">max</span>(<span class="number">1</span>, (i * w / <span class="number">100</span>));</span><br><span class="line">		<span class="type">int</span> sum = <span class="number">0</span>, last = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">600</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			sum += t[i];</span><br><span class="line">			last = i;</span><br><span class="line">			<span class="keyword">if</span> (sum &gt;= p) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>, last);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h5 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h5><p>正在调。</p>
<h5 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h5><p>自认为此题比T3简单。<br>开始想成了spfa，打完发现死循环了，才知道这个图有环，于是又加了几个参数进去跑，还是不行。之后想出了正解，结果初始化值初始化了n*m内的dp（为了避免用memset），然而调了很久一直不对，耗得时间只剩40min还有两道题，被迫写了个暴力。<br>考完突然想起DP初始化要初始全局，因为当第一层有可能被第0层更新（其实特判一下也行。<br>思路比较好想。用dp[i][j][0]表示从上往下走到[i,j]的最大值，dp[i][j][1]表示从下往上走到[i,j]的最大值。从左至右的最大值在这两种状态中也可以更新。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[MAXN][MAXN];</span><br><span class="line">LL dp[MAXN][MAXN][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0xcf</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			dp[i][j][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j][<span class="number">0</span>] + a[i][j], <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>][<span class="number">1</span>] + a[i][j], dp[i][j - <span class="number">1</span>][<span class="number">0</span>] + a[i][j]));</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) </span><br><span class="line">			dp[i][j][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>][j][<span class="number">1</span>] + a[i][j], <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>][<span class="number">0</span>] + a[i][j], dp[i][j - <span class="number">1</span>][<span class="number">1</span>] + a[i][j]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, dp[n][m][<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TG"><a href="#TG" class="headerlink" title="TG"></a>TG</h3><h4 id="情况-1"><a href="#情况-1" class="headerlink" title="情况"></a>情况</h4><p>稍微比PJ好了吧。。。<br>汲取了PJ崩溃的经验，提前浏览了四道题目并且看好了相关限制（但是最后一题还是忘了拼盘），T2太过于自信，结果用了map直接被卡。</p>
<h5 id="T1，T3，T4"><a href="#T1，T3，T4" class="headerlink" title="T1，T3，T4"></a>T1，T3，T4</h5><p>都没打出来。<br>T1还在调，T3没思路，T4拼盘20pts。</p>
<h5 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h5><p>思路很简单，用一个$all$或上所有的$a[i]$,然后依次标记每一个$p$即可。<br><strong>注意</strong>$k&lt;&#x3D;64$，这种情况下加一个特判就够了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">1e8</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL n, m, c, k, tot, all;</span><br><span class="line"><span class="type">bool</span> vis[MAXK];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%llu %llu %llu %llu&quot;</span>, &amp;n, &amp;m, &amp;c, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		LL x;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%llu&quot;</span>, &amp;x);</span><br><span class="line">		all |= x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		LL q, p;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%llu %llu&quot;</span>, &amp;p, &amp;q);</span><br><span class="line">		<span class="keyword">if</span> (!((<span class="number">1ull</span>&lt;&lt;p) &amp; all)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (vis[p] == <span class="number">0</span>) &#123;</span><br><span class="line">				vis[p] = <span class="number">1</span>;</span><br><span class="line">				tot++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (k - tot == <span class="number">64</span> ) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;18446744073709551616\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;%llu\n&quot;</span>, (<span class="number">1ull</span>&lt;&lt;<span class="number">63</span>) - n + (<span class="number">1ull</span>&lt;&lt;<span class="number">63</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%llu\n&quot;</span>, (<span class="number">1ull</span>&lt;&lt;(k - tot)) - n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>pj打得很是郁闷，但这次打击也给我提示了很多：不能好高骛远，最重要的应该是理解每个基础算法的思想，踏实做好接下来的每一题。<br>还是回到起跑线吧。</p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>游记</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」图论100题 1~5题</title>
    <url>/2020/12/17/2020-12-17-%E5%9B%BE%E8%AE%BA100%E9%A2%98%201~5%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>咕咕咕了这么久，居然更新了。。。<br>因为本人太菜了，所以掺了点并查集的题凑合。<br>总之这个帖子又复活了。</p>
<span id="more"></span>
<h2 id="T1-「NOIP2015」信息传递"><a href="#T1-「NOIP2015」信息传递" class="headerlink" title="T1 「NOIP2015」信息传递"></a>T1 「NOIP2015」信息传递</h2><p><a href="http://222.180.160.110:1024/problem/2516">link</a><br>题意很清晰了，可以直接用$dfs$找一个最小环。<br>在dfs板子上稍加变动即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2</span> * <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, ans, t[MAXN], de[MAXN], num[MAXN], tot;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">	de[u] = d;</span><br><span class="line">	num[u] = tot;</span><br><span class="line">	<span class="keyword">if</span> (de[t[u]] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (num[t[u]] &lt; tot) <span class="keyword">return</span> ;</span><br><span class="line">		ans = <span class="built_in">min</span>(ans, d - de[t[u]] + <span class="number">1</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="built_in">dfs</span>(t[u], d + <span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ans = INF;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;t[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (de[i] == <span class="number">0</span>) &#123;</span><br><span class="line">			tot++;</span><br><span class="line">			<span class="built_in">dfs</span>(i, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="T2-「NOIP2009」最优贸易"><a href="#T2-「NOIP2009」最优贸易" class="headerlink" title="T2 「NOIP2009」最优贸易"></a>T2 「NOIP2009」最优贸易</h2><p><a href="http://222.180.160.110:1024/problem/6192">link</a>   </p>
<h3 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h3><p>首先，他可以在图上到处走动，所以很自然地可以建一张图，所有的边权都是0。<br>然后这道题只与水晶球的价格有关，所以我们把点权搬到边权上面。      </p>
<h3 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h3><p>因为他只进行一次买卖，所以有下面两种情况：<br>假设从$u$到$v$，水晶球在$u$的价格为$w$.<br>1.买. 建第二层图，连接第一层图 -&gt; 在$u$和$v$之间建一条边边权为$-w$。<br>2.卖. 建第三层图，连接第二层图 -&gt; 在$u$和$v$之间建一条边边权为$w$。   </p>
<h3 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h3><p>我们在最后有两种方法走向终点：   </p>
<h4 id="不买卖直接走向终点"><a href="#不买卖直接走向终点" class="headerlink" title="不买卖直接走向终点"></a>不买卖直接走向终点</h4><p>直接在第一层图的n号节点建立边权为0的有向边接入一个“大终点”   </p>
<h4 id="买卖一次后走向终点"><a href="#买卖一次后走向终点" class="headerlink" title="买卖一次后走向终点"></a>买卖一次后走向终点</h4><p>在第三层图的n号节点建立边权为0的有向边接入“大终点”   </p>
<p>至此，这道题就只需要求一个最长路即可。   </p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span> * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="type">int</span> dis[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &gt; <span class="string">&#x27;9&#x27;</span> || c &lt; <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (c &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; c &gt;= <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">		x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> v, w;</span><br><span class="line">	<span class="built_in">edge</span>()&#123;&#125;</span><br><span class="line">	<span class="built_in">edge</span>(<span class="type">int</span> V, <span class="type">int</span> W) &#123;</span><br><span class="line">		v = V;</span><br><span class="line">		w = W;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	G[u + n * <span class="number">0</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	G[u + n * <span class="number">1</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">	G[u + n * <span class="number">2</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">	G[u + n * <span class="number">0</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">1</span>, -w));</span><br><span class="line">	G[u + n * <span class="number">1</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v + n * <span class="number">2</span>, w));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0xcf</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">	dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		vis[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="type">int</span> v = G[u][i].v, w = G[u][i].w;</span><br><span class="line">			<span class="keyword">if</span> (dis[v] &lt; dis[u] + w) &#123;</span><br><span class="line">				dis[v] = dis[u] + w;</span><br><span class="line">				<span class="keyword">if</span> (vis[v] == <span class="number">0</span>) &#123;</span><br><span class="line">					vis[v] = <span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(n);</span><br><span class="line">	<span class="built_in">read</span>(m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">read</span>(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v, opt; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(opt);</span><br><span class="line">		<span class="built_in">AddEdge</span>(u, v, a[u]);</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">AddEdge</span>(v, u, a[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	G[n].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(n * <span class="number">3</span> + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">	G[n * <span class="number">3</span>].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(n * <span class="number">3</span> + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">	n *= <span class="number">3</span>;</span><br><span class="line">	n++;</span><br><span class="line">	<span class="built_in">Spfa</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="T3「Uva-10004」二染色"><a href="#T3「Uva-10004」二染色" class="headerlink" title="T3「Uva 10004」二染色"></a>T3「Uva 10004」二染色</h2><p>做了四色问题后调的一道题。<br>又是$dfs$，提前给0节点涂上-1，然后在每次处理时判断两个地方。<br>1.如果没访问，就去递归，每次都涂上相反的颜色。<br>2.如果访问过，并且涂上了现在相同的颜色，直接返回0。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">205</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, p[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> last)</span> </span>&#123;</span><br><span class="line">	p[u] = -last;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (p[v] != <span class="number">0</span> &amp;&amp; p[v] == p[u]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (p[v] == <span class="number">0</span> &amp;&amp; <span class="built_in">dfs</span>(v, p[u]) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n), n) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) G[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">			G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">			G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="built_in">sizeof</span>(p));</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>)) <span class="built_in">printf</span> (<span class="string">&quot;BICOLORABLE\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span> (<span class="string">&quot;NOT BICOLORABLE\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="T4巡逻"><a href="#T4巡逻" class="headerlink" title="T4巡逻"></a>T4巡逻</h2><p>这道题就有点意思了，但我的做法不是最优的。<br>如果想找到更好的解法，可以问问lifan。<br>在这里有两种情况：   </p>
<h3 id="1-k-x3D-1"><a href="#1-k-x3D-1" class="headerlink" title="1.k &#x3D; 1"></a>1.k &#x3D; 1</h3><p>比较显然，当在没有修路的时候，按照dfs的顺序(访问和回溯)应该将每条边访问两遍。<br>假设我们在$u$和$v$之间建一条边，那么在$u$到$v$的唯一路径上的所有道路都只用访问一边，即将$2\times(n - 1)$条边变成了$2 \times (n - 1)-Lenth_{(u,v)}$。<br>那么要是删掉的边最多，可以直接想到，求出直径，然后将它删掉。</p>
<h3 id="2-k-x3D-2"><a href="#2-k-x3D-2" class="headerlink" title="2.k &#x3D; 2"></a>2.k &#x3D; 2</h3><p>这种情况就有点难想了。<br>那么在求出最长边后(直径)，在求出次长边即可，可是当两条边重合时需要将重合的边加上，即警察会将每条边访问一次。<br>求两条边的重合部分写出来很麻烦，有没有更简单的方法呢?<br>可以回到式子上：<br>$2 \times (n - 1)-Lenth_1-Lenth_2+Lenth_3$，$Lenth_3$即为两边的重合边。<br>可以想到：<br>$2 \times (n - 1)-Lenth_1-Lenth_2+Lenth_3 &#x3D; 2 \times (n - 1)-Lenth_1-(Lenth_2-Lenth_3)$。<br>来到这一步其实已经很清晰了。<br>可以在求完直径时，把直径上的边全部取反成-1,那么再求次长边时就可以直接减去此长度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, l1, l2, far, k, d[MAXN], pre[MAXN], last, way[MAXN], cnt;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line">map&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">bool</span>&gt; add;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span>&amp; tmp, <span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; d[u]) &#123;</span><br><span class="line">        tmp = d[u];</span><br><span class="line">        last = u;</span><br><span class="line">        far = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = G[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">        pre[v] = u;</span><br><span class="line">        <span class="built_in">dfs</span>(tmp, v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dpdfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = G[u][i];</span><br><span class="line">        <span class="keyword">if</span> (vis[v] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">dpdfs</span>(v);</span><br><span class="line">            <span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (add[<span class="built_in">make_pair</span>(u, v)] == <span class="number">1</span> || add[<span class="built_in">make_pair</span>(v, u)] == <span class="number">1</span>)</span><br><span class="line">                w = <span class="number">-1</span>;</span><br><span class="line">            l2 = <span class="built_in">max</span>(l2, d[u] + d[v] + w);</span><br><span class="line">            d[u] = <span class="built_in">max</span>(d[u], d[v] + w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pre[p] == <span class="number">0</span>) &#123;</span><br><span class="line">        way[++cnt] = p;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(pre[p]);</span><br><span class="line">    way[++cnt] = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(l1, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    d[far] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="built_in">sizeof</span>(pre));</span><br><span class="line">    <span class="built_in">dfs</span>(l1, far, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (n - <span class="number">1</span>) * <span class="number">2</span> - (l1 - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(last);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">            add[<span class="built_in">make_pair</span>(way[i], way[i + <span class="number">1</span>])] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">        <span class="built_in">dpdfs</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (n - <span class="number">1</span>) * <span class="number">2</span> - (l1 - <span class="number">1</span>) - (l2 - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="T5-「CF9E」Interesting-Graph-and-Apples"><a href="#T5-「CF9E」Interesting-Graph-and-Apples" class="headerlink" title="T5 「CF9E」Interesting Graph and Apples"></a>T5 「CF9E」Interesting Graph and Apples</h2><p><a href="http://222.180.160.110:1024/problem/19517">link</a><br>这是OJ上为数不多的能看清题面的CF的题。<br>我还是简单翻译一下吧。<br>题意：在$n$个点$m$条边的图上添加最少的边，使其成为一个大环。<br><del>水入并查集</del>，再添加两条边的时候，可以将他们加入一个集合里。并更新度。<br>如果其中有点的入度$&gt;2$那么输出$NO$，因为在一个环中，每个节点的度至多为2，且此题不能删边，可以直接结束。<br>然后依次选择两个节点，如果它们的度都小于2，并且没有在一个集合中，就可以把它们加在一起，然后更新度数。<br>在加边完成之后，会出现总边只有$n-1$的情况，此时找到剩下两个度为1的点，把它们连在一起即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> deg[MAXN], fa[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MakeSet</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (fa[v] == v) <span class="keyword">return</span> v;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="built_in">FindSet</span>(u);</span><br><span class="line">	<span class="type">int</span> y = <span class="built_in">FindSet</span>(v);</span><br><span class="line">	<span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line">	fa[x] = fa[y];</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> u, v;</span><br><span class="line">	<span class="built_in">node</span>()&#123;&#125;</span><br><span class="line">	<span class="built_in">node</span>(<span class="type">int</span> U, <span class="type">int</span> V) &#123;</span><br><span class="line">		u = U;</span><br><span class="line">		v = V;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="built_in">MakeSet</span>(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		deg[u]++, deg[v]++;</span><br><span class="line">		<span class="built_in">UnionSet</span>(u, v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (deg[i] &gt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span> (<span class="built_in">FindSet</span>(i) != <span class="built_in">FindSet</span>(j) &amp;&amp; deg[i] &lt; <span class="number">2</span> &amp;&amp; deg[j] &lt; <span class="number">2</span>) &#123;</span><br><span class="line">			ans.<span class="built_in">push_back</span>(<span class="built_in">node</span>(i, j));</span><br><span class="line">			deg[i]++, deg[j]++;</span><br><span class="line">			<span class="built_in">UnionSet</span>(i, j); </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans.<span class="built_in">size</span>() + m == n - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="type">int</span> u = <span class="number">0</span>, v = <span class="number">0</span>; </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (deg[i] &lt; <span class="number">2</span>) &#123;</span><br><span class="line">				deg[i]++;</span><br><span class="line">				<span class="keyword">if</span> (u == <span class="number">0</span>) u = i;</span><br><span class="line">				<span class="keyword">else</span> v = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans.<span class="built_in">push_back</span>(<span class="built_in">node</span>(u, v));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">FindSet</span>(i) != <span class="built_in">FindSet</span>(<span class="number">1</span>)) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;YES\n%d\n&quot;</span>, ans.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		node now = ans[i];</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d %d\n&quot;</span>, now.u, now.v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>图论100</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」定价</title>
    <url>/2020/12/17/2020-12-17-%E5%AE%9A%E4%BB%B7%20%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a><a href="http://222.180.160.110:1024/contest/1024/problem/2">Link</a></h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实就是一道水题。<br>只要打出了<font color = #FFD700>T 20pts</font>的代码，那么你离<font color = green>AC</font>就相差无几了。<span id="more"></span><br>其实可以发现如果你在算了100之后并不需要去算101~999。<br>那么可以直接人口普查，跑一遍，每次在循环$i++$时改成$i+&#x3D;add$即可。<br>至于$add$就是一眼的事情了。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Add[<span class="number">15</span>] = &#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>, <span class="number">100000</span>, <span class="number">1000000</span>, <span class="number">10000000</span>, <span class="number">100000000</span>, <span class="number">1000000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, l, r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (num % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">		num /= <span class="number">10</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="type">int</span> power = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">		power *= <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span> (power &gt;= num) &#123;</span><br><span class="line">			len = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> last = num % <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">if</span> (last == <span class="number">5</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> len * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">return</span> len * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">		tot++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">		<span class="type">int</span> ans = <span class="number">50</span>;</span><br><span class="line">		<span class="type">int</span> num;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i += Add[<span class="built_in">add</span>(i)]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">change</span>(i) &lt; ans) &#123;</span><br><span class="line">				ans = <span class="built_in">change</span>(i);</span><br><span class="line">				num = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>暴力</category>
      </categories>
      <tags>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」数位DP</title>
    <url>/2020/12/19/2020-12-19-%E6%95%B0%E4%BD%8DDP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>占坑，先咕着</p>
<span id="more"></span>]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>数位DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」SegmentTree</title>
    <url>/2020/12/22/2020-12-22-SegmentTree/</url>
    <content><![CDATA[<p>线段树模板<span id="more"></span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> * <span class="number">4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">	<span class="type">int</span> l, r;</span><br><span class="line">	<span class="type">int</span> dat;</span><br><span class="line">&#125; s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	s[p].l = l, s[p].r = r;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		s[p].dat = a[l];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">build</span>(p * <span class="number">2</span>, l, mid); </span><br><span class="line">	<span class="built_in">build</span>(p * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	s[p].dat = <span class="built_in">max</span>(s[p * <span class="number">2</span>].dat, s[p * <span class="number">2</span> + <span class="number">1</span>].dat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l == s[p].r) &#123;</span><br><span class="line">		s[p].dat = val;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">		<span class="built_in">update</span>(p * <span class="number">2</span>, x, val);</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="built_in">update</span>(p * <span class="number">2</span> + <span class="number">1</span>, x, val);</span><br><span class="line">	s[p].dat = <span class="built_in">max</span>(s[p * <span class="number">2</span>].dat, s[p * <span class="number">2</span> + <span class="number">1</span>].dat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) &#123;</span><br><span class="line">		<span class="keyword">return</span> s[p].dat;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="type">int</span> val = (-(<span class="number">1</span> &lt;&lt; <span class="number">30</span>));</span><br><span class="line">	<span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">		val = <span class="built_in">max</span>(val, <span class="built_in">query</span>(p * <span class="number">2</span>, l, r));</span><br><span class="line">	<span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">		val = <span class="built_in">max</span>(val, <span class="built_in">query</span>(p * <span class="number">2</span> + <span class="number">1</span>, l, r));</span><br><span class="line">	<span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n); </span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		<span class="type">int</span> opt;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="type">int</span> x, val;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;val);</span><br><span class="line">			<span class="built_in">update</span>(<span class="number">1</span>, x, val);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> l, r;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, l, r));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」权值线段树</title>
    <url>/2021/01/01/2021-01-01-%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91%20Query%20the%20Kth%20Number/</url>
    <content><![CDATA[<p>权值线段树初步</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q, tot = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">	<span class="type">int</span> lc, rc;</span><br><span class="line">	<span class="type">int</span> cnt, del;</span><br><span class="line">&#125; s[MAXN * <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	s[p].cnt = s[s[p].lc].cnt + s[s[p].rc].cnt;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].del == <span class="number">1</span>) &#123;</span><br><span class="line">		s[p].del = <span class="number">0</span>;</span><br><span class="line">		s[s[p].lc].del = <span class="number">1</span>;</span><br><span class="line">		s[s[p].rc].del = <span class="number">1</span>;</span><br><span class="line">		s[s[p].lc].cnt = <span class="number">0</span>;</span><br><span class="line">		s[s[p].rc].cnt = <span class="number">0</span>;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		s[p].del = <span class="number">0</span>;</span><br><span class="line">		s[p].cnt++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (id &lt;= mid) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[p].lc == <span class="number">0</span>) s[p].lc = ++tot;</span><br><span class="line">		<span class="built_in">update</span>(s[p].lc, l, mid, id);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[p].rc == <span class="number">0</span>) s[p].rc = ++tot;</span><br><span class="line">		<span class="built_in">update</span>(s[p].rc, mid + <span class="number">1</span>, r, id);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].cnt == <span class="number">0</span> || s[p].del == <span class="number">1</span> || p == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (l &gt;= ql &amp;&amp; qr &gt;= r) &#123;</span><br><span class="line">		s[p].cnt = <span class="number">0</span>;</span><br><span class="line">		s[p].del = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (ql &lt;= mid) &#123;</span><br><span class="line">		<span class="built_in">clean</span>(s[p].lc, l, mid, ql, qr);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (qr &gt; mid) &#123;</span><br><span class="line">		<span class="built_in">clean</span>(s[p].rc, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].cnt == <span class="number">0</span> || s[p].del == <span class="number">1</span> || p == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (l &gt;= ql &amp;&amp; qr &gt;= r) &#123;</span><br><span class="line">		<span class="keyword">return</span> s[p].cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (ql &lt;= mid) &#123;</span><br><span class="line">		val += <span class="built_in">sum</span>(s[p].lc, l, mid, ql, qr);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (qr &gt; mid) &#123;</span><br><span class="line">		val += <span class="built_in">sum</span>(s[p].rc, mid + <span class="number">1</span>, r, ql, qr); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querykth</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].cnt == <span class="number">0</span> || s[p].del == <span class="number">1</span> || p == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[p].cnt &gt;= k) <span class="keyword">return</span> l;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (qr &gt; mid) &#123;</span><br><span class="line">		cnt = <span class="built_in">sum</span>(s[p].rc, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">		<span class="keyword">if</span> (cnt &gt;= k) <span class="keyword">return</span> <span class="built_in">querykth</span>(s[p].rc, mid + <span class="number">1</span>, r, ql, qr, k);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span> (ql &lt;= mid) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">querykth</span>(s[p].lc, l, mid, ql, qr, k - cnt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">	<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">		<span class="type">int</span> opt, x, l, r, k;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">			<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1e9</span>, x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">			<span class="built_in">clean</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1e9</span>, l, r);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">querykth</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1e9</span>, l, r, k));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>动态开点</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」AtCoder[abc183]Code</title>
    <url>/2021/01/12/2021-01-12-AtCoder%5Babc183%5DCode/</url>
    <content><![CDATA[<p>打了一下abc的题，<del>好简单</del>。<br>留档存个代码吧。        </p>
<span id="more"></span>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>有手就行。       </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, x);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>相似…       </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">db sx, sy, tx, ty;</span><br><span class="line">db t, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%lf %lf %lf %lf&quot;</span>, &amp;sx, &amp;sy, &amp;tx, &amp;ty);</span><br><span class="line">	t = (tx - sx) / (sy + ty) * sy;</span><br><span class="line">	ans = sx + t;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%.10lf\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>无脑爆搜即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> dis[MAXN][MAXN], ans;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> tot, <span class="type">int</span> sum)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (tot == n) &#123;</span><br><span class="line">		sum += dis[now][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (sum == k) &#123;</span><br><span class="line">			ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i == now || vis[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		vis[i] = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(i, tot + <span class="number">1</span>, sum + dis[now][i]);</span><br><span class="line">		vis[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;dis[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p>开始还把题看错了。<br>直接差分搞。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2</span> * <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, w, m;</span><br><span class="line">LL a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;w);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, s, t, q; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d %d&quot;</span>, &amp;s, &amp;t, &amp;q);</span><br><span class="line">		a[s] += q, a[t] -= q;</span><br><span class="line">		m = <span class="built_in">max</span>(m, t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (a[i] &gt; w) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>前缀和优化DP</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">LL dp[MAXN][MAXN], sum[MAXN][MAXN][<span class="number">5</span>];</span><br><span class="line"><span class="type">bool</span> vis[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="type">char</span> x;</span><br><span class="line">			cin &gt;&gt; x;</span><br><span class="line">			<span class="keyword">if</span> (x == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">				vis[i][j] = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (vis[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">				dp[i][j] = (sum[i - <span class="number">1</span>][j][<span class="number">1</span>] + sum[i][j - <span class="number">1</span>][<span class="number">2</span>] + sum[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">3</span>]) % mod; </span><br><span class="line">				<span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>) dp[i][j]++;</span><br><span class="line">				sum[i][j][<span class="number">1</span>] = (sum[i - <span class="number">1</span>][j][<span class="number">1</span>] + dp[i][j]) % mod;</span><br><span class="line">				sum[i][j][<span class="number">2</span>] = (sum[i][j - <span class="number">1</span>][<span class="number">2</span>] + dp[i][j]) % mod;</span><br><span class="line">				sum[i][j][<span class="number">3</span>] = (sum[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">3</span>] + dp[i][j]) % mod;</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, dp[n][m]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>改良版的并查集。<br>要用$map$离散化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2</span> * <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; tot;</span><br><span class="line">	<span class="type">int</span> f, id, c;</span><br><span class="line">&#125; fa[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (fa[v].f == fa[v].id) &#123;</span><br><span class="line">		<span class="keyword">return</span> fa[v].f;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">return</span> fa[v].f = <span class="built_in">FindSet</span>(fa[v].f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="built_in">FindSet</span>(u);</span><br><span class="line">	<span class="type">int</span> y = <span class="built_in">FindSet</span>(v);</span><br><span class="line">	<span class="keyword">if</span> (fa[x].f == fa[y].f) <span class="keyword">return</span>;</span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it = fa[x].tot.<span class="built_in">begin</span>(); it != fa[x].tot.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[y].tot.<span class="built_in">find</span>(it -&gt; first) == fa[y].tot.<span class="built_in">end</span>()) &#123;</span><br><span class="line">			fa[y].tot[it -&gt; first]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fa[x].f = fa[y].f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, fa[i].c);</span><br><span class="line">		fa[i].f = i, fa[i].id = i, fa[i].tot[fa[i].c]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">		<span class="type">int</span> opt, x, y;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d %d&quot;</span>, &amp;opt, &amp;x, &amp;y);</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">UnionSet</span>(x, y);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, fa[x].tot[y]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」单调队列</title>
    <url>/2021/02/01/2021-02-01-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Deque</span> &#123;</span><br><span class="line">	<span class="type">int</span> head, tail, n, m, q[MAXN], a[MAXN], p;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">Deque</span>()&#123;&#125;</span><br><span class="line">	<span class="built_in">Deque</span>(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> head, <span class="type">int</span> tail, <span class="type">int</span> p) : <span class="built_in">n</span>(n), <span class="built_in">m</span>(m), <span class="built_in">head</span>(head), <span class="built_in">tail</span>(tail), <span class="built_in">p</span>(p)&#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> res = a[q[head]];</span><br><span class="line">		<span class="keyword">while</span> (id - q[head] &gt;= m &amp;&amp; head &lt;= tail) head++;</span><br><span class="line">		<span class="keyword">while</span> (a[id] &lt;= a[q[tail]] &amp;&amp; head &lt;= tail) tail--;</span><br><span class="line">		q[++tail] = id;</span><br><span class="line">		<span class="keyword">return</span> res * p;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] *= p;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」友谊赛</title>
    <url>/2021/02/04/2021-02-04-%E5%8F%8B%E8%B0%8A%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>今天友谊赛题解，上届巨佬写的，搬上了方便查看。</p>
</blockquote>
<span id="more"></span>

<h1 id="A-Rainyrabbit-爱邮递"><a href="#A-Rainyrabbit-爱邮递" class="headerlink" title="A-Rainyrabbit 爱邮递"></a>A-Rainyrabbit 爱邮递</h1><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法 1"></a>算法 1</h3><p>每次重建快递站后直接深搜一遍累加贡献就好了，然后 $\mathcal{O}(1)$ 回答。</p>
<p>你可以获得 10pts 的好成绩。</p>
<h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法 2"></a>算法 2</h3><p>菊花图，这个很简单啊。</p>
<p>如果加的是花心，相当于其他城市都加 $1$，否则就是花心的城市加 $1$，其他城市加 $2$。</p>
<p>结合算法 1 可以获得 30pts 的好成绩。</p>
<h3 id="算法-3"><a href="#算法-3" class="headerlink" title="算法 3"></a>算法 3</h3><p>一条链的话也是送的，直接拆拆贡献用棵线段树维护即可。</p>
<p>结合算法 1,2 可以获得 60pts 的好成绩。</p>
<h3 id="算法-4"><a href="#算法-4" class="headerlink" title="算法 4"></a>算法 4</h3><p>做法 1</p>
<p>考虑树怎么做，很套路的可以将 $dis(x,y)$ 拆成 $dep_x+dep_y-2dep_{\operatorname{lca}(x,y)}$，但是拆了还是不好做，修改最坏还是 $\mathcal{O(n)}$ 的。</p>
<p>发现 $dep_{\operatorname{lca}(x,y)}$ 这个玩意可以借助 [LNOI2014]LCA 的思想，将树根 $1$ 到 $x$ 上的边都加上一次这条边的权值，然后节点 $y$ 往上爬，途中边排边累加该边的贡献，爬到根后就是 $dep_{\operatorname{lca}(x,y)}$ 的值。</p>
<p>于是便有了一个新的算法，对于重建快递站到 $u$，直接将 $u$ 往上爬，并更新每条边新的贡献，查询的话就跟刚才一样的往上爬就好了。</p>
<p>暴力往上爬的话可以过数据随机的点，然后结合算法 1,2,3 就能获得 80pts 的好成绩。</p>
<p>正解直接用树链剖分优化即可。</p>
<p>时间复杂度 $\mathcal{O}(n\log^2 n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n, m, totdep, tot, a[<span class="number">200005</span>], Dep[<span class="number">200005</span>], fa[<span class="number">200005</span>], size[<span class="number">200005</span>], dep[<span class="number">200005</span>], son[<span class="number">200005</span>],</span><br><span class="line">    seg[<span class="number">200005</span>], rev[<span class="number">200005</span>], top[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> to, w;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt; G[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    size[u] = <span class="number">1</span>, dep[u] = dep[f] + <span class="number">1</span>, fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = G[u][i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        Dep[v] = Dep[u] + G[u][i].w;</span><br><span class="line">        a[v] = G[u][i].w;</span><br><span class="line">        <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">        <span class="keyword">if</span> (size[v] &gt; size[son[u]])</span><br><span class="line">            son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (son[u]) &#123;</span><br><span class="line">        seg[son[u]] = ++seg[<span class="number">0</span>];</span><br><span class="line">        top[son[u]] = top[u];</span><br><span class="line">        rev[seg[<span class="number">0</span>]] = son[u];</span><br><span class="line">        <span class="built_in">dfs2</span>(son[u], u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = G[u][i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!top[v]) &#123;</span><br><span class="line">            seg[v] = ++seg[<span class="number">0</span>];</span><br><span class="line">            top[v] = v;</span><br><span class="line">            rev[seg[<span class="number">0</span>]] = v;</span><br><span class="line">            <span class="built_in">dfs2</span>(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        LL xsum, sum, lazy;</span><br><span class="line">    &#125;;</span><br><span class="line">    node tree[<span class="number">800005</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson(x) x &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson(x) x &lt;&lt; 1 | 1</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tree[x].sum = a[rev[l]];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(<span class="built_in">lson</span>(x), l, mid);</span><br><span class="line">        <span class="built_in">build</span>(<span class="built_in">rson</span>(x), mid + <span class="number">1</span>, r);</span><br><span class="line">        tree[x].sum = tree[<span class="built_in">lson</span>(x)].sum + tree[<span class="built_in">rson</span>(x)].sum;</span><br><span class="line">        tree[x].xsum = tree[<span class="built_in">lson</span>(x)].xsum + tree[<span class="built_in">rson</span>(x)].xsum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[x].lazy) &#123;</span><br><span class="line">            tree[<span class="built_in">lson</span>(x)].lazy += tree[x].lazy;</span><br><span class="line">            tree[<span class="built_in">rson</span>(x)].lazy += tree[x].lazy;</span><br><span class="line">            tree[<span class="built_in">lson</span>(x)].xsum += tree[x].lazy * tree[<span class="built_in">lson</span>(x)].sum;</span><br><span class="line">            tree[<span class="built_in">rson</span>(x)].xsum += tree[x].lazy * tree[<span class="built_in">rson</span>(x)].sum;</span><br><span class="line">            tree[x].lazy = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">            tree[x].lazy++;</span><br><span class="line">            tree[x].xsum += tree[x].sum;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(x);</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= mid)</span><br><span class="line">            <span class="built_in">add</span>(<span class="built_in">lson</span>(x), l, mid, L, R);</span><br><span class="line">        <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= R)</span><br><span class="line">            <span class="built_in">add</span>(<span class="built_in">rson</span>(x), mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">        tree[x].xsum = tree[<span class="built_in">lson</span>(x)].xsum + tree[<span class="built_in">rson</span>(x)].xsum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">            <span class="keyword">return</span> tree[x].xsum;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">push_down</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= mid)</span><br><span class="line">            ans += <span class="built_in">query</span>(<span class="built_in">lson</span>(x), l, mid, L, R);</span><br><span class="line">        <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= R)</span><br><span class="line">            ans += <span class="built_in">query</span>(<span class="built_in">rson</span>(x), mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u) &#123;</span><br><span class="line">        <span class="type">int</span> fu = top[u];</span><br><span class="line">        T.<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">1</span>, n, seg[fu], seg[u]);</span><br><span class="line">        u = fa[fu];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (u) &#123;</span><br><span class="line">        <span class="type">int</span> fu = top[u];</span><br><span class="line">        ans += T.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, seg[fu], seg[u]);</span><br><span class="line">        u = fa[fu];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(node&#123; v, w &#125;);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(node&#123; u, w &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    seg[<span class="number">0</span>] = <span class="number">1</span>, seg[<span class="number">1</span>] = <span class="number">1</span>, top[<span class="number">1</span>] = rev[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    T.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, seg[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> opt, u;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;opt, &amp;u);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">change</span>(u), totdep += Dep[u], tot++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, totdep + <span class="number">1ll</span> * tot * Dep[u] - <span class="number">2</span> * <span class="built_in">query</span>(u));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>做法 2</p>
<p>来自巨佬 WY 的做法，cdq 分治+虚树。</p>
<h1 id="B-Rainyrabbit-爱回文"><a href="#B-Rainyrabbit-爱回文" class="headerlink" title="B-Rainyrabbit 爱回文"></a>B-Rainyrabbit 爱回文</h1><p>很遗憾，因为数据过水，导致有 5 人 AC，但是本质上只有 3 人写的正解，其他的时间复杂度都是错的。</p>
<p>多次询问一个字符串 $s$，问构造若干字符串 $t_1,t_2,\cdots ,t_k$ 使得 $s&#x3D;t_1t_2\cdots t_k$ 并且 $\forall i \in [1,k],t_i \geq 2$ 并且是回文串的方式是否存在。$T \leq 10,|s| \leq 10^6$。</p>
<p>首先每次选最大的回文串肯定是错的。具体看这个串 <code>ababallllllab</code>。</p>
<p>先求出 $f$，$f_i$ 为以字符 $i$ 为开头的最短回文串长度。</p>
<p>考虑这个辅助数组的作用。假设我们的合法划分方案，在这里的划分出来的回文串长度是 $d$，那么这个 $f_i$ 与 $d$ 的关系是什么呢？</p>
<p>首先，显然 $f_i \leq d$。分类讨论：</p>
<ul>
<li>$f_i &#x3D; d$：那没事儿了。   </li>
<li>$f_i &lt; \dfrac{d}{2}$：显然我们可以将这个字符串 $d$ 看成三个回文串，也就是一段 $f_i$，以最后一个字符为中心对称过去，或者是再恰一个字符再对称，或者是直接对称过去；   </li>
<li>否则这种情况是不可能的，因为这样我们能够找到更小的前缀回文串。可以自行理解。注意这个更小的前缀回文串可能是一个字母，需要特判。</li>
</ul>
<p>综上，以 $i$ 开头的回文串长度的选择只有四个：$f_i,2f_i-1,2f_i+1,2f_i$。可以证明其可以涵盖所有情况。剩下的工作就是做个 dp。</p>
<p>考虑求出这个 $f$ 数组。有三种做法，时间复杂度分别是 $O(n \log n),O(n \alpha(n))$。标程给的是 $O(n\log n)$ 的做法。$O(n \alpha(n))$ 做法由 @chihik 提出。</p>
<p>理论上来说有 $O(n)$ 的做法，但是我太菜没听懂 @crashed 再说啥。</p>
<h3 id="O-n-log-n"><a href="#O-n-log-n" class="headerlink" title="$O(n \log n)$"></a>$O(n \log n)$</h3><p>考虑对于每一个字符，求出以它为中心（中心可以是和下一个字符结合也可以是一个字符，这个是两类）的最长回文串，在其左端点打上标记。标记记录三个值，表示其起始位置，有效长度及中心是和下一个字符结合还是一个字符。做法是 hash 二分。你高兴也可以 manacher。</p>
<p>这个东西的意义是，我们选择的 $f_i$，一定是离有效范围内结束最近的那个位置的距离。于是处理三个东西，可以发现这个东西可以全部拍进 <code>set</code> 里面选最小的且合法的。具体处理方法看代码。</p>
<p>代码有个小补丁，就是要处理两个相邻字符相同的情况。这个时候直接把 $f_i$ 设为 $2$ 即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">LL         JJ  SSSS    ii  ssss     SSSS BBBB</span></span><br><span class="line"><span class="comment">LL         JJ S           s        S     B   B</span></span><br><span class="line"><span class="comment">LL         JJ  SSS     ii  sss      SSS  BBBB</span></span><br><span class="line"><span class="comment">LL     JJ  JJ     S    ii     s        S B   B</span></span><br><span class="line"><span class="comment">LLLLLL  JJJJ  SSSS     ii ssss     SSSS  BBBB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> SSSS BBBB     ii  ssss    LL         JJ  SSSS</span></span><br><span class="line"><span class="comment">S     B   B       s        LL         JJ S</span></span><br><span class="line"><span class="comment"> SSS  BBBB     ii  sss     LL         JJ  SSS</span></span><br><span class="line"><span class="comment">    S B   B    ii     s    LL     JJ  JJ     S</span></span><br><span class="line"><span class="comment">SSSS  BBBB     ii ssss     LLLLLL  JJJJ  SSSS</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"><span class="type">const</span> ULL base=<span class="number">10086001</span>;</span><br><span class="line">ULL lhsh[<span class="number">3000005</span>],rhsh[<span class="number">3000005</span>],pw[<span class="number">3000005</span>];</span><br><span class="line"><span class="type">char</span> s[<span class="number">3000005</span>];</span><br><span class="line"><span class="function">ULL <span class="title">getHashL</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> lhsh[r]-lhsh[l<span class="number">-1</span>]*pw[r-l+<span class="number">1</span>];&#125;</span><br><span class="line"><span class="function">ULL <span class="title">getHashR</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> rhsh[l]-rhsh[r+<span class="number">1</span>]*pw[r-l+<span class="number">1</span>];&#125;</span><br><span class="line"><span class="type">int</span> n,f[<span class="number">3000005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">getHashL</span>(l,r)==<span class="built_in">getHashR</span>(l,r);&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pldrome</span>&#123;</span><br><span class="line">	<span class="type">int</span> pos,len,type;</span><br><span class="line">	<span class="built_in">pldrome</span>(<span class="type">int</span> R=<span class="number">0</span>,<span class="type">int</span> L=<span class="number">0</span>,<span class="type">int</span> T=<span class="number">0</span>)&#123;pos=R,len=L,type=T;&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> pldrome ano) <span class="type">const</span> &#123;<span class="keyword">return</span> pos!=ano.pos || len!=ano.len || type!=ano.type;&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> pldrome ano) <span class="type">const</span> &#123;</span><br><span class="line">		<span class="type">int</span> ps=pos,ln=len,tp=type,pst=ano.pos,lnt=ano.len,tpt=ano.type;</span><br><span class="line">		<span class="keyword">if</span>(tp==<span class="number">0</span>)	--ln;</span><br><span class="line">		<span class="keyword">if</span>(tpt==<span class="number">0</span>)	--lnt;</span><br><span class="line">		<span class="type">int</span> ed1=ps+ln<span class="number">-1</span>,ed2=pst+lnt<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">return</span> ed1&lt;ed2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;pldrome&gt; G[<span class="number">3000005</span>];</span><br><span class="line"><span class="type">bool</span> dp[<span class="number">3000005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">	pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3000000</span>;++i)	pw[i]=pw[i<span class="number">-1</span>]*base; </span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	dp[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span>(T--&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)	lhsh[i]=lhsh[i<span class="number">-1</span>]*base+<span class="built_in">ULL</span>(s[i]),f[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;--i)	rhsh[i]=rhsh[i+<span class="number">1</span>]*base+<span class="built_in">ULL</span>(s[i]),dp[i]=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(<span class="number">1</span>,<span class="number">2</span>))	G[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="built_in">pldrome</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(i==n<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(n<span class="number">-1</span>,n))	G[n<span class="number">-1</span>].<span class="built_in">push_back</span>(<span class="built_in">pldrome</span>(n<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(n<span class="number">-2</span>,n))	G[n<span class="number">-2</span>].<span class="built_in">push_back</span>(<span class="built_in">pldrome</span>(n<span class="number">-2</span>,<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(i==n)	<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//i is medium</span></span><br><span class="line">				<span class="type">int</span> l=<span class="number">0</span>,r=<span class="built_in">min</span>(i<span class="number">-1</span>,n-i),ans=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(i-mid,i+mid))	ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">else</span>	r=mid<span class="number">-1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(ans)	G[i-ans].<span class="built_in">push_back</span>(<span class="built_in">pldrome</span>(i-ans,ans+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">				l=<span class="number">0</span>,r=<span class="built_in">min</span>(i<span class="number">-1</span>,n-i<span class="number">-1</span>),ans=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(i-mid,i+<span class="number">1</span>+mid))	ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">else</span>	r=mid<span class="number">-1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(ans)	G[i-ans].<span class="built_in">push_back</span>(<span class="built_in">pldrome</span>(i-ans,ans+<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(i,i+<span class="number">1</span>))	G[i].<span class="built_in">push_back</span>(<span class="built_in">pldrome</span>(i,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		set&lt;pldrome&gt; S;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(!G[i].<span class="built_in">empty</span>())	S.<span class="built_in">insert</span>(G[i].<span class="built_in">back</span>()),G[i].<span class="built_in">pop_back</span>();</span><br><span class="line">			<span class="keyword">while</span>(!S.<span class="built_in">empty</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				pldrome st=*S.<span class="built_in">begin</span>();</span><br><span class="line">				<span class="type">int</span> ps=st.pos,ln=st.len,tp=st.type;</span><br><span class="line">				<span class="keyword">if</span>(tp==<span class="number">0</span>)	--ln;</span><br><span class="line">				<span class="type">int</span> ed=ps+ln<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">if</span>(ed&lt;i)</span><br><span class="line">				&#123;</span><br><span class="line">					S.<span class="built_in">erase</span>(S.<span class="built_in">begin</span>());</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(tp==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					++ed;</span><br><span class="line">					<span class="type">int</span> edTrue=<span class="number">2</span>*ed-i;</span><br><span class="line">					f[i]=edTrue-i+<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="type">int</span> edTrue=<span class="number">2</span>*ed-i+<span class="number">1</span>;</span><br><span class="line">					f[i]=edTrue-i+<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(S.<span class="built_in">empty</span>())	f[i]=<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;=n<span class="number">-1</span> &amp;&amp; <span class="built_in">isPalindrome</span>(i,i+<span class="number">1</span>))	f[i]=<span class="number">2</span>;	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(f[i]==<span class="number">-1</span> || !dp[i<span class="number">-1</span>])	<span class="keyword">continue</span>;</span><br><span class="line">			dp[i+f[i]<span class="number">-1</span>]=<span class="literal">true</span>;</span><br><span class="line">			<span class="type">int</span> sp=<span class="number">2</span>*f[i]<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(i,i+sp<span class="number">-1</span>))	dp[i+sp<span class="number">-1</span>]=<span class="literal">true</span>;</span><br><span class="line">			sp+=<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(i,i+sp<span class="number">-1</span>))	dp[i+sp<span class="number">-1</span>]=<span class="literal">true</span>;</span><br><span class="line">			--sp;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(i,i+sp<span class="number">-1</span>))	dp[i+sp<span class="number">-1</span>]=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(dp[n]?<span class="string">&quot;YeseY&quot;</span>:<span class="string">&quot;NoN&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="O-n-alpha-n-By-chihik"><a href="#O-n-alpha-n-By-chihik" class="headerlink" title="$O(n \alpha (n))$ By @chihik"></a>$O(n \alpha (n))$ By @chihik</h3><p>考虑回文自动机。一样的思路，求出以某位为起点的最长回文串。暴力回跳。显然 T，于是并查集优化即可。</p>
<h3 id="O-n-By-crashed-x2F-LY（初二）"><a href="#O-n-By-crashed-x2F-LY（初二）" class="headerlink" title="$O(n)$ By crashed &#x2F; LY（初二）"></a>$O(n)$ By crashed &#x2F; LY（初二）</h3><p>本意是选联赛范围考察。但是因为大家都会回文自动机所以被踩了。反正其实我也不会。</p>
<p>具体做法是链上排一次序（基排 By crashed）。</p>
<h1 id="C-Rainyrabbit-爱求和"><a href="#C-Rainyrabbit-爱求和" class="headerlink" title="C-Rainyrabbit 爱求和"></a>C-Rainyrabbit 爱求和</h1><p>菜鸡出的垃圾套路题。&#x2F;kk</p>
<h3 id="算法-1-1"><a href="#算法-1-1" class="headerlink" title="算法 1"></a>算法 1</h3><p>测试点 $1$ 随便手玩。</p>
<p>期望得分 4 分。</p>
<h3 id="算法-2-1"><a href="#算法-2-1" class="headerlink" title="算法 2"></a>算法 2</h3><p>测试点 $2\sim 3$ 按照题意模拟。</p>
<p>期望得分 12 分。</p>
<h3 id="算法-3-1"><a href="#算法-3-1" class="headerlink" title="算法 3"></a>算法 3</h3><p>测试点 $4\sim 5$ 先在外面直接算然后直接回答。</p>
<p>期望得分 20 分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dec</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt;= y ? x - y : x + mod - y; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1ll</span> * x * y % mod; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x + y &gt;= mod)</span><br><span class="line">        <span class="keyword">return</span> x + y - mod;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qkpow</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="built_in">mul</span>(a, a))</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="built_in">mul</span>(res, a);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t,mem[<span class="number">105</span>][<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">LL a,b,c;</span><br><span class="line"><span class="function">LL <span class="title">lcm</span><span class="params">(LL a,LL b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a/__gcd(a,b)*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sigma</span><span class="params">(LL n,LL k)</span></span>&#123;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n%i==<span class="number">0</span>)ans=<span class="built_in">add</span>(ans,<span class="built_in">qkpow</span>(i,k));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">f</span><span class="params">(LL n,LL m,LL k)</span></span>&#123;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(LL i=m;i&lt;=n;i+=m)ans=<span class="built_in">add</span>(ans,<span class="built_in">sigma</span>(i,k));</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;t&gt;&gt;c;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=c;k++)</span><br><span class="line">				mem[i][j][k]=k==<span class="number">0</span>?<span class="built_in">f</span>(i,j,<span class="number">0</span>):<span class="built_in">add</span>(mem[i][j][k<span class="number">-1</span>],<span class="built_in">f</span>(i,j,k));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line">			mem[i][j][c]=<span class="built_in">add</span>(mem[i][j][c],<span class="built_in">add</span>(mem[i][j<span class="number">-1</span>][c],mem[i<span class="number">-1</span>][j][c]));</span><br><span class="line">			mem[i][j][c]=<span class="built_in">dec</span>(mem[i][j][c],mem[i<span class="number">-1</span>][j<span class="number">-1</span>][c]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		cout&lt;&lt;mem[a][b][c]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">4 1 3 6 2</span></span><br><span class="line"><span class="comment">1 2 4</span></span><br><span class="line"><span class="comment">2 1 3</span></span><br><span class="line"><span class="comment">0 0 3 2</span></span><br><span class="line"><span class="comment">1 1 2</span></span><br><span class="line"><span class="comment">2 2 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="算法-4-1"><a href="#算法-4-1" class="headerlink" title="算法 4"></a>算法 4</h3><p>送分结束。</p>
<p>来推一推 $f$ 函数。</p>
<p>$$<br>f(n,m,k)&#x3D;\sum_{d&#x3D;1}^n d^k \lfloor\dfrac{n}{\operatorname{lcm}(d,m)}\rfloor&#x3D;\sum_{d&#x3D;1}^n d^k \lfloor\dfrac{\dfrac{n}{d}}{\lfloor\dfrac{m}{\gcd(d,m)}\rfloor}\rfloor<br>$$</p>
<p>这个东西是有意义的，$\sum_{d&#x3D;1}^n d^k \lfloor\dfrac{\dfrac{n}{d}}{\lfloor\dfrac{m}{\gcd(d,m)}\rfloor}\rfloor&#x3D;\sum_{i&#x3D;1}^{\lfloor\frac{n}{d}\rfloor}[id|m]$</p>
<p>然后拆回来</p>
<p>$$<br>f(n,m,k)&#x3D;\sum_{m|i}^n \sum_{d|i}d^k&#x3D;\sum_{m|i}^n \sigma_k(i)<br>$$</p>
<p>结论就推完了。</p>
<p>代回去</p>
<p>$$<br>\sum_{k&#x3D;0}^c\sum_{i&#x3D;1}^a\sum_{j&#x3D;1}^b\sum_{j|p}^i\sigma_k(p)<br>$$</p>
<p>$$<br>\sum_{k&#x3D;0}^c\sum_{p&#x3D;1}^a\sigma_k(p)(a-p+1)\sum_{j&#x3D;1}^b[j|p]<br>$$</p>
<p>$\sigma_k(p)$ 那里可以直接把 $\sigma_0(p),\sigma_1(p)…,\sigma_c(p)$ 都累加到一坨，然后直接 $\mathcal{O}(n^2)$ 计算即可。</p>
<p>跟刚才一样的操作，先在外面都算出来再回答，可以获得 36pts 的好成绩。</p>
<h3 id="算法-5"><a href="#算法-5" class="headerlink" title="算法 5"></a>算法 5</h3><p>发现 $b$ 的那个求和并不需要一个一个算，直接调和级数复杂度算就好了，然后就能获得 40 pts。</p>
<h3 id="算法-6"><a href="#算法-6" class="headerlink" title="算法 6"></a>算法 6</h3><p>$c$ 太大了，推一推怎么算 $\sum_{i&#x3D;0}^c \sigma_i(p)$。</p>
<p>$$<br>\sum_{i&#x3D;0}^c \sum_{d|p}d^i<br>$$</p>
<p>发现对于每一个因子的贡献都是一个等比数列。</p>
<p>$$<br>\sum_{d|p}\dfrac{d^{c+1}-1}{d-1}<br>$$</p>
<p>线性筛后调和级数算就好了，然后就能获得 68 pts 了。</p>
<h3 id="算法-7"><a href="#算法-7" class="headerlink" title="算法 7"></a>算法 7</h3><p>发现 $b$ 超过 $a$ 的范围以后是不会有任何贡献的，于是取个 $\min$ 算，至此就能获得 80 pts 的好成绩。</p>
<h3 id="算法-8"><a href="#算法-8" class="headerlink" title="算法 8"></a>算法 8</h3><p>这东西并不好多组询问，$a,b$ 变来变去的很烦。</p>
<p>考虑离线，将每一个询问按照 $b$ 排序。当 $b&#x3D;i$ 时能影响到的位置是 $\dfrac{n}{i}$ 个，直接树状数组修改即可。修改完后，直接查询就好了。</p>
<p>时间复杂度 $\mathcal{O}(a\ln a+T\log T+\min(a,b)\ln \min(a,b)\log a+T\log a)$。</p>
<p>由于这东西并跑不满，跑 $10^6$ 是跑的过的。代码及其好写。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dec</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt;= y ? x - y : x + mod - y; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1ll</span> * x * y % mod; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x + y &gt;= mod)</span><br><span class="line">        <span class="keyword">return</span> x + y - mod;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qkpow</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="built_in">mul</span>(a, a))</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="built_in">mul</span>(res, a);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T, cnt, maxa, a[<span class="number">200005</span>], prime[<span class="number">1000005</span>], pw[<span class="number">1000005</span>], inv[<span class="number">1000005</span>], f[<span class="number">1000005</span>], s[<span class="number">1000005</span>], anos[<span class="number">1000005</span>],</span><br><span class="line">    ans[<span class="number">1000005</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1000005</span>];</span><br><span class="line">LL b[<span class="number">200005</span>], c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, a;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt; G[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">    <span class="type">int</span> tree[<span class="number">1000005</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= maxa) &#123;</span><br><span class="line">            tree[x] = <span class="built_in">add</span>(tree[x], val);</span><br><span class="line">            x += x &amp; (-x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> Ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            Ans = <span class="built_in">add</span>(Ans, tree[x]);</span><br><span class="line">            x -= x &amp; (-x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T1, T2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">seive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pw[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            prime[++cnt] = i, pw[i] = <span class="built_in">qkpow</span>(i, c + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= <span class="number">1000000</span>; j++) &#123;</span><br><span class="line">            vis[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            pw[i * prime[j]] = <span class="built_in">mul</span>(pw[i], pw[prime[j]]);</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000000</span>; i++) inv[i] = (LL)(mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="built_in">add</span>(c % mod, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000000</span>; i++) f[i] = <span class="built_in">mul</span>(<span class="built_in">dec</span>(pw[i], <span class="number">1</span>), inv[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= <span class="number">1000000</span>; j += i) s[j] = <span class="built_in">add</span>(s[j], f[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; i++) anos[i] = <span class="built_in">mul</span>(s[i], i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>, &amp;T, &amp;c);</span><br><span class="line">    <span class="built_in">seive</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>, &amp;a[i], &amp;b[i]), maxa = <span class="built_in">max</span>(maxa, a[i]), b[i] = <span class="built_in">min</span>(b[i], <span class="number">1ll</span> * a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= T; i++) G[b[i]].<span class="built_in">push_back</span>(node&#123; i, a[i] &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxa; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= maxa; j += i) T1.<span class="built_in">Add</span>(j, s[j]), T2.<span class="built_in">Add</span>(j, anos[j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            node now = G[i][j];</span><br><span class="line">            ans[now.id] = <span class="built_in">dec</span>(<span class="built_in">mul</span>(now.a + <span class="number">1</span>, T1.<span class="built_in">query</span>(now.a)), T2.<span class="built_in">query</span>(now.a));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= T; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D-Rainyrabbit-爱染色"><a href="#D-Rainyrabbit-爱染色" class="headerlink" title="D-Rainyrabbit 爱染色"></a>D-Rainyrabbit 爱染色</h1><p>本场比赛的防 AK 题。其实思维难度不算太大，只是极其难写。</p>
<h3 id="算法-1-2"><a href="#算法-1-2" class="headerlink" title="算法 1"></a>算法 1</h3><p>爆搜即可。可以获得 10 pts。</p>
<h3 id="算法-2-2"><a href="#算法-2-2" class="headerlink" title="算法 2"></a>算法 2</h3><p>考虑 $\mathcal{O}(nm)$ 的做法。</p>
<p>考虑贪心，每次选择只由该关键点覆盖的节点个数最多的关键点拿来染色，选完后重新更新一下（因为选了一个关键点染色），重复以上步骤 $m$ 次，期间更新一下答案就好了，容易证明得出的答案一定是最优的。</p>
<p>期望得分 40 pts。</p>
<h3 id="算法-3-2"><a href="#算法-3-2" class="headerlink" title="算法 3"></a>算法 3</h3><p>先来考虑优化链的情况。</p>
<p>发现每个关键点控制的范围都是一个连续的区间，用一棵线段树维护即可。</p>
<p>菊花图就更简单了，如果花心 $d_i\ge 1$ 全部都能控制到，其他的点如果 $d_i&#x3D;1$ 就只能控制花心，$d_i&#x3D;2$ 就能控制所有的点。随便更新一下就好了。</p>
<p>结合算法 2 期望得分 60pts。</p>
<h3 id="算法-4-2"><a href="#算法-4-2" class="headerlink" title="算法 4"></a>算法 4</h3><p>发现复杂度瓶颈在于怎么快速找到只由该关键点覆盖的节点个数最多的关键点及其更新。</p>
<p>先来看看 $d_i\in{0,1}$ 的情况，因为每个关键点能覆盖的节点是散开的，不好处理。于是考虑将树从上到下每一层从左到右编个号，然后你会惊奇的发现对于 $d_i&#x3D;1$ 的关键点能染到的点可以看成一个连续的区间和该关键点父亲的编号。于是可以想到用线段树维护，用每一个点的编号建树，但是发现不太好维护，因为要知道是哪一个关键点，而不是最多的点数，于是想到在线段树的每一个节点上都开一个 <code>set</code> 维护这个区间编号的节点有哪些关键点能够染到，找到后删除的话就直接 <code>erase</code> 就好了。现在的问题，怎么找？？？？考虑直接从根节点往下搜，直接暴力找肯定会 T，考虑对于线段树上的每一个节点都维护一个区间最小值，表示这个区间至少有多少个关键点覆盖，如果关键点个数大于 $1$ 或者已经被选过的关键点染过就不搜了，否则就拿出 <code>set</code> 里的关键点，往下搜，搜到 $l&#x3D;r$ 时就将该关键点的 $cnt$ 加一，放进堆里就好了。</p>
<p>关于找最小字典序的序列也很简单，每次选个数最多编号最小的关键点就好了，然后跟上面一样跑。</p>
<p>期望得分 70pts。</p>
<h3 id="算法-5-1"><a href="#算法-5-1" class="headerlink" title="算法 5"></a>算法 5</h3><p>现在来玩 $d_i&#x3D;2$ 的情况，发现也可以拆分成几个编号连续的区间。该关键点的下面两层，它的父亲的父亲，它的父亲的父亲下面那一层。然后跟上面那样一样做就行。</p>
<p>时间复杂度 $\mathcal{O}(m\log^2 n\sim m\log^3n )$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, Cnt, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> im_node[<span class="number">3</span>][<span class="number">200005</span>], cnt[<span class="number">200005</span>], fa[<span class="number">200005</span>], L1[<span class="number">200005</span>], R1[<span class="number">200005</span>], L2[<span class="number">200005</span>], R2[<span class="number">200005</span>], dep[<span class="number">200005</span>], dfn[<span class="number">200005</span>];</span><br><span class="line"><span class="type">bool</span> isdead[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson(x) x &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson(x) x &lt;&lt; 1 | 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> minn, lazy;</span><br><span class="line">&#125; tree[<span class="number">400005</span>];</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; cover[<span class="number">400005</span>];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[<span class="number">200005</span>], g[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line">priority_queue&lt;pi&gt; Q1;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; Q2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>, fa[u] = f;</span><br><span class="line">    g[dep[u]].<span class="built_in">push_back</span>(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = G[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    L1[u] = L2[u] = <span class="number">1e9</span>, R1[u] = R2[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = G[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, u);</span><br><span class="line">        L1[u] = <span class="built_in">min</span>(L1[u], dfn[v]);</span><br><span class="line">        L2[u] = <span class="built_in">min</span>(L2[u], L1[v]);</span><br><span class="line">        R1[u] = <span class="built_in">max</span>(R1[u], dfn[v]);</span><br><span class="line">        R2[u] = <span class="built_in">max</span>(R2[u], R1[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tree[x].lazy = tree[x].minn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rebuild</span>(<span class="built_in">lson</span>(x), l, mid);</span><br><span class="line">    <span class="built_in">rebuild</span>(<span class="built_in">rson</span>(x), mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[x].lazy) &#123;</span><br><span class="line">        tree[<span class="built_in">lson</span>(x)].lazy += tree[x].lazy;</span><br><span class="line">        tree[<span class="built_in">rson</span>(x)].lazy += tree[x].lazy;</span><br><span class="line">        tree[<span class="built_in">lson</span>(x)].minn += tree[x].lazy;</span><br><span class="line">        tree[<span class="built_in">rson</span>(x)].minn += tree[x].lazy;</span><br><span class="line">        tree[x].lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Updata</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[x].minn &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (cover[x].<span class="built_in">size</span>())</span><br><span class="line">        u = *cover[x].<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[x].minn == <span class="number">0</span>)</span><br><span class="line">            tree[x].minn = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tree[x].minn == <span class="number">1</span>) &#123;</span><br><span class="line">            cnt[u]++;</span><br><span class="line">            Q1.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(cnt[u], u));</span><br><span class="line">            tree[x].minn = <span class="number">1e9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(x);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Updata</span>(<span class="built_in">lson</span>(x), l, mid, u);</span><br><span class="line">    <span class="built_in">Updata</span>(<span class="built_in">rson</span>(x), mid + <span class="number">1</span>, r, u);</span><br><span class="line">    tree[x].minn = <span class="built_in">min</span>(tree[<span class="built_in">lson</span>(x)].minn, tree[<span class="built_in">rson</span>(x)].minn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        tree[x].lazy--, tree[x].minn--;</span><br><span class="line">        it = cover[x].<span class="built_in">find</span>(u);</span><br><span class="line">        cover[x].<span class="built_in">erase</span>(it);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(x);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid)</span><br><span class="line">        <span class="built_in">sub</span>(<span class="built_in">lson</span>(x), l, mid, L, R, u);</span><br><span class="line">    <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= R)</span><br><span class="line">        <span class="built_in">sub</span>(<span class="built_in">rson</span>(x), mid + <span class="number">1</span>, r, L, R, u);</span><br><span class="line">    tree[x].minn = <span class="built_in">min</span>(tree[<span class="built_in">lson</span>(x)].minn, tree[<span class="built_in">rson</span>(x)].minn) + tree[x].lazy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        tree[x].lazy++, tree[x].minn++;</span><br><span class="line">        cover[x].<span class="built_in">insert</span>(u);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(x);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid)</span><br><span class="line">        <span class="built_in">add</span>(<span class="built_in">lson</span>(x), l, mid, L, R, u);</span><br><span class="line">    <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= R)</span><br><span class="line">        <span class="built_in">add</span>(<span class="built_in">rson</span>(x), mid + <span class="number">1</span>, r, L, R, u);</span><br><span class="line">    tree[x].minn = <span class="built_in">min</span>(tree[<span class="built_in">lson</span>(x)].minn, tree[<span class="built_in">rson</span>(x)].minn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updata</span><span class="params">(<span class="type">int</span> opt, <span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, u);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">sub</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_or_sub_im_node</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> u = im_node[<span class="number">0</span>][x], d = im_node[<span class="number">1</span>][x];</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">updata</span>(opt, x, dfn[u], dfn[u]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">updata</span>(opt, x, L1[u], R1[u]);</span><br><span class="line">        <span class="built_in">updata</span>(opt, x, dfn[u], dfn[u]);</span><br><span class="line">        <span class="keyword">if</span> (fa[u])</span><br><span class="line">            <span class="built_in">updata</span>(opt, x, dfn[fa[u]], dfn[fa[u]]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">updata</span>(opt, x, L1[u], R1[u]);</span><br><span class="line">        <span class="built_in">updata</span>(opt, x, L2[u], R2[u]);</span><br><span class="line">        <span class="keyword">if</span> (fa[u]) &#123;</span><br><span class="line">            <span class="type">int</span> v = fa[u];</span><br><span class="line">            <span class="built_in">updata</span>(opt, x, L1[v], R1[v]);</span><br><span class="line">            <span class="built_in">updata</span>(opt, x, dfn[v], dfn[v]);</span><br><span class="line">            <span class="keyword">if</span> (fa[v])</span><br><span class="line">                <span class="built_in">updata</span>(opt, x, dfn[fa[v]], dfn[fa[v]]);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">updata</span>(opt, x, dfn[u], dfn[u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; g[i].<span class="built_in">size</span>(); j++) dfn[g[i][j]] = ++Cnt;</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;im_node[<span class="number">0</span>][i], &amp;im_node[<span class="number">1</span>][i]);</span><br><span class="line">        <span class="built_in">add_or_sub_im_node</span>(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) Q1.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, i));</span><br><span class="line">    <span class="built_in">Updata</span>(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isdead[Q1.<span class="built_in">top</span>().second] || Q1.<span class="built_in">top</span>().first != cnt[Q1.<span class="built_in">top</span>().second]) Q1.<span class="built_in">pop</span>();</span><br><span class="line">        pi now = Q1.<span class="built_in">top</span>();</span><br><span class="line">        Q1.<span class="built_in">pop</span>();</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, now.first);</span><br><span class="line">        isdead[now.second] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">add_or_sub_im_node</span>(now.second, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">Updata</span>(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="built_in">rebuild</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (!Q1.<span class="built_in">empty</span>()) Q1.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) isdead[i] = <span class="number">0</span>, cnt[i] = <span class="number">0</span>, <span class="built_in">add_or_sub_im_node</span>(i, <span class="number">1</span>), Q1.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, i));</span><br><span class="line">    <span class="built_in">Updata</span>(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> choose = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (choose &lt; m) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isdead[Q1.<span class="built_in">top</span>().second] || Q1.<span class="built_in">top</span>().first != cnt[Q1.<span class="built_in">top</span>().second]) Q1.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (Q1.<span class="built_in">top</span>().first &lt; ans)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            Q2.<span class="built_in">push</span>(-Q1.<span class="built_in">top</span>().second);</span><br><span class="line">            isdead[Q1.<span class="built_in">top</span>().second] = <span class="number">1</span>;</span><br><span class="line">            Q1.<span class="built_in">pop</span>();</span><br><span class="line">            choose++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">add_or_sub_im_node</span>(-Q2.<span class="built_in">top</span>(), <span class="number">-1</span>);</span><br><span class="line">        Q2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">Updata</span>(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>「Summary」寒假第一期集训小结</title>
    <url>/2021/02/08/2021-02-8-%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E6%9C%9F%E9%9B%86%E8%AE%AD%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>寒假第一期小结</p>
</blockquote>
<span id="more"></span>   

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><del>感觉最大的进步是学会了卡常。</del> <br/><br>这一期主要学了和单调队列有关的dp优化和各种高级搜索，合起来无非是优雅的暴力。。。<br/></p>
<h3 id="dp优化"><a href="#dp优化" class="headerlink" title="dp优化"></a>dp优化</h3><p>单调队列优化学得还好，斜率优化硬是花了一天半的时间才想明白，但是如果<strong>模式化</strong>地去理解，还是比较好懂。<br/>    </p>
<h4 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h4><p>单调队列优化针对于<strong>普通版本</strong>的，没有 $i \times j$ 这样的结构的状态转移方程。<br/><br>如果将其看作<strong>函数</strong>，真正影响其值的大小的量其实是于 $i$ 无关的变量(可以把含有$i$的值看作常量)，那么就可以用<strong>单调队列</strong>去维护区间的最值。<br/>        </p>
<h5 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (head &lt;= tail &amp;&amp; q[head] 的值不在可更新的范围内) head++; <span class="comment">// 踢队头</span></span><br><span class="line">dp[...] = dp[q[head]] ...;</span><br><span class="line"><span class="keyword">while</span> (head &lt;= tail &amp;&amp; i 的贡献比 q[head] 的贡献更大) tail--; <span class="comment">// 踢队尾</span></span><br><span class="line">q[++tail] = i;</span><br></pre></td></tr></table></figure>
<h4 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h4><p>当状态转移方程中出现了 $i$ 与其它变量的乘积的时候，单调队列无法单纯的去维护时，就需要斜率优化。<br/><br>个人认为代数法是最好理解的。。。<br/><br>举个例子？<br>以<a href="https://www.luogu.com.cn/problem/CF311B">Cats Transport</a>一题为例:<br/><br><del>怎么又是这道</del><br/><br>$dp_{i,j} &#x3D; min_{0 &lt; k} ^{j-1}(dp_{i-1,k} + (j - k) * a_j - sum_j + sum_k)$<br>$dp_{i,j} &#x3D; dp_{i-1,k} + (j - k) * a_j - sum_j + sum_k$<br>假设有$k_1$、$k_2$两个状态点, $k_2$在$k_1$后，且$k_2$比$k_1$更优。<br/><br>则可以知道:<br/><br>$dp_{i-1,{k_1}} + (j - k_1) * a_j - sum_j + sum_{k_1} \geq dp_{i-1,{k_2}} + (j - k_2) * a_j - sum_j + sum_{k_2}$<br>化简:<br/><br>$dp_{i-1,{k_1}} + (j - k_1) * a_j + sum_{k_1} \geq dp_{i-1,{k_2}} + (j - k_2) * a_j  + sum_{k_2}$<br>将带有$i$的和没有的整理得：<br/><br>$ (dp_{i-1,{k_2}} + sum_{k_2}) - (dp_{i-1,{k_1}} + sum_{k_1}) \leq a_j \times (k_2 - k_1)$<br>因为$k_2$在$k_1$后，所以$(k_2 - k_1) \geq 1$。<br>将$(k_2 - k_1)$移到左边:<br/><br>$ \frac{(dp_{i-1,{k_2}} + sum_{k_2}) - (dp_{i-1,{k_1}} + sum_{k_1})}{(k_2 - k_1)} \leq a_j$<br/><br>所以得到了啥？<br/><br>。。。<br/><br>当初一直不懂为啥要推式子，想了很久终于明白了它的意义。。。<br/><br>回忆<strong>单调队列的操作</strong>，首先维护<strong>队头的最优解</strong>，然后去掉<strong>队尾的亢余</strong><br/><br>那么按照操作来可以知道：<br/><br>$q[head + 1]$和$q[head]$在满足上面的公式的时候，$q[head + 1]$比$q[head]$更优。<br/><br>所以可以踢掉队头。<br/><br>那么可以通过状态转移方程知道解的单调性。<br/><br>回忆$ZSJ$在数学课上讲的<strong>线性规划</strong> (当时就看到他用一根线在坐标系上移来移去，不知道在干啥。。。) <br/><br>要是最后的答案最小，那么就要让<strong>基准线</strong>的截距最小(不考虑交点在2、3、4象限)<br/><br>而<strong>基准线</strong>要经过其中的一个决策点：<br/><br>那么如下图：<br/><br><img data-src="http://61.186.173.89:2019/2021/02/08/f5d2dd003104b.jpg" alt="..."> <br/><br>可以看出无论是选择$q[tail - 1]$或者$i$，得到的答案都会比选择$q[tail]$优，那么此时，利用点连线间的斜率关系，就可以把$q[tail]$弹出去。<br/><br>可以有：           </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">int X(int i) &#123; return ...; &#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Y</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123; <span class="keyword">return</span> ...; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">K</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">Y</span>(j) - <span class="built_in">Y</span>(i)) / (<span class="built_in">X</span>(j) - <span class="built_in">X</span>(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*单调队列*/</span></span><br><span class="line">	head = <span class="number">1</span>, tail = <span class="number">1</span>;</span><br><span class="line">	q[tail] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (head &lt; tail &amp;&amp; head 与 head + <span class="number">1</span> 的关系满足你推出的式子) head++;</span><br><span class="line">		dp[i] = ...;</span><br><span class="line">		<span class="keyword">while</span> (head &lt; tail &amp;&amp; tail不可能成为决策点(用<span class="built_in">K</span>(i, q[tail - <span class="number">1</span>]) 和 <span class="built_in">K</span>(q[tail - <span class="number">1</span>], q[tail])的大小关系)) tail--;</span><br><span class="line">		q[++tail] = i; <span class="comment">//不要忘记。。。</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*单调栈*/</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h3><p>首先说明：其实所学内容<strong>并非高级搜索</strong>，而且我也不是十分赞同这个名字，但是为了与gm所讲的内容大致合拍，我使用了这个标题。 <br/><br>我认为这些搜索算法应该分为<strong>基于合理预判的贪心性搜索算法</strong>、<strong>对于可不完全合并性题目的折半搜索</strong>，和<strong>已知明确终态的双向搜索</strong><br/><br>名字取得有点儿奇怪，但他们的本质的确如此。<br/><br>因而，总结的逻辑也出来了。</p>
<h4 id="基于合理预判的贪心性搜索算法"><a href="#基于合理预判的贪心性搜索算法" class="headerlink" title="基于合理预判的贪心性搜索算法"></a>基于合理预判的贪心性搜索算法</h4><p>忽略掉<strong>iddfs</strong>，它只不过是应付那些不用<strong>idAstar</strong>就能水过去的题目而已了。说白了，就是个低配版本的<strong>idAstar</strong><br/><br>所以，总结<strong>Astar</strong>和<strong>idAstar</strong>即可。关系其实和<strong>bfs</strong>和<strong>dfs</strong>差不多<br/><br>分开写也没必要。。。<br/><br>所谓<strong>基于合理预判</strong>，其实就是指的算法中的<strong>h()<strong>函数。h()函数满足一个要求 $h(x) \leq f(x)$ 即估计值要小于实际的权值。<br/><br>简单说一下：假如没有遵循这个原则，可以预见到某些最优状态将会一直被压在队底而弹不出来，导致扩展出来的路径并非最优解。<br/><br>所以，写一个比较好的估价函数是整个算法的关键。而且估价函数的值越接近实际值，算法的效率越高。<br/><br>估价函数的值可以定义为</strong>与目标状态不同点的个数</strong> 或是 <strong>不同点之间的距离</strong>。<br/><br>给出两种算法的伪代码:<br/><br><strong>Astar</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">state</span> &#123;</span><br><span class="line">	<span class="type">int</span> g, h;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">H</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">return</span> 估价函数;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span> &lt; (node other) <span class="type">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (g + h) &gt; (other.g + other.h);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Astar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	q.<span class="built_in">push</span>(s);</span><br><span class="line">	<span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		state u = q.<span class="built_in">top</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span> (达到目标状态) &#123;</span><br><span class="line">			<span class="keyword">return</span> ...;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (每一个分支) &#123;</span><br><span class="line">			state v = ...;</span><br><span class="line">			q.<span class="built_in">push</span>(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>idAstar</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">H</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> 估价函数;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (...) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">idAstar</span><span class="params">(<span class="type">int</span> step, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">H</span>() + step &gt; limit) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">Check</span>()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (每一个分支) &#123;</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">idAstar</span>(step + <span class="number">1</span>, limit)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="对于可不完全合并性题目的折半搜索"><a href="#对于可不完全合并性题目的折半搜索" class="headerlink" title="对于可不完全合并性题目的折半搜索"></a>对于可不完全合并性题目的折半搜索</h4><blockquote>
<p>在一般情况下，你会算出暴力的时间复杂度在 $2^40$ 左右。。。</p>
</blockquote>
<p>折半搜索可分为<strong>方程模型</strong>和<strong>选择模型</strong>，<strong>方程模型</strong>一般可以将式子拆成等价的两边，在集合一半的范围类进行搜索，在此基础对两个结果集合合并(不完全合并)，从而减少时间复杂度。<strong>选择模型</strong>思路也大致类似.<br/></p>
<p>伪代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span>* ans, <span class="type">int</span>&amp; size, <span class="type">int</span> now, <span class="type">int</span> sum, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (now &gt; limit) &#123;</span><br><span class="line">        ans[++size] = sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum + p[now] &lt;= m)</span><br><span class="line">        <span class="built_in">dfs</span>(ans, size, now + <span class="number">1</span>, ..., limit);</span><br><span class="line">    <span class="built_in">dfs</span>(ans, size, now + <span class="number">1</span>, sum, limit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(lans, cnt1, <span class="number">1</span>, <span class="number">0</span>, n / <span class="number">2</span>);</span><br><span class="line"><span class="built_in">dfs</span>(rans, cnt2, n / <span class="number">2</span> + <span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line"><span class="built_in">sort</span>(rans + <span class="number">1</span>, rans + <span class="number">1</span> + cnt2);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) &#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="built_in">upper_bound</span>(rans + <span class="number">1</span>, rans + <span class="number">1</span> + cnt2, m - lans[i]) - rans - <span class="number">1</span>;</span><br><span class="line">    ans += sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="已知明确终态的双向搜索"><a href="#已知明确终态的双向搜索" class="headerlink" title="已知明确终态的双向搜索"></a>已知明确终态的双向搜索</h4><p>使用前提是有明确的终态。<br/><br>那么可以从起点和终点同时开始搜索，在理论上可以将搜索树减少。<br/><br>实现与bfs相似:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	s.opt = <span class="number">1</span>, t.opt = <span class="number">0</span>;</span><br><span class="line">	q.<span class="built_in">push</span>(s);</span><br><span class="line">	q.<span class="built_in">push</span>(t);</span><br><span class="line">	<span class="type">int</span> ss = p.<span class="built_in">hash</span>(s.m), tt = p.<span class="built_in">hash</span>(t.m);</span><br><span class="line">	ans[s.opt][ss] = <span class="number">0</span>;</span><br><span class="line">	ans[t.opt][tt] = <span class="number">0</span>;</span><br><span class="line">	vis[s.opt][ss] = <span class="number">1</span>;</span><br><span class="line">	vis[t.opt][tt] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		node u = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="type">int</span> now = p.<span class="built_in">hash</span>(u.m);</span><br><span class="line">		<span class="keyword">if</span> (vis[!u.opt][now] == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> ans[!u.opt][now] + ans[u.opt][now];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> nx = u.x + dx[i];</span><br><span class="line">			<span class="type">int</span> ny = u.y + dy[i];</span><br><span class="line">			<span class="keyword">if</span> (nx &lt; <span class="number">1</span> || nx &gt; <span class="number">3</span> || ny &lt; <span class="number">1</span> || ny &gt; <span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line">			node v;</span><br><span class="line">			v.<span class="built_in">coopy</span>(u);</span><br><span class="line">			v.x = nx, v.y = ny;</span><br><span class="line">			<span class="built_in">swap</span>(v.m[nx][ny], v.m[u.x][u.y]);</span><br><span class="line">			<span class="type">int</span> tmp = p.<span class="built_in">hash</span>(v.m);</span><br><span class="line">			<span class="keyword">if</span> (vis[v.opt][tmp] == <span class="number">0</span>) &#123;</span><br><span class="line">				vis[v.opt][tmp] = <span class="number">1</span>;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">				ans[v.opt][tmp] = v.step;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>终究是写完了。。。<br/><br>如有不妥当之处，还请各位路过高手不惜赐教。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>搜索</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」斜率优化dp</title>
    <url>/2021/02/03/2021-02-03-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>斜率优化简单总结</p>
</blockquote>
<span id="more"></span>

<h2 id="优化原理"><a href="#优化原理" class="headerlink" title="优化原理"></a>优化原理</h2><p>斜率优化基于单调队列&#x2F;单调栈。<br>可以再 $O(1)$ 的时间复杂度内找到最优的状态。    </p>
<h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><p>以<a href="https://www.luogu.com.cn/problem/CF311B">Cats Transport</a>一题为例。<br>首先设：<br>$d[i] &#x3D; d[i - 1] + x$(即当前山与第一号山的距离)<br>$a[i] &#x3D; t - d[h]$(能接到$i$号猫的最早出发时间)<br>$sum[i] &#x3D; sum[i - 1] + a[i]$($a[]$的前缀和)<br>可以得到方程:<br>$$dp_{i,j} &#x3D; min_{0 &lt; k} ^{j-1}(dp_{i-1,k} + (j - k) * a_j - sum_j + sum_k)$$<br>时间复杂度为$pm^2$。<br><del>亲测30pts</del><br>那么导致时间复杂度增高的原因是在寻找最优的$k$时多跑了一重循环。<br>尝试去掉这重循环。。。<br>将原式子展开可以有:<br>$$dp_{i,j} &#x3D; dp_{i-1,k} + (j - k) * a_j - sum_j + sum_k$$<br>假设有$k_1$、$k_2$两个状态点, $k_2$在$k_1$后，且$k_2$比$k_1$更优。<br>则可以知道:<br>$$dp_{i-1,{k_1}} + (j - k_1) * a_j - sum_j + sum_{k_1} \geq dp_{i-1,{k_2}} + (j - k_2) * a_j - sum_j + sum_{k_2}$$<br>化简:<br>$$dp_{i-1,{k_1}} + (j - k_1) * a_j + sum_{k_1} \geq dp_{i-1,{k_2}} + (j - k_2) * a_j  + sum_{k_2}$$<br>将带有$i$的和没有的整理得：<br>$$ (dp_{i-1,{k_2}} + sum_{k_2}) - (dp_{i-1,{k_1}} + sum_{k_1}) \leq a_j \times (k_2 - k_1)$$<br>因为$k_2$在$k_1$后，所以$(k_2 - k_1) \geq 1$。<br>将$(k_2 - k_1)$移到左边:<br>$$ \frac{(dp_{i-1,{k_2}} + sum_{k_2}) - (dp_{i-1,{k_1}} + sum_{k_1})}{(k_2 - k_1)} \leq a_j$$<br>将$(dp_{i-1,k2},k_2)$看做一个点，可知此题应维护一个下凸壳。<br>于是套上<a href="https://chenjg41.gitee.io/dp/2021/02/03/%E6%96%9C%E4%BC%98%E6%9D%BF%E5%AD%90/">板子</a>即可。   </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, p;</span><br><span class="line"><span class="type">int</span> d[MAXN], sum[MAXN], a[MAXN], dp[MAXP][MAXN];</span><br><span class="line"><span class="type">int</span> head, tail, q[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Y</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> dp[id - <span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">X</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">K</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">double</span>(<span class="built_in">Y</span>(id, j) - <span class="built_in">Y</span>(id, i)) / (<span class="built_in">X</span>(j) - <span class="built_in">X</span>(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">		d[i] = d[i - <span class="number">1</span>] + x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, h, t; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;h, &amp;t);</span><br><span class="line">		a[i] = t - d[h];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span> (a + <span class="number">1</span>, a + <span class="number">1</span> + m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">		sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">		head = <span class="number">1</span>, tail = <span class="number">1</span>, q[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">K</span>(i, q[head], q[head + <span class="number">1</span>]) &lt;= a[j] &amp;&amp; head &lt; tail) head++;</span><br><span class="line">			<span class="type">int</span> k = q[head];</span><br><span class="line">			dp[i][j] = dp[i - <span class="number">1</span>][k] + (j - k) * a[j] - sum[j] + sum[k];</span><br><span class="line">			<span class="keyword">while</span> (<span class="built_in">K</span>(i, q[tail - <span class="number">1</span>], q[tail]) &gt;= <span class="built_in">K</span>(i, q[tail - <span class="number">1</span>], j)) tail--;</span><br><span class="line">			q[++tail] = j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, dp[p][m]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」秦始皇的国道</title>
    <url>/2021/03/12/2021-03-12-%E7%A7%A6%E5%A7%8B%E7%9A%87%E7%9A%84%E5%9B%BD%E9%81%93/</url>
    <content><![CDATA[<blockquote>
<p>最小生成树</p>
</blockquote>
<span id="more"></span>   

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>要使$A&#x2F;B$最大化。就要想办法让$A$尽量大，同时让$B$变小。    </p>
<p>先考虑让$B$变小。那么可以想到在保证连通性的情况下<strong>最小生成树</strong>的权长肯定最小。</p>
<p>所以先跑一遍<code>Kruskal</code>或<code>Prime</code>求出最小生成树。    </p>
<p>然后枚举最小生成树上的边，考虑删掉，即在余下的边上换上一条<strong>魔道</strong>。</p>
<p><img data-src="http://61.186.173.89:2019/2021/03/12/fdd0138a0639d.png" alt="graph.png"></p>
<p>如果最小生成树如上图。    </p>
<p>那么删掉一条边之后，它会分裂成两棵子树。    </p>
<p>为了使它联通并让魔道两边的城市的人口最多。则要在两棵子树中分别找到人口最多的那个节点，再将找到的两个节点连起来作为魔道，去更新答案即可。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = MAXN * MAXN + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> t, n, m, fa[MAXN], u[MAXN], v[MAXN], cnt;</span><br><span class="line"><span class="type">double</span> len, ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">double</span> x, y;</span><br><span class="line">	<span class="type">int</span> p;</span><br><span class="line">&#125; c[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> u, v;</span><br><span class="line">	<span class="type">double</span> w;</span><br><span class="line">	<span class="built_in">edge</span>()&#123;&#125;</span><br><span class="line">	<span class="built_in">edge</span>(<span class="type">int</span> U, <span class="type">int</span> V, <span class="type">double</span> W) &#123;</span><br><span class="line">		u = U, v = V, w = W;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; dis[MAXM];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge x, edge y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.w &lt; y.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dist</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>((c[x].x - c[y].x) * (c[x].x - c[y].x) + (c[x].y - c[y].y) * (c[x].y - c[y].y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (fa[v] == v) <span class="keyword">return</span> fa[v];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="built_in">FindSet</span>(u), y = <span class="built_in">FindSet</span>(v);</span><br><span class="line">	<span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	fa[x] = y;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">	<span class="built_in">sort</span> (dis + <span class="number">1</span>, dis + <span class="number">1</span> + m, cmp);</span><br><span class="line">	cnt = <span class="number">0</span>, len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">UnionSet</span>(dis[i].u, dis[i].v)) &#123;</span><br><span class="line">			len += dis[i].w, u[++cnt] = dis[i].u, v[cnt] = dis[i].v;</span><br><span class="line">			G[dis[i].u].<span class="built_in">push_back</span>(dis[i].v), G[dis[i].v].<span class="built_in">push_back</span>(dis[i].u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">	vis[u] = <span class="number">1</span>;</span><br><span class="line">	val = <span class="built_in">max</span>(c[u].p, val);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (vis[v] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(v, val);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">		m = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%lf %lf %d&quot;</span>, &amp;c[i].x, &amp;c[i].y, &amp;c[i].p);</span><br><span class="line">			G[i].<span class="built_in">clear</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">				dis[++m] = <span class="built_in">edge</span>(i, j, <span class="built_in">dist</span>(i, j));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">Kruskal</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">			<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">			vis[v[i]] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> a = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(u[i], tmp);</span><br><span class="line">			a += tmp;</span><br><span class="line">			<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">			vis[u[i]] = <span class="number">1</span>;</span><br><span class="line">			tmp = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(v[i], tmp);</span><br><span class="line">			a += tmp;</span><br><span class="line">			<span class="type">double</span> now = a * <span class="number">1.0</span> / (len - <span class="built_in">dist</span>(u[i], v[i]));</span><br><span class="line">			ans = <span class="built_in">max</span>(ans, now);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%.2lf\n&quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」Tarjan</title>
    <url>/2021/04/10/2021-04-10-Tarjan/</url>
    <content><![CDATA[<p>一些有用的模板</p>
<span id="more"></span>

<h3 id="割点割边"><a href="#割点割边" class="headerlink" title="割点割边"></a>割点割边</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, bans, pans, dfn[MAXN], low[MAXN], root;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> b[MAXN][MAXN], p[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">	dfn[u] = low[u] = ++tot;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;	</span><br><span class="line">			<span class="built_in">tarjan</span> (v, u);</span><br><span class="line">			low[u] = <span class="built_in">min</span> (low[u], low[v]);</span><br><span class="line">			<span class="keyword">if</span> (low[v] &gt; dfn[u]) &#123;</span><br><span class="line">				<span class="keyword">if</span> (b[u][v] || b[v][u]) <span class="keyword">continue</span>;</span><br><span class="line">				b[u][v] = b[v][u] = <span class="number">1</span>;</span><br><span class="line">				bans++;</span><br><span class="line">			&#125; </span><br><span class="line">			<span class="keyword">if</span> (low[v] &gt;= dfn[u]) &#123;</span><br><span class="line">				cnt++;</span><br><span class="line">				<span class="keyword">if</span> ((cnt &lt;= <span class="number">1</span> &amp;&amp; u == root) || p[u]) <span class="keyword">continue</span>;</span><br><span class="line">				p[u] = <span class="number">1</span>;</span><br><span class="line">				pans++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			low[u] = <span class="built_in">min</span> (low[u], dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		G[u].<span class="built_in">push_back</span>(v), G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">		root = i;</span><br><span class="line">		<span class="built_in">tarjan</span> (i, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n%d\n&quot;</span>, pans, bans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双连通分量"><a href="#双连通分量" class="headerlink" title="双连通分量"></a>双连通分量</h3><h4 id="点"><a href="#点" class="headerlink" title="点"></a>点</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, dfn[MAXN], low[MAXN], tot, cnt;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line">stack&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; s;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; dcc[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">	dfn[u] = low[u] = ++tot;</span><br><span class="line">	<span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">			s.<span class="built_in">push</span>(<span class="built_in">make_pair</span> (u, v));</span><br><span class="line">			<span class="built_in">tarjan</span> (v, u);</span><br><span class="line">			low[u] = <span class="built_in">min</span> (low[u], low[v]);</span><br><span class="line">			<span class="keyword">if</span> (low[v] &gt;= dfn[u]) &#123;</span><br><span class="line">				cnt++;</span><br><span class="line">				pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; y;</span><br><span class="line">				<span class="keyword">do</span> &#123;</span><br><span class="line">					y = s.<span class="built_in">top</span>();</span><br><span class="line">					s.<span class="built_in">pop</span>();</span><br><span class="line">					dcc[cnt].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span> (<span class="built_in">min</span> (y.first, y.second), <span class="built_in">max</span> (y.first, y.second)));</span><br><span class="line">				&#125; <span class="keyword">while</span> (y.first != u || y.second != v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			low[u] = <span class="built_in">min</span> (low[u], dfn[v]);</span><br><span class="line">			<span class="keyword">if</span> (dfn[u] &gt;= dfn[v]) &#123;</span><br><span class="line">				s.<span class="built_in">push</span>(<span class="built_in">make_pair</span> (u, v));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dcc[x].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dcc[x][i] &lt; dcc[y][i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (dcc[x][i] &gt; dcc[y][i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		G[u].<span class="built_in">push_back</span>(v), G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">		<span class="built_in">tarjan</span> (i, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">		<span class="built_in">sort</span> (dcc[i].<span class="built_in">begin</span>(), dcc[i].<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">if</span> (dcc[i].<span class="built_in">size</span>() &gt; dcc[id].<span class="built_in">size</span>()) &#123;</span><br><span class="line">			id = i;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dcc[i].<span class="built_in">size</span>() == dcc[id].<span class="built_in">size</span>() &amp;&amp; <span class="built_in">check</span> (i, id)) &#123;</span><br><span class="line">			id = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n%d\n&quot;</span>, cnt, dcc[id].<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dcc[id].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d %d\n&quot;</span>, dcc[id][i].first, dcc[id][i].second);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="边"><a href="#边" class="headerlink" title="边"></a>边</h4><h5 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, dfn[MAXN], low[MAXN], root, ans, dcc, deg[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> b[MAXN][MAXN], p[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">	dfn[u] = low[u] = ++tot;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;	</span><br><span class="line">			<span class="built_in">tarjan</span> (v, u);</span><br><span class="line">			low[u] = <span class="built_in">min</span> (low[u], low[v]);</span><br><span class="line">			<span class="keyword">if</span> (low[v] &gt; dfn[u]) &#123;</span><br><span class="line">				<span class="keyword">if</span> (b[u][v] || b[v][u]) <span class="keyword">continue</span>;</span><br><span class="line">				b[u][v] = b[v][u] = <span class="number">1</span>;</span><br><span class="line">			&#125; </span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			low[u] = <span class="built_in">min</span> (low[u], dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	vis[u] = dcc;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (vis[v] || b[u][v]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span> (v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="keyword">if</span> (p[u][v] || p[v][u]) <span class="keyword">continue</span>;</span><br><span class="line">		p[u][v] = p[v][u] = <span class="number">1</span>;</span><br><span class="line">		G[u].<span class="built_in">push_back</span>(v), G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">		<span class="built_in">tarjan</span> (i, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">		dcc++;</span><br><span class="line">		<span class="built_in">dfs</span> (i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="type">int</span> v = G[i][j];</span><br><span class="line">			<span class="keyword">if</span> (vis[i] != vis[v]) &#123;</span><br><span class="line">				deg[vis[v]]++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= dcc; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (deg[i] == <span class="number">1</span>) ans++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, (ans + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="tarjan"><a href="#tarjan" class="headerlink" title="tarjan"></a>tarjan</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, dfn[MAXN], low[MAXN], root, ans, dcc, deg[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> b[MAXN][MAXN], p[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> vis[MAXN], s[MAXN], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">	dfn[u] = low[u] = ++tot;</span><br><span class="line">	s[++top] = u;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;	</span><br><span class="line">			<span class="built_in">tarjan</span> (v, u);</span><br><span class="line">			low[u] = <span class="built_in">min</span> (low[u], low[v]);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			low[u] = <span class="built_in">min</span> (low[u], dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (low[u] == dfn[u]) &#123;</span><br><span class="line">		<span class="type">int</span> v;</span><br><span class="line">		dcc++;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			v = s[top--];</span><br><span class="line">			vis[v] = dcc;</span><br><span class="line">		&#125; <span class="keyword">while</span> (v != u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="keyword">if</span> (p[u][v] || p[v][u]) <span class="keyword">continue</span>;</span><br><span class="line">		p[u][v] = p[v][u] = <span class="number">1</span>;</span><br><span class="line">		G[u].<span class="built_in">push_back</span>(v), G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">		<span class="built_in">tarjan</span> (i, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="type">int</span> v = G[i][j];</span><br><span class="line">			<span class="keyword">if</span> (vis[i] != vis[v]) &#123;</span><br><span class="line">				deg[vis[v]]++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= dcc; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (deg[i] == <span class="number">1</span>) ans++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, (ans + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」平面最近点对</title>
    <url>/2021/05/14/2021-05-13-%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/</url>
    <content><![CDATA[<p>分治</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n;</span><br><span class="line"><span class="type">double</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, z;</span><br><span class="line">&#125; p[MAXN * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span> <span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dis</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p[a].z == p[b].z) <span class="keyword">return</span> INF;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span> (<span class="built_in">double</span>(p[a].x - p[b].x) * (p[a].x - p[b].x) + <span class="built_in">double</span>(p[a].y - p[b].y) * (p[a].y - p[b].y)); <span class="comment">//double 不能丢</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Dist</span> <span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == r) <span class="keyword">return</span> INF;</span><br><span class="line">	<span class="keyword">if</span> (r - l == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">dis</span> (l, r);</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="type">double</span> tmp = <span class="built_in">min</span> (<span class="built_in">Dist</span> (l, mid), <span class="built_in">Dist</span> (mid, r));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = mid - <span class="number">1</span>; i &gt;= l; i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p[mid].x - p[i].x + eps &gt; tmp) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = mid + <span class="number">1</span>; j &lt;= r; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p[j].x - p[i].x + eps &gt; tmp) <span class="keyword">break</span>;</span><br><span class="line">			tmp = <span class="built_in">min</span> (tmp, <span class="built_in">dis</span> (i, j));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">			p[i].z = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;p[i + n].x, &amp;p[i + n].y);</span><br><span class="line">			p[i + n].z = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span> (p + <span class="number">1</span>, p + <span class="number">1</span> + <span class="number">2</span> * n, cmp);</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%.3lf\n&quot;</span>, <span class="built_in">Dist</span> (<span class="number">1</span>, <span class="number">2</span> * n));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>分治</category>
      </categories>
      <tags>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」ABC209</title>
    <url>/2021/06/19/2021-06-19-Atcoder%5Babc209%5DSummary/</url>
    <content><![CDATA[<blockquote>
<p>赛后总结</p>
</blockquote>
<span id="more"></span>

<p>其实题目都不算难，但是比赛的时候都只想了一半的正解。考虑也不周全，T3还把数组开小 <code>Re</code> 了一发。<br>要多见见题目，思维要开阔一点。    </p>
<h3 id="A-Counting"><a href="#A-Counting" class="headerlink" title="A Counting"></a>A Counting</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给出<code>A</code>, <code>B</code>, 求 $[A, B]$ 中整数元素个数。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; ((b - a + <span class="number">1</span> &lt; <span class="number">0</span>) ? <span class="number">0</span> : (b - a + <span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h3 id="B-Can-you-buy-them-all"><a href="#B-Can-you-buy-them-all" class="headerlink" title="B Can you buy them all?"></a>B Can you buy them all?</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给出一堆数，下标为偶数的数的数值均减一，询问总和与<code>x</code>的大小关系。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>按题意模拟即可。    </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x, n, sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, y; i &lt;= n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; y;</span><br><span class="line">		sum += y;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) sum--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sum &lt;= x) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="built_in">printf</span> (<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C-Not-Equal"><a href="#C-Not-Equal" class="headerlink" title="C Not Equal"></a>C Not Equal</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给出<code>C</code>数列，构造<code>A</code>数列，满足<code>A</code>中元素互不相同，且<code>a[i] &lt;= c[i]</code>。</p>
<p>求<code>A</code>数列的个数。        </p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>针对于每个<code>a[i]</code>，若不考虑相同元素，有<code>a[i]</code>种选择，考虑相同元素，即只有<code>a[i] - k</code>种选择，<code>k</code>是比<code>c[i]</code>小的元素个数。    </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, c[MAXN];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; c[i];</span><br><span class="line">	&#125;</span><br><span class="line">	ans = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">sort</span> (c + <span class="number">1</span>, c + <span class="number">1</span> + n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		ans = (ans % Mod * (c[i] - i + <span class="number">1</span>) % Mod) % Mod; </span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; (ans % Mod) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D-Collision"><a href="#D-Collision" class="headerlink" title="D Collision"></a>D Collision</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>两个人在树上走，询问距离是奇数是偶数。    </p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>lca板题。        </p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>考试</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」Atcoder ABC Unfair Nim</title>
    <url>/2021/07/13/2021-07-13-Unfair%20Nim/</url>
    <content><![CDATA[<p>题解？</p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>两个人玩 <strong>石头</strong> 。<br>规则自已看。。。<br>然后可以知道简化后就是给你两个数的和，与异或和，问拆分方案。<br>即是:<br>已知<br>$a + b$ 和 $a \bigoplus b$.求与 小于等于$x_1$的最大的 $a$.    </p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>因为已知 $a + b$ 和 $a \bigoplus b$.<br>所以可知 $a &amp; b$    </p>
<p>$a &amp; b &#x3D; \frac{a+b-a \bigoplus b}{2}$        </p>
<p>然后就完了。    </p>
<p>记 $x &#x3D; a &amp; b, y &#x3D; a \bigoplus b, tmp &#x3D; x$</p>
<p>$tmp$ 是$a$最小值。        </p>
<p>那么把$x,y$都转二进制。    </p>
<p>考虑每一位。    </p>
<p>分类讨论一下：    </p>
<p>下面的$x,y$都表示$x,y$的二进制下同一位</p>
<p>$1: x &#x3D; 1, y &#x3D; 1$        </p>
<p>这种情况是不合法的，直接判$-1$.    </p>
<p>$2:x &#x3D; 1, y &#x3D; 0$        </p>
<p>两个数都为1.</p>
<p>$tmp +&#x3D; (1 &lt;&lt; pos)$    </p>
<p>$3:x &#x3D; 0,y &#x3D; 0$    </p>
<p>不干啥。    </p>
<p>$4:x &#x3D; 0,y &#x3D; 1$</p>
<p>因为要使$a$最大，所以如果$tmp + (1 &lt;&lt; pos) \leq x_1$        </p>
<p>就完了。    </p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">45</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, x, y, all, m, pos, tmp, nx, ny, delta;</span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN];</span><br><span class="line"><span class="type">bool</span> satis[MAXN], vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%lld %lld&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">	m = x + y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>, k; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;k);</span><br><span class="line">		all ^= k;</span><br><span class="line">	&#125;</span><br><span class="line">	delta = (m - all);</span><br><span class="line">	<span class="keyword">if</span> (delta &lt; <span class="number">0</span> || delta % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	tmp = delta &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	delta &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="type">int</span> b = (delta &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> a = (all &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (b == <span class="number">1</span> &amp;&amp; a == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; (tmp | (<span class="number">1ll</span> &lt;&lt; i)) &lt;= x) &#123;</span><br><span class="line">			tmp |= (<span class="number">1ll</span> &lt;&lt; i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; tmp || tmp == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, x - tmp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>位运算</tag>
        <tag>乱搞</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」宠物收留所 &amp; GSS6</title>
    <url>/2021/08/05/2021-08-05-%E5%AE%A0%E7%89%A9%E6%94%B6%E7%95%99%E6%89%80&amp;GSS6%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<span id="more"></span>



<h2 id="At-the-Beginning"><a href="#At-the-Beginning" class="headerlink" title="At the Beginning"></a>At the Beginning</h2><p><del>写平衡树有点想吐，过来码两篇题解</del></p>
<p>最近写题写得有点儿乱，整理一下。。。</p>
<h2 id="宠物收留所"><a href="#宠物收留所" class="headerlink" title="宠物收留所"></a>宠物收留所</h2><p><a href="https://loj.ac/p/10144">link</a>   </p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>乍一看，好像要两个平衡树。    </p>
<p>但仔细读题可以发现：</p>
<blockquote>
<p>在任意时刻，平衡树里只会全部保留其中一类（人 或 宠物） 那么用一颗平衡树维护即可</p>
</blockquote>
<p>并且对于人和动物，操作都一样。    </p>
<p>具体如下：</p>
<blockquote>
<p>若当前是人，如果没有宠物，直接加入平衡树，否则就直接查询前驱|后继统计即可，宠物同理</p>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码略丑。。。<code>fhq_treap</code>跑得很慢。。。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, tot, root, tmp1, tmp2, tmp3, ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, val, key, siz;</span><br><span class="line">&#125; s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    s[++tot].val = val, s[tot].key = <span class="built_in">rand</span> (), s[tot].siz = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    s[p].siz = s[s[p].l].siz + s[s[p].r].siz + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> val, <span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">0</span>) &#123; x = y = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (s[p].val &lt;= val) &#123;</span><br><span class="line">        x = p, <span class="built_in">split</span> (s[p].r, val, s[p].r, y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = p, <span class="built_in">split</span> (s[p].l, val, x, s[p].l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span> (p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">    <span class="keyword">if</span> (s[x].key &lt; s[y].key) &#123;</span><br><span class="line">        s[x].r = <span class="built_in">merge</span> (s[x].r, y);</span><br><span class="line">        <span class="built_in">push_up</span>(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s[y].l = <span class="built_in">merge</span> (x, s[y].l);</span><br><span class="line">        <span class="built_in">push_up</span>(y);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span> (root, val, tmp1, tmp2);</span><br><span class="line">    root = <span class="built_in">merge</span> (<span class="built_in">merge</span> (tmp1, <span class="built_in">newnode</span> (val)), tmp2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span> (root, val, tmp1, tmp3);</span><br><span class="line">    <span class="built_in">split</span> (tmp1, val - <span class="number">1</span>, tmp1, tmp2);</span><br><span class="line">    tmp2 = <span class="built_in">merge</span> (s[tmp2].l, s[tmp2].r);</span><br><span class="line">    root = <span class="built_in">merge</span> (<span class="built_in">merge</span>(tmp1, tmp2), tmp3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">queryrnk</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span> (root, val - <span class="number">1</span>, tmp1, tmp2);</span><br><span class="line">    <span class="type">int</span> res = s[tmp1].siz + <span class="number">1</span>;</span><br><span class="line">    root = <span class="built_in">merge</span> (tmp1, tmp2);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querykth</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[s[p].l].siz &gt;= k) &#123;</span><br><span class="line">            p = s[p].l;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[s[p].l].siz + <span class="number">1</span> == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        k -= s[s[p].l].siz + <span class="number">1</span>, p = s[p].r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querypre</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span> (root, val - <span class="number">1</span>, tmp1, tmp2);</span><br><span class="line">    <span class="keyword">if</span> (tmp1 == <span class="number">0</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="type">int</span> res = s[<span class="built_in">querykth</span> (tmp1, s[tmp1].siz)].val;</span><br><span class="line">    root = <span class="built_in">merge</span> (tmp1, tmp2);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querynxt</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span> (root, val, tmp1, tmp2);</span><br><span class="line">    <span class="keyword">if</span> (tmp2 == <span class="number">0</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="type">int</span> res = s[<span class="built_in">querykth</span> (tmp2, <span class="number">1</span>)].val;</span><br><span class="line">    root = <span class="built_in">merge</span> (tmp1, tmp2);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Abs</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; <span class="number">0</span>) ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> cnt1, cnt2;</span><br><span class="line">    cnt1 = cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="type">int</span> opt, k;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;opt, &amp;k);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt2 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">insert</span> (k);</span><br><span class="line">                cnt1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> pre = <span class="built_in">querypre</span> (k);</span><br><span class="line">                <span class="type">int</span> nxt = <span class="built_in">querynxt</span> (k);</span><br><span class="line">                <span class="type">int</span> val = (<span class="built_in">Abs</span> (pre - k) &lt;= <span class="built_in">Abs</span> (nxt - k)) ? pre : nxt;</span><br><span class="line">                <span class="built_in">remove</span> (val);</span><br><span class="line">                ans = (ans + <span class="built_in">Abs</span> (val - k)) % Mod;</span><br><span class="line">                cnt2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt1 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">insert</span> (k);</span><br><span class="line">                cnt2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> pre = <span class="built_in">querypre</span> (k);</span><br><span class="line">                <span class="type">int</span> nxt = <span class="built_in">querynxt</span> (k);</span><br><span class="line">                <span class="type">int</span> val = (<span class="built_in">Abs</span> (pre - k) &lt;= <span class="built_in">Abs</span> (nxt - k)) ? pre : nxt;</span><br><span class="line">                <span class="built_in">remove</span> (val);</span><br><span class="line">                ans = (ans + <span class="built_in">Abs</span> (val - k)) % Mod;</span><br><span class="line">                cnt1--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf (&quot;ans = %d\n&quot;, ans);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h2 id="GSS-6-Can-you-answer-these-queries-VI"><a href="#GSS-6-Can-you-answer-these-queries-VI" class="headerlink" title="GSS 6 - Can you answer these queries VI"></a>GSS 6 - Can you answer these queries VI</h2><p><a href="http://222.180.160.110:1024/problem/10892">link</a></p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>其实就是个最大字段和问题，和<a href="http://222.180.160.110:1024/problem/7078">GSS1</a>类似。    </p>
<p>关于线段树维护最大字段和的方式再写一遍吧。       </p>
<blockquote>
<p><a href="https://imgtu.com/i/feJbee"><img data-src="https://z3.ax1x.com/2021/08/05/feJbee.png" alt="..."></a></p>
<p>看图应该可以理解，即是对于当前区间，它的最大字段和可以由三种方式去更新：    </p>
<ul>
<li><p>当前节点的左儿子的最大字段和</p>
</li>
<li><p>当前节点的右儿子的最大字段和</p>
</li>
<li><p>当前节点的左儿子的右端连续最大和加右儿子的左端连续最大和</p>
</li>
</ul>
<p>那么再去多维护两个值即可(<code>lmax</code>, <code>rmax</code>)</p>
<p><a href="https://imgtu.com/i/feNC5j"><img data-src="https://z3.ax1x.com/2021/08/05/feNC5j.png" alt="feNC5j.png"></a></p>
<p>对于维护<code>lmax</code>，有两种方式去更新：        </p>
<ul>
<li>当前节点的左儿子的<code>lmax</code>        <ul>
<li>当前节点的左儿子的区间和加当前节点的右儿子的<code>lmax</code></li>
</ul>
</li>
</ul>
<p>对于<code>rmax</code>也同理       </p>
<p><code>push_up</code>的代码不难写出       </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	s[p].sum = s[p * <span class="number">2</span>].sum + s[p * <span class="number">2</span> + <span class="number">1</span>].sum;</span><br><span class="line">	s[p].lmax = <span class="built_in">max</span>(s[p * <span class="number">2</span>].lmax, s[p * <span class="number">2</span>].sum + s[p * <span class="number">2</span> + <span class="number">1</span>].lmax);</span><br><span class="line">	s[p].rmax = <span class="built_in">max</span>(s[p * <span class="number">2</span> + <span class="number">1</span>].rmax, s[p * <span class="number">2</span> + <span class="number">1</span>].sum + s[p * <span class="number">2</span>].rmax);</span><br><span class="line">	s[p].dat = <span class="built_in">max</span>(s[p * <span class="number">2</span>].dat, <span class="built_in">max</span>(s[p * <span class="number">2</span> + <span class="number">1</span>].dat, s[p * <span class="number">2</span>].rmax + s[p * <span class="number">2</span> + <span class="number">1</span>].lmax));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>然后GSS1就可以顺利AC,GSS6也同理，只是将线段树的操作搬到了平衡树上。</p>
<p><code>push_up</code>的代码变成    </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	s[p].siz = s[s[p].l].siz + s[s[p].r].siz + <span class="number">1</span>;</span><br><span class="line">	s[p].sum = s[s[p].l].sum + s[s[p].r].sum + s[p].val;</span><br><span class="line">	s[p].pre = <span class="built_in">max</span> (s[s[p].l].pre, s[s[p].l].sum + s[p].val + s[s[p].r].pre);</span><br><span class="line">	s[p].nxt = <span class="built_in">max</span> (s[s[p].r].nxt, s[s[p].r].sum + s[p].val + s[s[p].l].nxt);</span><br><span class="line">	s[p].maxl = <span class="built_in">max</span> (<span class="built_in">max</span> (s[s[p].l].maxl, s[s[p].r].maxl), s[s[p].l].nxt + s[p].val + s[s[p].r].pre);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后需要注意的是平衡树要写成区间树，即要用下标作为分裂的标准，在线段树的基础上要加上自身的权值，且要在初始的时候塞一个空节点，权值为<code>-INF</code>。</p>
<p><code>split</code>的代码较按权值分裂略有不同。    </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> k, <span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">		x = y = <span class="number">0</span>; <span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (s[s[p].l].siz &lt; val) &#123;</span><br><span class="line">		x = p, <span class="built_in">split</span> (s[p].r, val - s[s[p].l].siz - <span class="number">1</span>, s[p].r, y);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		y = p, <span class="built_in">split</span> (s[p].l, val, x, s[p].l);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_up</span> (p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, root, tot, tmp1, tmp2, tmp3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span> &#123;</span><br><span class="line">	<span class="type">int</span> l, r, val, key, siz;</span><br><span class="line">	<span class="type">int</span> pre, nxt; <span class="comment">// 区间前(后)缀 </span></span><br><span class="line">	<span class="type">int</span> maxl, sum; <span class="comment">// 区间最大字段和 | 区间和 </span></span><br><span class="line">&#125; s[MAXN]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	tot++;</span><br><span class="line">	s[tot].sum = s[tot].maxl = s[tot].val = val, s[tot].key = <span class="built_in">rand</span> (), s[tot].siz = <span class="number">1</span>;</span><br><span class="line">	s[tot].pre = s[tot].nxt = <span class="built_in">max</span> (val, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	s[p].siz = s[s[p].l].siz + s[s[p].r].siz + <span class="number">1</span>;</span><br><span class="line">	s[p].sum = s[s[p].l].sum + s[s[p].r].sum + s[p].val;</span><br><span class="line">	s[p].pre = <span class="built_in">max</span> (s[s[p].l].pre, s[s[p].l].sum + s[p].val + s[s[p].r].pre);</span><br><span class="line">	s[p].nxt = <span class="built_in">max</span> (s[s[p].r].nxt, s[s[p].r].sum + s[p].val + s[s[p].l].nxt);</span><br><span class="line">	s[p].maxl = <span class="built_in">max</span> (<span class="built_in">max</span> (s[s[p].l].maxl, s[s[p].r].maxl), s[s[p].l].nxt + s[p].val + s[s[p].r].pre);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> val, <span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">		x = y = <span class="number">0</span>; <span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (s[s[p].l].siz &lt; val) &#123;</span><br><span class="line">		x = p, <span class="built_in">split</span> (s[p].r, val - s[s[p].l].siz - <span class="number">1</span>, s[p].r, y);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		y = p, <span class="built_in">split</span> (s[p].l, val, x, s[p].l);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_up</span> (p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">	<span class="keyword">if</span> (s[x].key &lt; s[y].key) &#123;</span><br><span class="line">		s[x].r = <span class="built_in">merge</span> (s[x].r, y);</span><br><span class="line">		<span class="built_in">push_up</span> (x);</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		s[y].l = <span class="built_in">merge</span> (x, s[y].l);</span><br><span class="line">		<span class="built_in">push_up</span> (y);</span><br><span class="line">		<span class="keyword">return</span> y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">split</span> (root, p, tmp1, tmp2);</span><br><span class="line">	root = <span class="built_in">merge</span> (<span class="built_in">merge</span> (tmp1, <span class="built_in">newnode</span> (val)), tmp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">split</span> (root, p, tmp1, tmp3);</span><br><span class="line">	<span class="built_in">split</span> (tmp1, p - <span class="number">1</span>, tmp1, tmp2);</span><br><span class="line">	tmp2 = <span class="built_in">merge</span> (s[tmp2].l, s[tmp2].r);</span><br><span class="line">	root = <span class="built_in">merge</span> (tmp1, <span class="built_in">merge</span> (tmp2, tmp3));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">split</span> (root, p, tmp1, tmp3);</span><br><span class="line">	<span class="built_in">split</span> (tmp1, p - <span class="number">1</span>, tmp1, tmp2);</span><br><span class="line">	s[tmp2].sum = s[tmp2].maxl = s[tmp2].val = val;</span><br><span class="line">	s[tmp2].pre = s[tmp2].nxt = <span class="built_in">max</span> (val, <span class="number">0</span>);</span><br><span class="line">	root = <span class="built_in">merge</span> (<span class="built_in">merge</span> (tmp1, tmp2), tmp3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span> <span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">split</span> (root, r, tmp1, tmp3);</span><br><span class="line">	<span class="built_in">split</span> (tmp1, l - <span class="number">1</span>, tmp2, tmp1);</span><br><span class="line">	<span class="type">int</span> res = s[tmp1].maxl;</span><br><span class="line">	root = <span class="built_in">merge</span> (<span class="built_in">merge</span> (tmp2, tmp1), tmp3);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">print</span> (s[p].l);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;p = %d, val = %d, l = %d, r = %d, siz = %d\n&quot;</span>, p, s[p].val, s[p].l, s[p].r, s[p].siz);</span><br><span class="line">    <span class="built_in">print</span> (s[p].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">debug</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\n----------------WAll---------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span> (root);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\n----------------WAll---------------\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	s[<span class="number">0</span>].maxl = -INF;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">		root = <span class="built_in">merge</span> (root, <span class="built_in">newnode</span> (x));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		<span class="type">char</span> opt;</span><br><span class="line">		cin &gt;&gt; opt;</span><br><span class="line">		<span class="type">int</span> l, r, p, x;</span><br><span class="line">		<span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span> : &#123;</span><br><span class="line">				<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;p, &amp;x); <span class="built_in">insert</span> (p - <span class="number">1</span>, x);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span> : &#123;</span><br><span class="line">				<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;p); <span class="built_in">remove</span> (p);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span> : &#123;</span><br><span class="line">				<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;p, &amp;x); <span class="built_in">change</span> (p, x);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span> : &#123;</span><br><span class="line">				<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r); <span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span> (l, r));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		debug ();</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>treap</category>
      </categories>
      <tags>
        <tag>treap</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」线性基</title>
    <url>/2021/05/15/2021-05-15-%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
    <content><![CDATA[<p>模板</p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">65</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BIT = <span class="number">62</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, base[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = BIT; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((<span class="number">1ll</span> &lt;&lt; i) &amp; x) &#123;</span><br><span class="line">			<span class="keyword">if</span> (base[i] == <span class="number">0</span>) &#123;</span><br><span class="line">				base[i] = x;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> x ^= base[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Maxval</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = BIT; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		res = <span class="built_in">max</span> (res, res ^ base[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">		<span class="built_in">insert</span> (x);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Maxval</span> ());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」异象石</title>
    <url>/2021/08/10/2021-08-19-%E5%BC%82%E8%B1%A1%E7%9F%B3%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>真·恶心题目, 调了两天。。。</p>
</blockquote>
<span id="more"></span>

<h2 id="异象石"><a href="#异象石" class="headerlink" title="异象石"></a>异象石</h2><p><a href="https://loj.ac/p/10132">link</a></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题即是求树上点集的最小覆盖边集合。    </p>
<p>关键即是要考虑应该选择哪些边<del>废话</del>，这道题可以看作是「SDOI2015」寻宝游戏 的题面恶心版，问题的答案即是「SDOI2015」寻宝游戏  的答案的二分之一，因为你需要回到初始点，即每条在集合里的边都要走两遍。    </p>
<p>转化后思路可以变得比较简单。    </p>
<blockquote>
<p>设当前新加入了一个点 <code>x</code>, 为了使<code>x</code>被覆盖掉，那么必定选从<code>x</code>出发到已经在已选中的路径上的距离<code>x</code>最近的点<code>y</code>(目标点)。    </p>
<p>关键是求出该目标点。    </p>
<p>画个草图(橙点是当前点<code>x</code>，红点是目标点，两个黑点分别是已插入的两个关键点<code>pre</code>, <code>nxt</code>)可以观察到：    </p>
<p><img data-src="https://pic.imgdb.cn/item/61126d2a5132923bf8adb139.png"></p>
<p>新增的路径长为$add_1 + add_2 - del$即是$Dist(x, pre) + Dist (x,nxt) - Dist (pre, nxt)$。    </p>
<p>问题即是求出<code>pre</code>和<code>nxt</code>.    </p>
<p>根据<code>dfs</code>序可知，<code>pre</code>和<code>nxt</code>分别是<code>dfn</code>与<code>dfn[x]</code>相邻的两个点。    </p>
<p>那么当当前点<code>x</code>处在最后或开头时就要再绕回开头或结尾(写得不清楚，自己理解。。。)。    </p>
<p>就完了。</p>
</blockquote>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>即是先求出所有点的<code>dfn</code>，把<code>dfn</code>围成一圈，答案是每相邻两个点的距离的和的一半。</p>
<p>然后我忘了可以用<code>set</code>，就调了两天的平衡树。。。    </p>
<p>主要是脑抽把<code>dfn</code>求错了没有发现。。。    </p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, t, st, fa[MAXN][MAXM], d[MAXN], dep[MAXN], dfn[MAXN], h[MAXN];</span><br><span class="line"><span class="type">int</span> root, tmp1, tmp2, tmp3, ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> v, w;</span><br><span class="line">    <span class="built_in">edge</span> () &#123;&#125;</span><br><span class="line">    <span class="built_in">edge</span> (<span class="type">int</span> V, <span class="type">int</span> W) &#123; v = V, w = W; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt; G[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Addedge</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    G[u].<span class="built_in">push_back</span> (<span class="built_in">edge</span> (v, w));</span><br><span class="line">    G[v].<span class="built_in">push_back</span> (<span class="built_in">edge</span> (u, w));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fath, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">	d[u] = s, dfn[u] = ++st, h[st] = u, dep[u] = dep[fath] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">		fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i].v, w = G[u][i].w;</span><br><span class="line">		<span class="keyword">if</span> (v == fath) <span class="keyword">continue</span>;</span><br><span class="line">		fa[v][<span class="number">0</span>] = u;</span><br><span class="line">		<span class="built_in">dfs</span> (v, u, s + w);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = t; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[fa[y][i]] &gt;= dep[x]) &#123;</span><br><span class="line">            y = fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = t; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[x][i] != fa[y][i]) &#123;</span><br><span class="line">            x = fa[x][i];</span><br><span class="line">            y = fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dist</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> d[x] + d[y] - <span class="number">2</span> * d[<span class="built_in">Lca</span> (x, y)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span> &#123;</span><br><span class="line">    <span class="type">int</span> val, key, l, r, siz;</span><br><span class="line">&#125; s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    s[p].siz = s[s[p].l].siz + s[s[p].r].siz + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> val, <span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">0</span>) &#123; x = y = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (s[p].val &lt;= val) &#123;</span><br><span class="line">        x = p; <span class="built_in">split</span> (s[p].r, val, s[p].r, y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = p; <span class="built_in">split</span> (s[p].l, val, x, s[p].l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span> (p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">    <span class="keyword">if</span> (s[x].key &lt; s[y].key) &#123;</span><br><span class="line">        s[x].r = <span class="built_in">merge</span> (s[x].r, y);</span><br><span class="line">        <span class="built_in">push_up</span> (x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s[y].l = <span class="built_in">merge</span> (x, s[y].l);</span><br><span class="line">        <span class="built_in">push_up</span> (y);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    s[++tot].val = val, s[tot].key = <span class="built_in">rand</span> (), s[tot].siz = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span> (root, val, tmp1, tmp2);</span><br><span class="line">    root = <span class="built_in">merge</span> (<span class="built_in">merge</span> (tmp1, <span class="built_in">newnode</span> (val)), tmp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span> (root, val, tmp1, tmp3);</span><br><span class="line">    <span class="built_in">split</span> (tmp1, val - <span class="number">1</span>, tmp1, tmp2);</span><br><span class="line">    tmp2 = <span class="built_in">merge</span> (s[tmp2].l, s[tmp2].r);</span><br><span class="line">    root = <span class="built_in">merge</span> (tmp1, <span class="built_in">merge</span> (tmp2, tmp3));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querykth</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[s[p].l].siz &gt;= k) &#123; p = s[p].l; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[s[p].l].siz + <span class="number">1</span> == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        k -= s[s[p].l].siz + <span class="number">1</span>, p = s[p].r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querymin</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = INF;</span><br><span class="line">	<span class="keyword">while</span> (p) &#123;</span><br><span class="line">		res = <span class="built_in">min</span> (res, s[p].val);</span><br><span class="line">		p = s[p].l;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querymax</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = -INF;</span><br><span class="line">	<span class="keyword">while</span> (p) &#123;</span><br><span class="line">		res = <span class="built_in">max</span> (res, s[p].val);</span><br><span class="line">		p = s[p].r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querypre</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	tmp1 = <span class="number">0</span>, tmp2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">split</span> (root, val - <span class="number">1</span>, tmp1, tmp2);</span><br><span class="line">    <span class="keyword">if</span> (tmp1 == <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">querymax</span> (root);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="type">int</span> res = s[<span class="built_in">querykth</span> (tmp1, s[tmp1].siz)].val;</span><br><span class="line">    root = <span class="built_in">merge</span> (tmp1, tmp2);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querynxt</span> <span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	tmp1 = <span class="number">0</span>, tmp2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">split</span> (root, val, tmp1, tmp2);</span><br><span class="line">    <span class="keyword">if</span> (tmp2 == <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">querymin</span> (root);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="type">int</span> res = s[<span class="built_in">querykth</span> (tmp2, <span class="number">1</span>)].val;</span><br><span class="line">    root = <span class="built_in">merge</span> (tmp1, tmp2);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_tree</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[root].siz + <span class="number">1</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">insert</span> (dfn[x]);</span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> pre = h[<span class="built_in">querypre</span> (dfn[x])];</span><br><span class="line">	<span class="type">int</span> nxt = h[<span class="built_in">querynxt</span> (dfn[x])];</span><br><span class="line">	<span class="built_in">insert</span> (dfn[x]);</span><br><span class="line">	<span class="type">int</span> add = <span class="built_in">Dist</span> (pre, x) + <span class="built_in">Dist</span> (nxt, x);</span><br><span class="line">	<span class="type">int</span> del = <span class="built_in">Dist</span> (pre, nxt);</span><br><span class="line">	ans = ans + add - del;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_tree</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[root].siz - <span class="number">1</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">remove</span> (dfn[x]);</span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> pre = h[<span class="built_in">querypre</span> (dfn[x])];</span><br><span class="line">	<span class="type">int</span> nxt = h[<span class="built_in">querynxt</span> (dfn[x])];</span><br><span class="line">	<span class="built_in">remove</span> (dfn[x]);</span><br><span class="line">	<span class="type">int</span> del = <span class="built_in">Dist</span> (pre, x) + <span class="built_in">Dist</span> (nxt, x);</span><br><span class="line">	<span class="type">int</span> add = <span class="built_in">Dist</span> (pre, nxt);</span><br><span class="line">	ans = ans + add - del;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	freopen (&quot;data.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//	freopen (&quot;data.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    t = <span class="number">22</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        <span class="built_in">Addedge</span> (u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span> (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">char</span> opt; cin &gt;&gt; opt;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">insert_tree</span> (x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;x);   </span><br><span class="line">            <span class="built_in">remove_tree</span> (x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, ans / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; &quot;==&quot; &lt;&lt; ans / 2 &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>treap</tag>
        <tag>dfs</tag>
        <tag>lca</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」2021-08-19 做题记录</title>
    <url>/2021/08/19/2021-08-19-%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>咕咕了一天，来写一个</p>
<span id="more"></span>

<h2 id="A-F"><a href="#A-F" class="headerlink" title="A-F"></a>A-F</h2><p>例题果断咕咕。</p>
<h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><p><a href="https://vjudge.net/contest/454385#problem/">link</a></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由裴蜀定理:$ax+by&#x3D;d\times \gcd(a, b)$。可知$\min (ax+by) &#x3D; \gcd(a,b)$    </p>
<p>那么从两个数推广到$n$个数可知$\min(A_1X_1+A_2X_2+A_3X_3+…+A_nX_n)&#x3D;\gcd(A_1, A_2, A_3, \dots ,A_n)$</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (y == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">gcd</span> (y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">		ans = <span class="built_in">gcd</span> (ans, x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, ans &lt; <span class="number">0</span> ? -ans : ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h2><p><a href="https://vjudge.net/contest/454385#problem/H">link</a></p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>即使要求$(A_1X_1+A_2X_2+A_3X_3+…+A_nX_n) \mod k$的所有值。    </p>
<p>由上一题可知：$\min(A_1X_1+A_2X_2+A_3X_3+…+A_nX_n)&#x3D;\gcd(A_1, A_2, A_3, \dots ,A_n)$    </p>
<p>那么$(A_1X_1+A_2X_2+A_3X_3+…+A_nX_n) &#x3D; d \times \gcd(A_1, A_2, A_3, \dots ,A_n)$        </p>
<p>求出$\gcd$后枚举即可。    </p>
<h2 id="C-Looooops"><a href="#C-Looooops" class="headerlink" title="C Looooops"></a>C Looooops</h2><p><a href="https://vjudge.net/contest/454385#problem/I">link</a></p>
<p><del>开始一直没看懂题</del></p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>即是求$a+cx $</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」神秘博士</title>
    <url>/2021/08/19/2021-08-19-%E7%A5%9E%E7%A7%98%E5%8D%9A%E5%A3%AB%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>咕咕了一天，来写一个</p>
<span id="more"></span>



]]></content>
      <tags>
        <tag>treap</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」ABC215.F.Dist Max 2</title>
    <url>/2021/08/23/2021-08-23-ABC215.F.Dist%20Max%202%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><del>I’m good at making everything difficult!</del></p>
<blockquote>
<p>提供一种线段树解法</p>
</blockquote>
<span id="more"></span>

<p><a href="https://atcoder.jp/contests/abc215/tasks/abc215_f">link</a></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>考试时确实没想到二分，结果整了个线段树解法恶心自己，二分已经在课上讲了，此处不再赘述。    </p>
<p>如果我们把问题简化，考虑如下图两个点的位置关系。    </p>
<p><img data-src="https://pic.imgdb.cn/item/6123a0e944eaada73985c101.png" alt="sample"></p>
<p>如果当前两点的距离为$tx-x$,那么由题目可知$ty-y&gt;tx-x$,移项得到$ty-tx&gt;y-x$    </p>
<p>如此，我们可以把分别维护两个点的横纵坐标差，变成维护一个点的横纵坐标之差。    </p>
<p>那么若当前点为$(x_1, y_1)$,要使另一个点$(x_2, y_2)$ $(x_1\leq x_2,y_1\leq y_2)$与当前点之间的贡献为$x_2 - x_1$,必须满足的条件就是$y_1-x_1\leq y_2-x_2$.    </p>
<p>然后我们可以定义一个$d&#x3D;y-x$,每个点按$d$升序排序，对于当前点$(x_i, y_i)$能在横坐标上产生的最大贡献是$\max (x_i-x_j) | 1\leq j &lt; i$.    </p>
<p>那么只需要找到$[1,i-1]$中横坐标的最小值与当前点的横坐标做差即可。    </p>
<p>这个地方就需要用到线段树。    </p>
<p>但是会发现如此一来，我们只能统计到横纵坐标均小于等于当前点的点与当前点产生的贡献。    </p>
<p>为了方便，我们假设所有点在第一象限，那么我们只需要按$x$轴、$y$轴分别将所有点翻转到另外三个象限再次统计答案即可。    </p>
<p>如果是在纵坐标上产生贡献，统计方法与横坐标同理。    </p>
<p>然后考场上没调出来。。。    </p>
<p>后来发现是忘了初始化。。。    </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">200005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, cnt, ans, tx[MAXN], ty[MAXN];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; h;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, d;</span><br><span class="line">&#125; a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Abs</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> -x;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span> <span class="params">(node p, node q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p.d == q.d) &#123;</span><br><span class="line">		<span class="keyword">return</span> p.x &gt; q.x;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">return</span> p.d &lt; q.d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span> <span class="params">(node p, node q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p.d == q.d) &#123;</span><br><span class="line">		<span class="keyword">return</span> p.y &gt; q.y;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">return</span> p.d &lt; q.d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">	<span class="type">int</span> l, r, dat;</span><br><span class="line">&#125; s[MAXN * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span> <span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	s[p].dat = <span class="built_in">max</span> (s[p &lt;&lt; <span class="number">1</span>].dat, s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].dat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	s[p].l = l, s[p].r = r;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		s[p].dat = -INF;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span> (p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">	<span class="built_in">build</span> (p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> x, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l == s[p].r) &#123;</span><br><span class="line">		s[p].dat = val;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (x &lt;= mid) <span class="built_in">update</span> (p &lt;&lt; <span class="number">1</span>, x, val);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">update</span> (p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, val);</span><br><span class="line">	<span class="built_in">push_up</span> (p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) &#123;</span><br><span class="line">		<span class="keyword">return</span> s[p].dat;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> res = -INF;</span><br><span class="line">	<span class="keyword">if</span> (l &lt;= mid) res = <span class="built_in">max</span> (res, <span class="built_in">query</span> (p &lt;&lt; <span class="number">1</span>, l, r));</span><br><span class="line">	<span class="keyword">if</span> (r &gt; mid) res = <span class="built_in">max</span> (res, <span class="built_in">query</span> (p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Find</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">build</span> (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i].d = a[i].x - a[i].y;</span><br><span class="line">	<span class="built_in">sort</span> (a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp1);</span><br><span class="line">	cnt = <span class="number">0</span>;</span><br><span class="line">	h.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i].d != a[i - <span class="number">1</span>].d) &#123;</span><br><span class="line">			h[a[i].d] = ++cnt;</span><br><span class="line">			<span class="built_in">update</span> (<span class="number">1</span>, cnt, a[i].x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> hdi = h[a[i].d];</span><br><span class="line">		ans = <span class="built_in">max</span> (ans, <span class="built_in">query</span> (<span class="number">1</span>, <span class="number">1</span>, hdi) - a[i].x);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i].d = a[i].y - a[i].x;</span><br><span class="line">	<span class="built_in">build</span> (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">	<span class="built_in">sort</span> (a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp2);</span><br><span class="line">	cnt = <span class="number">0</span>;</span><br><span class="line">	h.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i].d != a[i - <span class="number">1</span>].d) &#123;</span><br><span class="line">			h[a[i].d] = ++cnt;</span><br><span class="line">			<span class="built_in">update</span> (<span class="number">1</span>, cnt, a[i].y);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> hdi = h[a[i].d];</span><br><span class="line">		ans = <span class="built_in">max</span> (ans, <span class="built_in">query</span> (<span class="number">1</span>, <span class="number">1</span>, hdi) - a[i].y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Forward</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">-1</span>; i &lt;= <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">-1</span>; j &lt;= <span class="number">1</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">				a[k].x = i * tx[k];</span><br><span class="line">				a[k].y = j * ty[k];</span><br><span class="line"><span class="comment">//				printf (&quot;%d %d\n&quot;, a[k].x, a[k].y);</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="comment">//			printf (&quot;-------------\n&quot;);</span></span><br><span class="line">			<span class="built_in">Find</span> ();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;a[i].x, &amp;a[i].y);</span><br><span class="line">		tx[i] = a[i].x, ty[i] = a[i].y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Forward</span> ();</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>「Summary」数论究极整理</title>
    <url>/2021/08/23/2021-08-23-%E6%95%B0%E8%AE%BA%E7%A9%B6%E6%9E%81%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p><del>I’m good at making everything difficult!</del></p>
</blockquote>
<p>前几天懒得写，只有累到今天来补一下。。。。。。</p>
<span id="more"></span>

<h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><p><del>咕掉埃氏筛</del></p>
<h3 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h3><p>即是线性筛，可以在$\Theta(n)$的时间复杂度里筛出质数。    </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">		pr[++cnt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= n; j++) &#123;</span><br><span class="line">		vis[i * pr[j]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h3><ul>
<li><p><strong>积性函数</strong></p>
<blockquote>
<p>$$\forall x,y.\ \gcd(x, y) &#x3D; 1 \rightarrow f(x\times y)&#x3D;f(x)\times f(y)$$</p>
</blockquote>
</li>
<li><p><strong>完全积性函数</strong></p>
<blockquote>
<p>$$\forall x, y.\f(x\times y) &#x3D; f(x)\times f(y)$$</p>
</blockquote>
<p>对于积性函数，我们可以通过线性筛计算，下面给出一些常见的积性函数计算方法。</p>
</li>
</ul>
<h4 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h4><p><strong>定义</strong>:$\phi(n)&#x3D;\sum_{i&#x3D; 1}^n(\gcd(i, n) &#x3D; 1)$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">		pr[++cnt] = i;</span><br><span class="line">        phi[i] = i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= n; j++) &#123;</span><br><span class="line">		vis[i * pr[j]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123;</span><br><span class="line">            phi[i * pr[j]] = pr[j] * phi[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        phi[i * pr[j]] = phi[i] * phi[pr[j]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="约数个数"><a href="#约数个数" class="headerlink" title="约数个数"></a>约数个数</h4><p><strong>定义</strong>:$d(n)&#x3D;\sum_{i&#x3D;1}^n((n\mod i) &#x3D; 0)$</p>
<p>设$num(i)$为$i$的最小质因子出现次数。        </p>
<h5 id="约数个数定理"><a href="#约数个数定理" class="headerlink" title="约数个数定理"></a>约数个数定理</h5><p>$$n&#x3D;\prod_{i&#x3D;1}^m p_i^{q_i}\ \rightarrow d(n)&#x3D;\prod_{i&#x3D;1}^m(q_i + 1)$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">d[<span class="number">1</span>] = <span class="number">1</span>, num[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">        pr[++cnt] = i;</span><br><span class="line">        d[i] = <span class="number">2</span>;</span><br><span class="line">        num[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= n; j++) &#123;</span><br><span class="line">        vis[i * pr[j]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123;</span><br><span class="line">            num[i * pr[j]] = num[i] + <span class="number">1</span>;</span><br><span class="line">            d[i * pr[j]] = d[i] / num[i * pr[j]] * (num[i * pr[j]] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            num[i * pr[j]] = <span class="number">1</span>;</span><br><span class="line">            d[i * pr[j]] * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="约数和"><a href="#约数和" class="headerlink" title="约数和"></a>约数和</h4><p><strong>定义</strong>:$f(n)&#x3D;\sum_{i &#x3D; 1}^n((n\mod i) &#x3D; 0)\times i$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">g[<span class="number">1</span>] = g[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">		pr[++cnt] = i;</span><br><span class="line">        f[i] = g[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= n; j++) &#123;</span><br><span class="line">        vis[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123;</span><br><span class="line">			g[i * pr[j]] = g[i] * pr[j] + <span class="number">1</span>;</span><br><span class="line">            f[i * pr[j]] = f[i] / g[i] * g[i * pr[j]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f[i * pr[j]] = f[i] * f[pr[j]];</span><br><span class="line">            g[i * pr[j]] = <span class="number">1</span> + pr[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h2><p>若$\gcd(a, m) &#x3D; 1 \rightarrow a^{\varphi(m)} \equiv 1\pmod m$</p>
<h2 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h2><blockquote>
<p><strong>阶</strong>：由欧拉定理可知，对 $a\in \mathbb{Z}$，$m\in\mathbb{N}^{*}$，若 $\gcd(a,m)&#x3D;1$，则 $a^{\varphi(m)}\equiv 1\pmod m$。</p>
<p>因此满足同余式 $a^n \equiv 1 \pmod m$ 的最小正整数 $n$ 存在，这个 $n$ 称作 $a$ 模 $m$ 的阶，记作 $\delta_m(a)$。</p>
</blockquote>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>$$<br>a,a^2,a^3,…,a^{\delta_m(a)}模m不同余<br>$$</p>
<p>$$<br>若a^n \equiv 1 \pmod m \rightarrow \delta_m(a)|n<br>$$</p>
<h2 id="威尔逊定理"><a href="#威尔逊定理" class="headerlink" title="威尔逊定理"></a>威尔逊定理</h2><p>当$p$时素数时,$(p-1)! \equiv p - 1\pmod p$</p>
<h2 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h2><p>$\forall x, y$当$\gcd(x,y)|m$时,方程$k_1x+k_2y&#x3D;m$有解。</p>
<h2 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span> <span class="params">(<span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y, <span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">		x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t, res;</span><br><span class="line">    res = <span class="built_in">exgcd</span> (x, y, b, a % b);</span><br><span class="line">    t = x, x = y, y = t - a / b * x;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CRT-amp-ExCRT"><a href="#CRT-amp-ExCRT" class="headerlink" title="CRT &amp; ExCRT"></a>CRT &amp; ExCRT</h2><p>扩展中国剩余定理用于求解模线性同余方程组。    </p>
<p>其思想是依次合并两个方程直到剩下一个方程，就是解系。    </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExCRt</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m1 = m[<span class="number">1</span>], r1 = r[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> m2 = m[i], r2 = r[i];</span><br><span class="line">        <span class="type">int</span> k1, k2;</span><br><span class="line">        <span class="type">int</span> tmp = r2 - r1;</span><br><span class="line">        <span class="type">int</span> g = <span class="built_in">exgcd</span> (k1, k2, m1, m2);</span><br><span class="line">        <span class="keyword">if</span> (tmp % g != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exgcd</span> (k1, k2, m1 / g, m2 / g);</span><br><span class="line">        k1 = (tmp / g * k1) % (m2 / g);</span><br><span class="line">        r1 += k1 * m1;</span><br><span class="line">        m1 = m1 / g * m2;</span><br><span class="line">        r1 = (r1 + m1) % m1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="以上所有定理证明"><a href="#以上所有定理证明" class="headerlink" title="以上所有定理证明"></a>以上所有定理证明</h2><p>先占坑。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」状压dp</title>
    <url>/2021/01/14/2021-1-14-%E7%8A%B6%E5%8E%8Bdp%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>近期学习了状压dp,简单做一个小结。</p>
</blockquote>
<span id="more"></span>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>状压dp是动态规划的一种，它通过将多维的状态压缩成一个具有映射关系的数字来实现降维，从而简化代码实现难度。</p>
<p>优点可以通过位运算判断的高效性降低时间，但是当状态的情况无法转换成二进制数的时候会变得比较麻烦。</p>
<hr>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="糖果"><a href="#糖果" class="headerlink" title="糖果"></a>糖果</h3><p><a href="http://222.180.160.110:1024/contest/1116/problem/1">link</a><br>此题并非真正的状压dp，而是一道二进制压缩的板题。<br>可以用 $|$ 运算求出并集。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e5</span> + <span class="number">5</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, sum;</span><br><span class="line"><span class="type">int</span> dp[MAXM], w[MAXN], a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;a[i], &amp;k);</span><br><span class="line">		w[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, x; j &lt;= k; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">			w[i] |= (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; m); j++) &#123;</span><br><span class="line">			dp[j | w[i]] = <span class="built_in">min</span>(dp[j | w[i]], dp[j] + a[i]);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, dp[(<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a>最短Hamilton路径</h3><p><a href="http://222.180.160.110:1024/contest/1116/problem/2">link</a><br>暴力枚举状态 $w$, $dp[w][i] &#x3D; dp[w][i] &#x3D; min(dp[w][i], dp[w &amp; (~(1 &lt;&lt; i))][j] + dis[j][i])$<br>稍稍处理细节即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">25</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1</span> &lt;&lt; <span class="number">20</span> + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f - f;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = (~x) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> dis[MAXN][MAXN], dp[MAXM][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) dp[i][j] = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, x; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            dis[i][j] = dis[j][i] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; (<span class="number">1</span> &lt;&lt; n); w++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w &amp; (<span class="number">1</span> &lt;&lt; i) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (w &amp; (<span class="number">1</span> &lt;&lt; j) == <span class="number">0</span> || i == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                dp[w][i] = <span class="built_in">min</span>(dp[w][i], dp[w &amp; (~(<span class="number">1</span> &lt;&lt; i))][j] + dis[j][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mondriaan’s-Dream"><a href="#Mondriaan’s-Dream" class="headerlink" title="Mondriaan’s Dream"></a>Mondriaan’s Dream</h3><p><a href="http://222.180.160.110:1024/contest/1116/problem/3">link</a><br>开始有点难度了。<br>按格dp，对上方和左方的格子的占用情况进行讨论转移。0表示已放置，1表示未放置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f - f;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		x = (~x) + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">		<span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">bool</span> in_s[MAXM];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[MAXN][MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m), n, m) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; m); i++) &#123;</span><br><span class="line">			<span class="type">bool</span> cnt = <span class="number">0</span>, has_odd = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j)) has_odd |= cnt, cnt = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">else</span> cnt ^= <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			in_s[i] = cnt | has_odd ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; m); j++) &#123;</span><br><span class="line">				dp[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; (<span class="number">1</span> &lt;&lt; m); k++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (in_s[j | k] &amp;&amp; (j &amp; k) == <span class="number">0</span>) &#123;</span><br><span class="line">						dp[i][j] += dp[i - <span class="number">1</span>][k];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, dp[n][<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="working…"><a href="#working…" class="headerlink" title="working…"></a>working…</h3>]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>状压dp</tag>
      </tags>
  </entry>
  <entry>
    <title>「Summary」初二20210619综合测试</title>
    <url>/2021/06/19/2021-06-19-%E5%88%9D%E4%BA%8C20210619%E7%BB%BC%E5%90%88%E6%B5%8B%E8%AF%95%20%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>赛后总结</p>
</blockquote>
<span id="more"></span>


<h2 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h2><h4 id="0-5min"><a href="#0-5min" class="headerlink" title="0-5min"></a>0-5min</h4><p>看完题, 定了顺序<br>题目难度应该是 :</p>
<blockquote>
<p>2        1        3        4</p>
</blockquote>
<h4 id="5-20min"><a href="#5-20min" class="headerlink" title="5-20min"></a>5-20min</h4><p>写完了T2。</p>
<h4 id="20-30min"><a href="#20-30min" class="headerlink" title="20-30min"></a>20-30min</h4><p>对T2进行静态查错</p>
<h4 id="30-50min"><a href="#30-50min" class="headerlink" title="30-50min"></a>30-50min</h4><p>想了T3的《正解》，但证明不会。</p>
<h4 id="50-75min"><a href="#50-75min" class="headerlink" title="50-75min"></a>50-75min</h4><p>写完了T3的《正解》，过了样例</p>
<h4 id="75-90min"><a href="#75-90min" class="headerlink" title="75-90min"></a>75-90min</h4><p>谢了T3的对拍</p>
<h4 id="90-100min"><a href="#90-100min" class="headerlink" title="90-100min"></a>90-100min</h4><p>对拍出错了。    </p>
<p>是  对拍   出错了</p>
<h4 id="100-101min"><a href="#100-101min" class="headerlink" title="100-101min"></a>100-101min</h4><p>光速修对拍，原因是在生成 <code>l</code>和<code>r</code>时，忘了交换大小。。。</p>
<h4 id="101-102min"><a href="#101-102min" class="headerlink" title="101-102min"></a>101-102min</h4><p>对拍出错了。    </p>
<p>这次是对拍出  错   了。</p>
<h4 id="102-115min"><a href="#102-115min" class="headerlink" title="102-115min"></a>102-115min</h4><p>开始质疑T3《正解》。    </p>
<p>然后看了看 Hack 数据。    </p>
<p>但是貌似我修不好T3。    </p>
<p>然后进行了《正确率分析》    </p>
<p>用对拍算了一下，大概只有 $60 - 70 % $的正确率。</p>
<h4 id="115-120min"><a href="#115-120min" class="headerlink" title="115-120min"></a>115-120min</h4><p>乱搞T4。    </p>
<h4 id="120-130min"><a href="#120-130min" class="headerlink" title="120-130min"></a>120-130min</h4><p>读懂了第一题</p>
<h4 id="130-150min"><a href="#130-150min" class="headerlink" title="130-150min"></a>130-150min</h4><p>写完了正解。</p>
<h4 id="150-175min"><a href="#150-175min" class="headerlink" title="150-175min"></a>150-175min</h4><p>开始瞎搞打表。。。    </p>
<details>

<p>step1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> table[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;M&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, cnt, a[MAXN], t[MAXN * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x) &#123;</span><br><span class="line">		a[++cnt] = x % <span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = cnt; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="number">4</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;VI&quot;</span>);</span><br><span class="line">				t[<span class="number">1</span>]++, t[<span class="number">2</span>]++;</span><br><span class="line">			&#125; </span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="number">5</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;V&quot;</span>);</span><br><span class="line">				t[<span class="number">2</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="number">9</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;IX&quot;</span>);</span><br><span class="line">				t[<span class="number">1</span>]++, t[<span class="number">3</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a[i]; j++) &#123;</span><br><span class="line">					<span class="built_in">printf</span> (<span class="string">&quot;I&quot;</span>);</span><br><span class="line">					t[<span class="number">1</span>]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &gt; <span class="number">5</span> &amp;&amp; a[i] &lt; <span class="number">9</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;V&quot;</span>);</span><br><span class="line">				t[<span class="number">2</span>]++;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">6</span>; j &lt;= a[i]; j++) &#123;</span><br><span class="line">					<span class="built_in">printf</span> (<span class="string">&quot;I&quot;</span>);</span><br><span class="line">					t[<span class="number">1</span>]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="number">4</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;LX&quot;</span>);</span><br><span class="line">				t[<span class="number">4</span>]++, t[<span class="number">3</span>]++;</span><br><span class="line">			&#125; </span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="number">5</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;L&quot;</span>);</span><br><span class="line">				t[<span class="number">4</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="number">9</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;XC&quot;</span>);</span><br><span class="line">				t[<span class="number">3</span>]++, t[<span class="number">5</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a[i]; j++) &#123;</span><br><span class="line">					<span class="built_in">printf</span> (<span class="string">&quot;X&quot;</span>);</span><br><span class="line">					t[<span class="number">3</span>]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &gt; <span class="number">5</span> &amp;&amp; a[i] &lt; <span class="number">9</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;L&quot;</span>);</span><br><span class="line">				t[<span class="number">4</span>]++;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">6</span>; j &lt;= a[i]; j++) &#123;</span><br><span class="line">					<span class="built_in">printf</span> (<span class="string">&quot;X&quot;</span>);</span><br><span class="line">					t[<span class="number">3</span>]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="number">4</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;DC&quot;</span>);</span><br><span class="line">				t[<span class="number">6</span>]++, t[<span class="number">5</span>]++;</span><br><span class="line">			&#125; </span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="number">5</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;D&quot;</span>);</span><br><span class="line">				t[<span class="number">6</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="number">9</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;CM&quot;</span>);</span><br><span class="line">				t[<span class="number">5</span>]++, t[<span class="number">7</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a[i]; j++) &#123;</span><br><span class="line">					<span class="built_in">printf</span> (<span class="string">&quot;C&quot;</span>);</span><br><span class="line">					t[<span class="number">5</span>]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &gt; <span class="number">5</span> &amp;&amp; a[i] &lt; <span class="number">9</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;D&quot;</span>);</span><br><span class="line">				t[<span class="number">6</span>]++;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">6</span>; j &lt;= a[i]; j++) &#123;</span><br><span class="line">					<span class="built_in">printf</span> (<span class="string">&quot;C&quot;</span>);</span><br><span class="line">					t[<span class="number">5</span>]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a[i]; j++) &#123;</span><br><span class="line">				<span class="built_in">printf</span> (<span class="string">&quot;M&quot;</span>);</span><br><span class="line">				t[<span class="number">7</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span> (<span class="string">&quot;table.in&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">	n = <span class="number">3500</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">change</span> (i);</span><br><span class="line">		<span class="built_in">print</span> (i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (t[i] != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;%c %d\n&quot;</span>, table[i], t[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>step2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t[<span class="number">10</span>][<span class="number">3500</span>];</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span> (<span class="string">&quot;table.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span> (<span class="string">&quot;table.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3500</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> len = <span class="built_in">strlen</span> (s + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">7</span>; j++) t[j][i] = t[j][i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">&#x27;I&#x27;</span>) t[<span class="number">1</span>][i]++;</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">&#x27;V&#x27;</span>) t[<span class="number">2</span>][i]++;</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">&#x27;X&#x27;</span>) t[<span class="number">3</span>][i]++;</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">&#x27;L&#x27;</span>) t[<span class="number">4</span>][i]++;</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">&#x27;C&#x27;</span>) t[<span class="number">5</span>][i]++;</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">&#x27;D&#x27;</span>) t[<span class="number">6</span>][i]++;</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">&#x27;M&#x27;</span>) t[<span class="number">7</span>][i]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;const int t%d[3505] = &#123;0, &quot;</span>, i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">3500</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;%d, &quot;</span>, t[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d&quot;</span>, t[i][<span class="number">3500</span>]);</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;&#125;;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>



<p>然后。。。    </p>
<p><font color = red>10k code 警告</font></p>
<h4 id="175-200min"><a href="#175-200min" class="headerlink" title="175-200min"></a>175-200min</h4><p>开始检查细节。</p>
<h4 id="result"><a href="#result" class="headerlink" title="result"></a>result</h4><p>OJ: <code>100+100+79+29=308</code>    </p>
<p>Lemon: <code>0+100+60+10=170</code>    </p>
<p>打表代码太长结果找不到源程序。    </p>
<p>然后重新交了一份正解。    </p>
<p>Lemon:<code>100+100+60+10=270</code></p>
<h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>不该写T1的打表。    </p>
<p>花了30min，结果还是徒劳。    </p>
<p>反而T4的暴力翻车了。。。    </p>
<p>T3其实是接近正解，但是没把特殊情况讨论出来。    </p>
<h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><p>有把握的题就不要写得太<code>zuo</code>，把时间留给难题。    </p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>先贴代码。    </p>
<h4 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h4><details>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> t1[<span class="number">3510</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">80</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">87</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">94</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">115</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">122</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">129</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">136</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">143</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">150</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">157</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">164</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">171</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">178</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">185</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">192</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">206</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">213</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">220</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">227</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">234</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">248</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">255</span>, <span class="number">258</span>, <span class="number">259</span>, <span class="number">259</span>, <span class="number">260</span>, <span class="number">262</span>, <span class="number">265</span>, <span class="number">266</span>, <span class="number">266</span>, <span class="number">267</span>, <span class="number">269</span>, <span class="number">272</span>, <span class="number">273</span>, <span class="number">273</span>, <span class="number">274</span>, <span class="number">276</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">286</span>, <span class="number">287</span>, <span class="number">287</span>, <span class="number">288</span>, <span class="number">290</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">297</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">304</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">311</span>, <span class="number">314</span>, <span class="number">315</span>, <span class="number">315</span>, <span class="number">316</span>, <span class="number">318</span>, <span class="number">321</span>, <span class="number">322</span>, <span class="number">322</span>, <span class="number">323</span>, <span class="number">325</span>, <span class="number">328</span>, <span class="number">329</span>, <span class="number">329</span>, <span class="number">330</span>, <span class="number">332</span>, <span class="number">335</span>, <span class="number">336</span>, <span class="number">336</span>, <span class="number">337</span>, <span class="number">339</span>, <span class="number">342</span>, <span class="number">343</span>, <span class="number">343</span>, <span class="number">344</span>, <span class="number">346</span>, <span class="number">349</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">351</span>, <span class="number">353</span>, <span class="number">356</span>, <span class="number">357</span>, <span class="number">357</span>, <span class="number">358</span>, <span class="number">360</span>, <span class="number">363</span>, <span class="number">364</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">367</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">374</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">381</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">385</span>, <span class="number">386</span>, <span class="number">388</span>, <span class="number">391</span>, <span class="number">392</span>, <span class="number">392</span>, <span class="number">393</span>, <span class="number">395</span>, <span class="number">398</span>, <span class="number">399</span>, <span class="number">399</span>, <span class="number">400</span>, <span class="number">402</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">406</span>, <span class="number">407</span>, <span class="number">409</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">416</span>, <span class="number">419</span>, <span class="number">420</span>, <span class="number">420</span>, <span class="number">421</span>, <span class="number">423</span>, <span class="number">426</span>, <span class="number">427</span>, <span class="number">427</span>, <span class="number">428</span>, <span class="number">430</span>, <span class="number">433</span>, <span class="number">434</span>, <span class="number">434</span>, <span class="number">435</span>, <span class="number">437</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">444</span>, <span class="number">447</span>, <span class="number">448</span>, <span class="number">448</span>, <span class="number">449</span>, <span class="number">451</span>, <span class="number">454</span>, <span class="number">455</span>, <span class="number">455</span>, <span class="number">456</span>, <span class="number">458</span>, <span class="number">461</span>, <span class="number">462</span>, <span class="number">462</span>, <span class="number">463</span>, <span class="number">465</span>, <span class="number">468</span>, <span class="number">469</span>, <span class="number">469</span>, <span class="number">470</span>, <span class="number">472</span>, <span class="number">475</span>, <span class="number">476</span>, <span class="number">476</span>, <span class="number">477</span>, <span class="number">479</span>, <span class="number">482</span>, <span class="number">483</span>, <span class="number">483</span>, <span class="number">484</span>, <span class="number">486</span>, <span class="number">489</span>, <span class="number">490</span>, <span class="number">490</span>, <span class="number">491</span>, <span class="number">493</span>, <span class="number">496</span>, <span class="number">497</span>, <span class="number">497</span>, <span class="number">498</span>, <span class="number">500</span>, <span class="number">503</span>, <span class="number">504</span>, <span class="number">504</span>, <span class="number">505</span>, <span class="number">507</span>, <span class="number">510</span>, <span class="number">511</span>, <span class="number">511</span>, <span class="number">512</span>, <span class="number">514</span>, <span class="number">517</span>, <span class="number">518</span>, <span class="number">518</span>, <span class="number">519</span>, <span class="number">521</span>, <span class="number">524</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">526</span>, <span class="number">528</span>, <span class="number">531</span>, <span class="number">532</span>, <span class="number">532</span>, <span class="number">533</span>, <span class="number">535</span>, <span class="number">538</span>, <span class="number">539</span>, <span class="number">539</span>, <span class="number">540</span>, <span class="number">542</span>, <span class="number">545</span>, <span class="number">546</span>, <span class="number">546</span>, <span class="number">547</span>, <span class="number">549</span>, <span class="number">552</span>, <span class="number">553</span>, <span class="number">553</span>, <span class="number">554</span>, <span class="number">556</span>, <span class="number">559</span>, <span class="number">560</span>, <span class="number">560</span>, <span class="number">561</span>, <span class="number">563</span>, <span class="number">566</span>, <span class="number">567</span>, <span class="number">567</span>, <span class="number">568</span>, <span class="number">570</span>, <span class="number">573</span>, <span class="number">574</span>, <span class="number">574</span>, <span class="number">575</span>, <span class="number">577</span>, <span class="number">580</span>, <span class="number">581</span>, <span class="number">581</span>, <span class="number">582</span>, <span class="number">584</span>, <span class="number">587</span>, <span class="number">588</span>, <span class="number">588</span>, <span class="number">589</span>, <span class="number">591</span>, <span class="number">594</span>, <span class="number">595</span>, <span class="number">595</span>, <span class="number">596</span>, <span class="number">598</span>, <span class="number">601</span>, <span class="number">602</span>, <span class="number">602</span>, <span class="number">603</span>, <span class="number">605</span>, <span class="number">608</span>, <span class="number">609</span>, <span class="number">609</span>, <span class="number">610</span>, <span class="number">612</span>, <span class="number">615</span>, <span class="number">616</span>, <span class="number">616</span>, <span class="number">617</span>, <span class="number">619</span>, <span class="number">622</span>, <span class="number">623</span>, <span class="number">623</span>, <span class="number">624</span>, <span class="number">626</span>, <span class="number">629</span>, <span class="number">630</span>, <span class="number">630</span>, <span class="number">631</span>, <span class="number">633</span>, <span class="number">636</span>, <span class="number">637</span>, <span class="number">637</span>, <span class="number">638</span>, <span class="number">640</span>, <span class="number">643</span>, <span class="number">644</span>, <span class="number">644</span>, <span class="number">645</span>, <span class="number">647</span>, <span class="number">650</span>, <span class="number">651</span>, <span class="number">651</span>, <span class="number">652</span>, <span class="number">654</span>, <span class="number">657</span>, <span class="number">658</span>, <span class="number">658</span>, <span class="number">659</span>, <span class="number">661</span>, <span class="number">664</span>, <span class="number">665</span>, <span class="number">665</span>, <span class="number">666</span>, <span class="number">668</span>, <span class="number">671</span>, <span class="number">672</span>, <span class="number">672</span>, <span class="number">673</span>, <span class="number">675</span>, <span class="number">678</span>, <span class="number">679</span>, <span class="number">679</span>, <span class="number">680</span>, <span class="number">682</span>, <span class="number">685</span>, <span class="number">686</span>, <span class="number">686</span>, <span class="number">687</span>, <span class="number">689</span>, <span class="number">692</span>, <span class="number">693</span>, <span class="number">693</span>, <span class="number">694</span>, <span class="number">696</span>, <span class="number">699</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">701</span>, <span class="number">703</span>, <span class="number">706</span>, <span class="number">707</span>, <span class="number">707</span>, <span class="number">708</span>, <span class="number">710</span>, <span class="number">713</span>, <span class="number">714</span>, <span class="number">714</span>, <span class="number">715</span>, <span class="number">717</span>, <span class="number">720</span>, <span class="number">721</span>, <span class="number">721</span>, <span class="number">722</span>, <span class="number">724</span>, <span class="number">727</span>, <span class="number">728</span>, <span class="number">728</span>, <span class="number">729</span>, <span class="number">731</span>, <span class="number">734</span>, <span class="number">735</span>, <span class="number">735</span>, <span class="number">736</span>, <span class="number">738</span>, <span class="number">741</span>, <span class="number">742</span>, <span class="number">742</span>, <span class="number">743</span>, <span class="number">745</span>, <span class="number">748</span>, <span class="number">749</span>, <span class="number">749</span>, <span class="number">750</span>, <span class="number">752</span>, <span class="number">755</span>, <span class="number">756</span>, <span class="number">756</span>, <span class="number">757</span>, <span class="number">759</span>, <span class="number">762</span>, <span class="number">763</span>, <span class="number">763</span>, <span class="number">764</span>, <span class="number">766</span>, <span class="number">769</span>, <span class="number">770</span>, <span class="number">770</span>, <span class="number">771</span>, <span class="number">773</span>, <span class="number">776</span>, <span class="number">777</span>, <span class="number">777</span>, <span class="number">778</span>, <span class="number">780</span>, <span class="number">783</span>, <span class="number">784</span>, <span class="number">784</span>, <span class="number">785</span>, <span class="number">787</span>, <span class="number">790</span>, <span class="number">791</span>, <span class="number">791</span>, <span class="number">792</span>, <span class="number">794</span>, <span class="number">797</span>, <span class="number">798</span>, <span class="number">798</span>, <span class="number">799</span>, <span class="number">801</span>, <span class="number">804</span>, <span class="number">805</span>, <span class="number">805</span>, <span class="number">806</span>, <span class="number">808</span>, <span class="number">811</span>, <span class="number">812</span>, <span class="number">812</span>, <span class="number">813</span>, <span class="number">815</span>, <span class="number">818</span>, <span class="number">819</span>, <span class="number">819</span>, <span class="number">820</span>, <span class="number">822</span>, <span class="number">825</span>, <span class="number">826</span>, <span class="number">826</span>, <span class="number">827</span>, <span class="number">829</span>, <span class="number">832</span>, <span class="number">833</span>, <span class="number">833</span>, <span class="number">834</span>, <span class="number">836</span>, <span class="number">839</span>, <span class="number">840</span>, <span class="number">840</span>, <span class="number">841</span>, <span class="number">843</span>, <span class="number">846</span>, <span class="number">847</span>, <span class="number">847</span>, <span class="number">848</span>, <span class="number">850</span>, <span class="number">853</span>, <span class="number">854</span>, <span class="number">854</span>, <span class="number">855</span>, <span class="number">857</span>, <span class="number">860</span>, <span class="number">861</span>, <span class="number">861</span>, <span class="number">862</span>, <span class="number">864</span>, <span class="number">867</span>, <span class="number">868</span>, <span class="number">868</span>, <span class="number">869</span>, <span class="number">871</span>, <span class="number">874</span>, <span class="number">875</span>, <span class="number">875</span>, <span class="number">876</span>, <span class="number">878</span>, <span class="number">881</span>, <span class="number">882</span>, <span class="number">882</span>, <span class="number">883</span>, <span class="number">885</span>, <span class="number">888</span>, <span class="number">889</span>, <span class="number">889</span>, <span class="number">890</span>, <span class="number">892</span>, <span class="number">895</span>, <span class="number">896</span>, <span class="number">896</span>, <span class="number">897</span>, <span class="number">899</span>, <span class="number">902</span>, <span class="number">903</span>, <span class="number">903</span>, <span class="number">904</span>, <span class="number">906</span>, <span class="number">909</span>, <span class="number">910</span>, <span class="number">910</span>, <span class="number">911</span>, <span class="number">913</span>, <span class="number">916</span>, <span class="number">917</span>, <span class="number">917</span>, <span class="number">918</span>, <span class="number">920</span>, <span class="number">923</span>, <span class="number">924</span>, <span class="number">924</span>, <span class="number">925</span>, <span class="number">927</span>, <span class="number">930</span>, <span class="number">931</span>, <span class="number">931</span>, <span class="number">932</span>, <span class="number">934</span>, <span class="number">937</span>, <span class="number">938</span>, <span class="number">938</span>, <span class="number">939</span>, <span class="number">941</span>, <span class="number">944</span>, <span class="number">945</span>, <span class="number">945</span>, <span class="number">946</span>, <span class="number">948</span>, <span class="number">951</span>, <span class="number">952</span>, <span class="number">952</span>, <span class="number">953</span>, <span class="number">955</span>, <span class="number">958</span>, <span class="number">959</span>, <span class="number">959</span>, <span class="number">960</span>, <span class="number">962</span>, <span class="number">965</span>, <span class="number">966</span>, <span class="number">966</span>, <span class="number">967</span>, <span class="number">969</span>, <span class="number">972</span>, <span class="number">973</span>, <span class="number">973</span>, <span class="number">974</span>, <span class="number">976</span>, <span class="number">979</span>, <span class="number">980</span>, <span class="number">980</span>, <span class="number">981</span>, <span class="number">983</span>, <span class="number">986</span>, <span class="number">987</span>, <span class="number">987</span>, <span class="number">988</span>, <span class="number">990</span>, <span class="number">993</span>, <span class="number">994</span>, <span class="number">994</span>, <span class="number">995</span>, <span class="number">997</span>, <span class="number">1000</span>, <span class="number">1001</span>, <span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1004</span>, <span class="number">1007</span>, <span class="number">1008</span>, <span class="number">1008</span>, <span class="number">1009</span>, <span class="number">1011</span>, <span class="number">1014</span>, <span class="number">1015</span>, <span class="number">1015</span>, <span class="number">1016</span>, <span class="number">1018</span>, <span class="number">1021</span>, <span class="number">1022</span>, <span class="number">1022</span>, <span class="number">1023</span>, <span class="number">1025</span>, <span class="number">1028</span>, <span class="number">1029</span>, <span class="number">1029</span>, <span class="number">1030</span>, <span class="number">1032</span>, <span class="number">1035</span>, <span class="number">1036</span>, <span class="number">1036</span>, <span class="number">1037</span>, <span class="number">1039</span>, <span class="number">1042</span>, <span class="number">1043</span>, <span class="number">1043</span>, <span class="number">1044</span>, <span class="number">1046</span>, <span class="number">1049</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1051</span>, <span class="number">1053</span>, <span class="number">1056</span>, <span class="number">1057</span>, <span class="number">1057</span>, <span class="number">1058</span>, <span class="number">1060</span>, <span class="number">1063</span>, <span class="number">1064</span>, <span class="number">1064</span>, <span class="number">1065</span>, <span class="number">1067</span>, <span class="number">1070</span>, <span class="number">1071</span>, <span class="number">1071</span>, <span class="number">1072</span>, <span class="number">1074</span>, <span class="number">1077</span>, <span class="number">1078</span>, <span class="number">1078</span>, <span class="number">1079</span>, <span class="number">1081</span>, <span class="number">1084</span>, <span class="number">1085</span>, <span class="number">1085</span>, <span class="number">1086</span>, <span class="number">1088</span>, <span class="number">1091</span>, <span class="number">1092</span>, <span class="number">1092</span>, <span class="number">1093</span>, <span class="number">1095</span>, <span class="number">1098</span>, <span class="number">1099</span>, <span class="number">1099</span>, <span class="number">1100</span>, <span class="number">1102</span>, <span class="number">1105</span>, <span class="number">1106</span>, <span class="number">1106</span>, <span class="number">1107</span>, <span class="number">1109</span>, <span class="number">1112</span>, <span class="number">1113</span>, <span class="number">1113</span>, <span class="number">1114</span>, <span class="number">1116</span>, <span class="number">1119</span>, <span class="number">1120</span>, <span class="number">1120</span>, <span class="number">1121</span>, <span class="number">1123</span>, <span class="number">1126</span>, <span class="number">1127</span>, <span class="number">1127</span>, <span class="number">1128</span>, <span class="number">1130</span>, <span class="number">1133</span>, <span class="number">1134</span>, <span class="number">1134</span>, <span class="number">1135</span>, <span class="number">1137</span>, <span class="number">1140</span>, <span class="number">1141</span>, <span class="number">1141</span>, <span class="number">1142</span>, <span class="number">1144</span>, <span class="number">1147</span>, <span class="number">1148</span>, <span class="number">1148</span>, <span class="number">1149</span>, <span class="number">1151</span>, <span class="number">1154</span>, <span class="number">1155</span>, <span class="number">1155</span>, <span class="number">1156</span>, <span class="number">1158</span>, <span class="number">1161</span>, <span class="number">1162</span>, <span class="number">1162</span>, <span class="number">1163</span>, <span class="number">1165</span>, <span class="number">1168</span>, <span class="number">1169</span>, <span class="number">1169</span>, <span class="number">1170</span>, <span class="number">1172</span>, <span class="number">1175</span>, <span class="number">1176</span>, <span class="number">1176</span>, <span class="number">1177</span>, <span class="number">1179</span>, <span class="number">1182</span>, <span class="number">1183</span>, <span class="number">1183</span>, <span class="number">1184</span>, <span class="number">1186</span>, <span class="number">1189</span>, <span class="number">1190</span>, <span class="number">1190</span>, <span class="number">1191</span>, <span class="number">1193</span>, <span class="number">1196</span>, <span class="number">1197</span>, <span class="number">1197</span>, <span class="number">1198</span>, <span class="number">1200</span>, <span class="number">1203</span>, <span class="number">1204</span>, <span class="number">1204</span>, <span class="number">1205</span>, <span class="number">1207</span>, <span class="number">1210</span>, <span class="number">1211</span>, <span class="number">1211</span>, <span class="number">1212</span>, <span class="number">1214</span>, <span class="number">1217</span>, <span class="number">1218</span>, <span class="number">1218</span>, <span class="number">1219</span>, <span class="number">1221</span>, <span class="number">1224</span>, <span class="number">1225</span>, <span class="number">1225</span>, <span class="number">1226</span>, <span class="number">1228</span>, <span class="number">1231</span>, <span class="number">1232</span>, <span class="number">1232</span>, <span class="number">1233</span>, <span class="number">1235</span>, <span class="number">1238</span>, <span class="number">1239</span>, <span class="number">1239</span>, <span class="number">1240</span>, <span class="number">1242</span>, <span class="number">1245</span>, <span class="number">1246</span>, <span class="number">1246</span>, <span class="number">1247</span>, <span class="number">1249</span>, <span class="number">1252</span>, <span class="number">1253</span>, <span class="number">1253</span>, <span class="number">1254</span>, <span class="number">1256</span>, <span class="number">1259</span>, <span class="number">1260</span>, <span class="number">1260</span>, <span class="number">1261</span>, <span class="number">1263</span>, <span class="number">1266</span>, <span class="number">1267</span>, <span class="number">1267</span>, <span class="number">1268</span>, <span class="number">1270</span>, <span class="number">1273</span>, <span class="number">1274</span>, <span class="number">1274</span>, <span class="number">1275</span>, <span class="number">1277</span>, <span class="number">1280</span>, <span class="number">1281</span>, <span class="number">1281</span>, <span class="number">1282</span>, <span class="number">1284</span>, <span class="number">1287</span>, <span class="number">1288</span>, <span class="number">1288</span>, <span class="number">1289</span>, <span class="number">1291</span>, <span class="number">1294</span>, <span class="number">1295</span>, <span class="number">1295</span>, <span class="number">1296</span>, <span class="number">1298</span>, <span class="number">1301</span>, <span class="number">1302</span>, <span class="number">1302</span>, <span class="number">1303</span>, <span class="number">1305</span>, <span class="number">1308</span>, <span class="number">1309</span>, <span class="number">1309</span>, <span class="number">1310</span>, <span class="number">1312</span>, <span class="number">1315</span>, <span class="number">1316</span>, <span class="number">1316</span>, <span class="number">1317</span>, <span class="number">1319</span>, <span class="number">1322</span>, <span class="number">1323</span>, <span class="number">1323</span>, <span class="number">1324</span>, <span class="number">1326</span>, <span class="number">1329</span>, <span class="number">1330</span>, <span class="number">1330</span>, <span class="number">1331</span>, <span class="number">1333</span>, <span class="number">1336</span>, <span class="number">1337</span>, <span class="number">1337</span>, <span class="number">1338</span>, <span class="number">1340</span>, <span class="number">1343</span>, <span class="number">1344</span>, <span class="number">1344</span>, <span class="number">1345</span>, <span class="number">1347</span>, <span class="number">1350</span>, <span class="number">1351</span>, <span class="number">1351</span>, <span class="number">1352</span>, <span class="number">1354</span>, <span class="number">1357</span>, <span class="number">1358</span>, <span class="number">1358</span>, <span class="number">1359</span>, <span class="number">1361</span>, <span class="number">1364</span>, <span class="number">1365</span>, <span class="number">1365</span>, <span class="number">1366</span>, <span class="number">1368</span>, <span class="number">1371</span>, <span class="number">1372</span>, <span class="number">1372</span>, <span class="number">1373</span>, <span class="number">1375</span>, <span class="number">1378</span>, <span class="number">1379</span>, <span class="number">1379</span>, <span class="number">1380</span>, <span class="number">1382</span>, <span class="number">1385</span>, <span class="number">1386</span>, <span class="number">1386</span>, <span class="number">1387</span>, <span class="number">1389</span>, <span class="number">1392</span>, <span class="number">1393</span>, <span class="number">1393</span>, <span class="number">1394</span>, <span class="number">1396</span>, <span class="number">1399</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1401</span>, <span class="number">1403</span>, <span class="number">1406</span>, <span class="number">1407</span>, <span class="number">1407</span>, <span class="number">1408</span>, <span class="number">1410</span>, <span class="number">1413</span>, <span class="number">1414</span>, <span class="number">1414</span>, <span class="number">1415</span>, <span class="number">1417</span>, <span class="number">1420</span>, <span class="number">1421</span>, <span class="number">1421</span>, <span class="number">1422</span>, <span class="number">1424</span>, <span class="number">1427</span>, <span class="number">1428</span>, <span class="number">1428</span>, <span class="number">1429</span>, <span class="number">1431</span>, <span class="number">1434</span>, <span class="number">1435</span>, <span class="number">1435</span>, <span class="number">1436</span>, <span class="number">1438</span>, <span class="number">1441</span>, <span class="number">1442</span>, <span class="number">1442</span>, <span class="number">1443</span>, <span class="number">1445</span>, <span class="number">1448</span>, <span class="number">1449</span>, <span class="number">1449</span>, <span class="number">1450</span>, <span class="number">1452</span>, <span class="number">1455</span>, <span class="number">1456</span>, <span class="number">1456</span>, <span class="number">1457</span>, <span class="number">1459</span>, <span class="number">1462</span>, <span class="number">1463</span>, <span class="number">1463</span>, <span class="number">1464</span>, <span class="number">1466</span>, <span class="number">1469</span>, <span class="number">1470</span>, <span class="number">1470</span>, <span class="number">1471</span>, <span class="number">1473</span>, <span class="number">1476</span>, <span class="number">1477</span>, <span class="number">1477</span>, <span class="number">1478</span>, <span class="number">1480</span>, <span class="number">1483</span>, <span class="number">1484</span>, <span class="number">1484</span>, <span class="number">1485</span>, <span class="number">1487</span>, <span class="number">1490</span>, <span class="number">1491</span>, <span class="number">1491</span>, <span class="number">1492</span>, <span class="number">1494</span>, <span class="number">1497</span>, <span class="number">1498</span>, <span class="number">1498</span>, <span class="number">1499</span>, <span class="number">1501</span>, <span class="number">1504</span>, <span class="number">1505</span>, <span class="number">1505</span>, <span class="number">1506</span>, <span class="number">1508</span>, <span class="number">1511</span>, <span class="number">1512</span>, <span class="number">1512</span>, <span class="number">1513</span>, <span class="number">1515</span>, <span class="number">1518</span>, <span class="number">1519</span>, <span class="number">1519</span>, <span class="number">1520</span>, <span class="number">1522</span>, <span class="number">1525</span>, <span class="number">1526</span>, <span class="number">1526</span>, <span class="number">1527</span>, <span class="number">1529</span>, <span class="number">1532</span>, <span class="number">1533</span>, <span class="number">1533</span>, <span class="number">1534</span>, <span class="number">1536</span>, <span class="number">1539</span>, <span class="number">1540</span>, <span class="number">1540</span>, <span class="number">1541</span>, <span class="number">1543</span>, <span class="number">1546</span>, <span class="number">1547</span>, <span class="number">1547</span>, <span class="number">1548</span>, <span class="number">1550</span>, <span class="number">1553</span>, <span class="number">1554</span>, <span class="number">1554</span>, <span class="number">1555</span>, <span class="number">1557</span>, <span class="number">1560</span>, <span class="number">1561</span>, <span class="number">1561</span>, <span class="number">1562</span>, <span class="number">1564</span>, <span class="number">1567</span>, <span class="number">1568</span>, <span class="number">1568</span>, <span class="number">1569</span>, <span class="number">1571</span>, <span class="number">1574</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1576</span>, <span class="number">1578</span>, <span class="number">1581</span>, <span class="number">1582</span>, <span class="number">1582</span>, <span class="number">1583</span>, <span class="number">1585</span>, <span class="number">1588</span>, <span class="number">1589</span>, <span class="number">1589</span>, <span class="number">1590</span>, <span class="number">1592</span>, <span class="number">1595</span>, <span class="number">1596</span>, <span class="number">1596</span>, <span class="number">1597</span>, <span class="number">1599</span>, <span class="number">1602</span>, <span class="number">1603</span>, <span class="number">1603</span>, <span class="number">1604</span>, <span class="number">1606</span>, <span class="number">1609</span>, <span class="number">1610</span>, <span class="number">1610</span>, <span class="number">1611</span>, <span class="number">1613</span>, <span class="number">1616</span>, <span class="number">1617</span>, <span class="number">1617</span>, <span class="number">1618</span>, <span class="number">1620</span>, <span class="number">1623</span>, <span class="number">1624</span>, <span class="number">1624</span>, <span class="number">1625</span>, <span class="number">1627</span>, <span class="number">1630</span>, <span class="number">1631</span>, <span class="number">1631</span>, <span class="number">1632</span>, <span class="number">1634</span>, <span class="number">1637</span>, <span class="number">1638</span>, <span class="number">1638</span>, <span class="number">1639</span>, <span class="number">1641</span>, <span class="number">1644</span>, <span class="number">1645</span>, <span class="number">1645</span>, <span class="number">1646</span>, <span class="number">1648</span>, <span class="number">1651</span>, <span class="number">1652</span>, <span class="number">1652</span>, <span class="number">1653</span>, <span class="number">1655</span>, <span class="number">1658</span>, <span class="number">1659</span>, <span class="number">1659</span>, <span class="number">1660</span>, <span class="number">1662</span>, <span class="number">1665</span>, <span class="number">1666</span>, <span class="number">1666</span>, <span class="number">1667</span>, <span class="number">1669</span>, <span class="number">1672</span>, <span class="number">1673</span>, <span class="number">1673</span>, <span class="number">1674</span>, <span class="number">1676</span>, <span class="number">1679</span>, <span class="number">1680</span>, <span class="number">1680</span>, <span class="number">1681</span>, <span class="number">1683</span>, <span class="number">1686</span>, <span class="number">1687</span>, <span class="number">1687</span>, <span class="number">1688</span>, <span class="number">1690</span>, <span class="number">1693</span>, <span class="number">1694</span>, <span class="number">1694</span>, <span class="number">1695</span>, <span class="number">1697</span>, <span class="number">1700</span>, <span class="number">1701</span>, <span class="number">1701</span>, <span class="number">1702</span>, <span class="number">1704</span>, <span class="number">1707</span>, <span class="number">1708</span>, <span class="number">1708</span>, <span class="number">1709</span>, <span class="number">1711</span>, <span class="number">1714</span>, <span class="number">1715</span>, <span class="number">1715</span>, <span class="number">1716</span>, <span class="number">1718</span>, <span class="number">1721</span>, <span class="number">1722</span>, <span class="number">1722</span>, <span class="number">1723</span>, <span class="number">1725</span>, <span class="number">1728</span>, <span class="number">1729</span>, <span class="number">1729</span>, <span class="number">1730</span>, <span class="number">1732</span>, <span class="number">1735</span>, <span class="number">1736</span>, <span class="number">1736</span>, <span class="number">1737</span>, <span class="number">1739</span>, <span class="number">1742</span>, <span class="number">1743</span>, <span class="number">1743</span>, <span class="number">1744</span>, <span class="number">1746</span>, <span class="number">1749</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1751</span>, <span class="number">1753</span>, <span class="number">1756</span>, <span class="number">1757</span>, <span class="number">1757</span>, <span class="number">1758</span>, <span class="number">1760</span>, <span class="number">1763</span>, <span class="number">1764</span>, <span class="number">1764</span>, <span class="number">1765</span>, <span class="number">1767</span>, <span class="number">1770</span>, <span class="number">1771</span>, <span class="number">1771</span>, <span class="number">1772</span>, <span class="number">1774</span>, <span class="number">1777</span>, <span class="number">1778</span>, <span class="number">1778</span>, <span class="number">1779</span>, <span class="number">1781</span>, <span class="number">1784</span>, <span class="number">1785</span>, <span class="number">1785</span>, <span class="number">1786</span>, <span class="number">1788</span>, <span class="number">1791</span>, <span class="number">1792</span>, <span class="number">1792</span>, <span class="number">1793</span>, <span class="number">1795</span>, <span class="number">1798</span>, <span class="number">1799</span>, <span class="number">1799</span>, <span class="number">1800</span>, <span class="number">1802</span>, <span class="number">1805</span>, <span class="number">1806</span>, <span class="number">1806</span>, <span class="number">1807</span>, <span class="number">1809</span>, <span class="number">1812</span>, <span class="number">1813</span>, <span class="number">1813</span>, <span class="number">1814</span>, <span class="number">1816</span>, <span class="number">1819</span>, <span class="number">1820</span>, <span class="number">1820</span>, <span class="number">1821</span>, <span class="number">1823</span>, <span class="number">1826</span>, <span class="number">1827</span>, <span class="number">1827</span>, <span class="number">1828</span>, <span class="number">1830</span>, <span class="number">1833</span>, <span class="number">1834</span>, <span class="number">1834</span>, <span class="number">1835</span>, <span class="number">1837</span>, <span class="number">1840</span>, <span class="number">1841</span>, <span class="number">1841</span>, <span class="number">1842</span>, <span class="number">1844</span>, <span class="number">1847</span>, <span class="number">1848</span>, <span class="number">1848</span>, <span class="number">1849</span>, <span class="number">1851</span>, <span class="number">1854</span>, <span class="number">1855</span>, <span class="number">1855</span>, <span class="number">1856</span>, <span class="number">1858</span>, <span class="number">1861</span>, <span class="number">1862</span>, <span class="number">1862</span>, <span class="number">1863</span>, <span class="number">1865</span>, <span class="number">1868</span>, <span class="number">1869</span>, <span class="number">1869</span>, <span class="number">1870</span>, <span class="number">1872</span>, <span class="number">1875</span>, <span class="number">1876</span>, <span class="number">1876</span>, <span class="number">1877</span>, <span class="number">1879</span>, <span class="number">1882</span>, <span class="number">1883</span>, <span class="number">1883</span>, <span class="number">1884</span>, <span class="number">1886</span>, <span class="number">1889</span>, <span class="number">1890</span>, <span class="number">1890</span>, <span class="number">1891</span>, <span class="number">1893</span>, <span class="number">1896</span>, <span class="number">1897</span>, <span class="number">1897</span>, <span class="number">1898</span>, <span class="number">1900</span>, <span class="number">1903</span>, <span class="number">1904</span>, <span class="number">1904</span>, <span class="number">1905</span>, <span class="number">1907</span>, <span class="number">1910</span>, <span class="number">1911</span>, <span class="number">1911</span>, <span class="number">1912</span>, <span class="number">1914</span>, <span class="number">1917</span>, <span class="number">1918</span>, <span class="number">1918</span>, <span class="number">1919</span>, <span class="number">1921</span>, <span class="number">1924</span>, <span class="number">1925</span>, <span class="number">1925</span>, <span class="number">1926</span>, <span class="number">1928</span>, <span class="number">1931</span>, <span class="number">1932</span>, <span class="number">1932</span>, <span class="number">1933</span>, <span class="number">1935</span>, <span class="number">1938</span>, <span class="number">1939</span>, <span class="number">1939</span>, <span class="number">1940</span>, <span class="number">1942</span>, <span class="number">1945</span>, <span class="number">1946</span>, <span class="number">1946</span>, <span class="number">1947</span>, <span class="number">1949</span>, <span class="number">1952</span>, <span class="number">1953</span>, <span class="number">1953</span>, <span class="number">1954</span>, <span class="number">1956</span>, <span class="number">1959</span>, <span class="number">1960</span>, <span class="number">1960</span>, <span class="number">1961</span>, <span class="number">1963</span>, <span class="number">1966</span>, <span class="number">1967</span>, <span class="number">1967</span>, <span class="number">1968</span>, <span class="number">1970</span>, <span class="number">1973</span>, <span class="number">1974</span>, <span class="number">1974</span>, <span class="number">1975</span>, <span class="number">1977</span>, <span class="number">1980</span>, <span class="number">1981</span>, <span class="number">1981</span>, <span class="number">1982</span>, <span class="number">1984</span>, <span class="number">1987</span>, <span class="number">1988</span>, <span class="number">1988</span>, <span class="number">1989</span>, <span class="number">1991</span>, <span class="number">1994</span>, <span class="number">1995</span>, <span class="number">1995</span>, <span class="number">1996</span>, <span class="number">1998</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2002</span>, <span class="number">2003</span>, <span class="number">2005</span>, <span class="number">2008</span>, <span class="number">2009</span>, <span class="number">2009</span>, <span class="number">2010</span>, <span class="number">2012</span>, <span class="number">2015</span>, <span class="number">2016</span>, <span class="number">2016</span>, <span class="number">2017</span>, <span class="number">2019</span>, <span class="number">2022</span>, <span class="number">2023</span>, <span class="number">2023</span>, <span class="number">2024</span>, <span class="number">2026</span>, <span class="number">2029</span>, <span class="number">2030</span>, <span class="number">2030</span>, <span class="number">2031</span>, <span class="number">2033</span>, <span class="number">2036</span>, <span class="number">2037</span>, <span class="number">2037</span>, <span class="number">2038</span>, <span class="number">2040</span>, <span class="number">2043</span>, <span class="number">2044</span>, <span class="number">2044</span>, <span class="number">2045</span>, <span class="number">2047</span>, <span class="number">2050</span>, <span class="number">2051</span>, <span class="number">2051</span>, <span class="number">2052</span>, <span class="number">2054</span>, <span class="number">2057</span>, <span class="number">2058</span>, <span class="number">2058</span>, <span class="number">2059</span>, <span class="number">2061</span>, <span class="number">2064</span>, <span class="number">2065</span>, <span class="number">2065</span>, <span class="number">2066</span>, <span class="number">2068</span>, <span class="number">2071</span>, <span class="number">2072</span>, <span class="number">2072</span>, <span class="number">2073</span>, <span class="number">2075</span>, <span class="number">2078</span>, <span class="number">2079</span>, <span class="number">2079</span>, <span class="number">2080</span>, <span class="number">2082</span>, <span class="number">2085</span>, <span class="number">2086</span>, <span class="number">2086</span>, <span class="number">2087</span>, <span class="number">2089</span>, <span class="number">2092</span>, <span class="number">2093</span>, <span class="number">2093</span>, <span class="number">2094</span>, <span class="number">2096</span>, <span class="number">2099</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2101</span>, <span class="number">2103</span>, <span class="number">2106</span>, <span class="number">2107</span>, <span class="number">2107</span>, <span class="number">2108</span>, <span class="number">2110</span>, <span class="number">2113</span>, <span class="number">2114</span>, <span class="number">2114</span>, <span class="number">2115</span>, <span class="number">2117</span>, <span class="number">2120</span>, <span class="number">2121</span>, <span class="number">2121</span>, <span class="number">2122</span>, <span class="number">2124</span>, <span class="number">2127</span>, <span class="number">2128</span>, <span class="number">2128</span>, <span class="number">2129</span>, <span class="number">2131</span>, <span class="number">2134</span>, <span class="number">2135</span>, <span class="number">2135</span>, <span class="number">2136</span>, <span class="number">2138</span>, <span class="number">2141</span>, <span class="number">2142</span>, <span class="number">2142</span>, <span class="number">2143</span>, <span class="number">2145</span>, <span class="number">2148</span>, <span class="number">2149</span>, <span class="number">2149</span>, <span class="number">2150</span>, <span class="number">2152</span>, <span class="number">2155</span>, <span class="number">2156</span>, <span class="number">2156</span>, <span class="number">2157</span>, <span class="number">2159</span>, <span class="number">2162</span>, <span class="number">2163</span>, <span class="number">2163</span>, <span class="number">2164</span>, <span class="number">2166</span>, <span class="number">2169</span>, <span class="number">2170</span>, <span class="number">2170</span>, <span class="number">2171</span>, <span class="number">2173</span>, <span class="number">2176</span>, <span class="number">2177</span>, <span class="number">2177</span>, <span class="number">2178</span>, <span class="number">2180</span>, <span class="number">2183</span>, <span class="number">2184</span>, <span class="number">2184</span>, <span class="number">2185</span>, <span class="number">2187</span>, <span class="number">2190</span>, <span class="number">2191</span>, <span class="number">2191</span>, <span class="number">2192</span>, <span class="number">2194</span>, <span class="number">2197</span>, <span class="number">2198</span>, <span class="number">2198</span>, <span class="number">2199</span>, <span class="number">2201</span>, <span class="number">2204</span>, <span class="number">2205</span>, <span class="number">2205</span>, <span class="number">2206</span>, <span class="number">2208</span>, <span class="number">2211</span>, <span class="number">2212</span>, <span class="number">2212</span>, <span class="number">2213</span>, <span class="number">2215</span>, <span class="number">2218</span>, <span class="number">2219</span>, <span class="number">2219</span>, <span class="number">2220</span>, <span class="number">2222</span>, <span class="number">2225</span>, <span class="number">2226</span>, <span class="number">2226</span>, <span class="number">2227</span>, <span class="number">2229</span>, <span class="number">2232</span>, <span class="number">2233</span>, <span class="number">2233</span>, <span class="number">2234</span>, <span class="number">2236</span>, <span class="number">2239</span>, <span class="number">2240</span>, <span class="number">2240</span>, <span class="number">2241</span>, <span class="number">2243</span>, <span class="number">2246</span>, <span class="number">2247</span>, <span class="number">2247</span>, <span class="number">2248</span>, <span class="number">2250</span>, <span class="number">2253</span>, <span class="number">2254</span>, <span class="number">2254</span>, <span class="number">2255</span>, <span class="number">2257</span>, <span class="number">2260</span>, <span class="number">2261</span>, <span class="number">2261</span>, <span class="number">2262</span>, <span class="number">2264</span>, <span class="number">2267</span>, <span class="number">2268</span>, <span class="number">2268</span>, <span class="number">2269</span>, <span class="number">2271</span>, <span class="number">2274</span>, <span class="number">2275</span>, <span class="number">2275</span>, <span class="number">2276</span>, <span class="number">2278</span>, <span class="number">2281</span>, <span class="number">2282</span>, <span class="number">2282</span>, <span class="number">2283</span>, <span class="number">2285</span>, <span class="number">2288</span>, <span class="number">2289</span>, <span class="number">2289</span>, <span class="number">2290</span>, <span class="number">2292</span>, <span class="number">2295</span>, <span class="number">2296</span>, <span class="number">2296</span>, <span class="number">2297</span>, <span class="number">2299</span>, <span class="number">2302</span>, <span class="number">2303</span>, <span class="number">2303</span>, <span class="number">2304</span>, <span class="number">2306</span>, <span class="number">2309</span>, <span class="number">2310</span>, <span class="number">2310</span>, <span class="number">2311</span>, <span class="number">2313</span>, <span class="number">2316</span>, <span class="number">2317</span>, <span class="number">2317</span>, <span class="number">2318</span>, <span class="number">2320</span>, <span class="number">2323</span>, <span class="number">2324</span>, <span class="number">2324</span>, <span class="number">2325</span>, <span class="number">2327</span>, <span class="number">2330</span>, <span class="number">2331</span>, <span class="number">2331</span>, <span class="number">2332</span>, <span class="number">2334</span>, <span class="number">2337</span>, <span class="number">2338</span>, <span class="number">2338</span>, <span class="number">2339</span>, <span class="number">2341</span>, <span class="number">2344</span>, <span class="number">2345</span>, <span class="number">2345</span>, <span class="number">2346</span>, <span class="number">2348</span>, <span class="number">2351</span>, <span class="number">2352</span>, <span class="number">2352</span>, <span class="number">2353</span>, <span class="number">2355</span>, <span class="number">2358</span>, <span class="number">2359</span>, <span class="number">2359</span>, <span class="number">2360</span>, <span class="number">2362</span>, <span class="number">2365</span>, <span class="number">2366</span>, <span class="number">2366</span>, <span class="number">2367</span>, <span class="number">2369</span>, <span class="number">2372</span>, <span class="number">2373</span>, <span class="number">2373</span>, <span class="number">2374</span>, <span class="number">2376</span>, <span class="number">2379</span>, <span class="number">2380</span>, <span class="number">2380</span>, <span class="number">2381</span>, <span class="number">2383</span>, <span class="number">2386</span>, <span class="number">2387</span>, <span class="number">2387</span>, <span class="number">2388</span>, <span class="number">2390</span>, <span class="number">2393</span>, <span class="number">2394</span>, <span class="number">2394</span>, <span class="number">2395</span>, <span class="number">2397</span>, <span class="number">2400</span>, <span class="number">2401</span>, <span class="number">2401</span>, <span class="number">2402</span>, <span class="number">2404</span>, <span class="number">2407</span>, <span class="number">2408</span>, <span class="number">2408</span>, <span class="number">2409</span>, <span class="number">2411</span>, <span class="number">2414</span>, <span class="number">2415</span>, <span class="number">2415</span>, <span class="number">2416</span>, <span class="number">2418</span>, <span class="number">2421</span>, <span class="number">2422</span>, <span class="number">2422</span>, <span class="number">2423</span>, <span class="number">2425</span>, <span class="number">2428</span>, <span class="number">2429</span>, <span class="number">2429</span>, <span class="number">2430</span>, <span class="number">2432</span>, <span class="number">2435</span>, <span class="number">2436</span>, <span class="number">2436</span>, <span class="number">2437</span>, <span class="number">2439</span>, <span class="number">2442</span>, <span class="number">2443</span>, <span class="number">2443</span>, <span class="number">2444</span>, <span class="number">2446</span>, <span class="number">2449</span>, <span class="number">2450</span>, <span class="number">2450</span>, <span class="number">2451</span>, <span class="number">2453</span>, <span class="number">2456</span>, <span class="number">2457</span>, <span class="number">2457</span>, <span class="number">2458</span>, <span class="number">2460</span>, <span class="number">2463</span>, <span class="number">2464</span>, <span class="number">2464</span>, <span class="number">2465</span>, <span class="number">2467</span>, <span class="number">2470</span>, <span class="number">2471</span>, <span class="number">2471</span>, <span class="number">2472</span>, <span class="number">2474</span>, <span class="number">2477</span>, <span class="number">2478</span>, <span class="number">2478</span>, <span class="number">2479</span>, <span class="number">2481</span>, <span class="number">2484</span>, <span class="number">2485</span>, <span class="number">2485</span>, <span class="number">2486</span>, <span class="number">2488</span>, <span class="number">2491</span>, <span class="number">2492</span>, <span class="number">2492</span>, <span class="number">2493</span>, <span class="number">2495</span>, <span class="number">2498</span>, <span class="number">2499</span>, <span class="number">2499</span>, <span class="number">2500</span>, <span class="number">2502</span>, <span class="number">2505</span>, <span class="number">2506</span>, <span class="number">2506</span>, <span class="number">2507</span>, <span class="number">2509</span>, <span class="number">2512</span>, <span class="number">2513</span>, <span class="number">2513</span>, <span class="number">2514</span>, <span class="number">2516</span>, <span class="number">2519</span>, <span class="number">2520</span>, <span class="number">2520</span>, <span class="number">2521</span>, <span class="number">2523</span>, <span class="number">2526</span>, <span class="number">2527</span>, <span class="number">2527</span>, <span class="number">2528</span>, <span class="number">2530</span>, <span class="number">2533</span>, <span class="number">2534</span>, <span class="number">2534</span>, <span class="number">2535</span>, <span class="number">2537</span>, <span class="number">2540</span>, <span class="number">2541</span>, <span class="number">2541</span>, <span class="number">2542</span>, <span class="number">2544</span>, <span class="number">2547</span>, <span class="number">2548</span>, <span class="number">2548</span>, <span class="number">2549</span>, <span class="number">2551</span>, <span class="number">2554</span>, <span class="number">2555</span>, <span class="number">2555</span>, <span class="number">2556</span>, <span class="number">2558</span>, <span class="number">2561</span>, <span class="number">2562</span>, <span class="number">2562</span>, <span class="number">2563</span>, <span class="number">2565</span>, <span class="number">2568</span>, <span class="number">2569</span>, <span class="number">2569</span>, <span class="number">2570</span>, <span class="number">2572</span>, <span class="number">2575</span>, <span class="number">2576</span>, <span class="number">2576</span>, <span class="number">2577</span>, <span class="number">2579</span>, <span class="number">2582</span>, <span class="number">2583</span>, <span class="number">2583</span>, <span class="number">2584</span>, <span class="number">2586</span>, <span class="number">2589</span>, <span class="number">2590</span>, <span class="number">2590</span>, <span class="number">2591</span>, <span class="number">2593</span>, <span class="number">2596</span>, <span class="number">2597</span>, <span class="number">2597</span>, <span class="number">2598</span>, <span class="number">2600</span>, <span class="number">2603</span>, <span class="number">2604</span>, <span class="number">2604</span>, <span class="number">2605</span>, <span class="number">2607</span>, <span class="number">2610</span>, <span class="number">2611</span>, <span class="number">2611</span>, <span class="number">2612</span>, <span class="number">2614</span>, <span class="number">2617</span>, <span class="number">2618</span>, <span class="number">2618</span>, <span class="number">2619</span>, <span class="number">2621</span>, <span class="number">2624</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2626</span>, <span class="number">2628</span>, <span class="number">2631</span>, <span class="number">2632</span>, <span class="number">2632</span>, <span class="number">2633</span>, <span class="number">2635</span>, <span class="number">2638</span>, <span class="number">2639</span>, <span class="number">2639</span>, <span class="number">2640</span>, <span class="number">2642</span>, <span class="number">2645</span>, <span class="number">2646</span>, <span class="number">2646</span>, <span class="number">2647</span>, <span class="number">2649</span>, <span class="number">2652</span>, <span class="number">2653</span>, <span class="number">2653</span>, <span class="number">2654</span>, <span class="number">2656</span>, <span class="number">2659</span>, <span class="number">2660</span>, <span class="number">2660</span>, <span class="number">2661</span>, <span class="number">2663</span>, <span class="number">2666</span>, <span class="number">2667</span>, <span class="number">2667</span>, <span class="number">2668</span>, <span class="number">2670</span>, <span class="number">2673</span>, <span class="number">2674</span>, <span class="number">2674</span>, <span class="number">2675</span>, <span class="number">2677</span>, <span class="number">2680</span>, <span class="number">2681</span>, <span class="number">2681</span>, <span class="number">2682</span>, <span class="number">2684</span>, <span class="number">2687</span>, <span class="number">2688</span>, <span class="number">2688</span>, <span class="number">2689</span>, <span class="number">2691</span>, <span class="number">2694</span>, <span class="number">2695</span>, <span class="number">2695</span>, <span class="number">2696</span>, <span class="number">2698</span>, <span class="number">2701</span>, <span class="number">2702</span>, <span class="number">2702</span>, <span class="number">2703</span>, <span class="number">2705</span>, <span class="number">2708</span>, <span class="number">2709</span>, <span class="number">2709</span>, <span class="number">2710</span>, <span class="number">2712</span>, <span class="number">2715</span>, <span class="number">2716</span>, <span class="number">2716</span>, <span class="number">2717</span>, <span class="number">2719</span>, <span class="number">2722</span>, <span class="number">2723</span>, <span class="number">2723</span>, <span class="number">2724</span>, <span class="number">2726</span>, <span class="number">2729</span>, <span class="number">2730</span>, <span class="number">2730</span>, <span class="number">2731</span>, <span class="number">2733</span>, <span class="number">2736</span>, <span class="number">2737</span>, <span class="number">2737</span>, <span class="number">2738</span>, <span class="number">2740</span>, <span class="number">2743</span>, <span class="number">2744</span>, <span class="number">2744</span>, <span class="number">2745</span>, <span class="number">2747</span>, <span class="number">2750</span>, <span class="number">2751</span>, <span class="number">2751</span>, <span class="number">2752</span>, <span class="number">2754</span>, <span class="number">2757</span>, <span class="number">2758</span>, <span class="number">2758</span>, <span class="number">2759</span>, <span class="number">2761</span>, <span class="number">2764</span>, <span class="number">2765</span>, <span class="number">2765</span>, <span class="number">2766</span>, <span class="number">2768</span>, <span class="number">2771</span>, <span class="number">2772</span>, <span class="number">2772</span>, <span class="number">2773</span>, <span class="number">2775</span>, <span class="number">2778</span>, <span class="number">2779</span>, <span class="number">2779</span>, <span class="number">2780</span>, <span class="number">2782</span>, <span class="number">2785</span>, <span class="number">2786</span>, <span class="number">2786</span>, <span class="number">2787</span>, <span class="number">2789</span>, <span class="number">2792</span>, <span class="number">2793</span>, <span class="number">2793</span>, <span class="number">2794</span>, <span class="number">2796</span>, <span class="number">2799</span>, <span class="number">2800</span>, <span class="number">2800</span>, <span class="number">2801</span>, <span class="number">2803</span>, <span class="number">2806</span>, <span class="number">2807</span>, <span class="number">2807</span>, <span class="number">2808</span>, <span class="number">2810</span>, <span class="number">2813</span>, <span class="number">2814</span>, <span class="number">2814</span>, <span class="number">2815</span>, <span class="number">2817</span>, <span class="number">2820</span>, <span class="number">2821</span>, <span class="number">2821</span>, <span class="number">2822</span>, <span class="number">2824</span>, <span class="number">2827</span>, <span class="number">2828</span>, <span class="number">2828</span>, <span class="number">2829</span>, <span class="number">2831</span>, <span class="number">2834</span>, <span class="number">2835</span>, <span class="number">2835</span>, <span class="number">2836</span>, <span class="number">2838</span>, <span class="number">2841</span>, <span class="number">2842</span>, <span class="number">2842</span>, <span class="number">2843</span>, <span class="number">2845</span>, <span class="number">2848</span>, <span class="number">2849</span>, <span class="number">2849</span>, <span class="number">2850</span>, <span class="number">2852</span>, <span class="number">2855</span>, <span class="number">2856</span>, <span class="number">2856</span>, <span class="number">2857</span>, <span class="number">2859</span>, <span class="number">2862</span>, <span class="number">2863</span>, <span class="number">2863</span>, <span class="number">2864</span>, <span class="number">2866</span>, <span class="number">2869</span>, <span class="number">2870</span>, <span class="number">2870</span>, <span class="number">2871</span>, <span class="number">2873</span>, <span class="number">2876</span>, <span class="number">2877</span>, <span class="number">2877</span>, <span class="number">2878</span>, <span class="number">2880</span>, <span class="number">2883</span>, <span class="number">2884</span>, <span class="number">2884</span>, <span class="number">2885</span>, <span class="number">2887</span>, <span class="number">2890</span>, <span class="number">2891</span>, <span class="number">2891</span>, <span class="number">2892</span>, <span class="number">2894</span>, <span class="number">2897</span>, <span class="number">2898</span>, <span class="number">2898</span>, <span class="number">2899</span>, <span class="number">2901</span>, <span class="number">2904</span>, <span class="number">2905</span>, <span class="number">2905</span>, <span class="number">2906</span>, <span class="number">2908</span>, <span class="number">2911</span>, <span class="number">2912</span>, <span class="number">2912</span>, <span class="number">2913</span>, <span class="number">2915</span>, <span class="number">2918</span>, <span class="number">2919</span>, <span class="number">2919</span>, <span class="number">2920</span>, <span class="number">2922</span>, <span class="number">2925</span>, <span class="number">2926</span>, <span class="number">2926</span>, <span class="number">2927</span>, <span class="number">2929</span>, <span class="number">2932</span>, <span class="number">2933</span>, <span class="number">2933</span>, <span class="number">2934</span>, <span class="number">2936</span>, <span class="number">2939</span>, <span class="number">2940</span>, <span class="number">2940</span>, <span class="number">2941</span>, <span class="number">2943</span>, <span class="number">2946</span>, <span class="number">2947</span>, <span class="number">2947</span>, <span class="number">2948</span>, <span class="number">2950</span>, <span class="number">2953</span>, <span class="number">2954</span>, <span class="number">2954</span>, <span class="number">2955</span>, <span class="number">2957</span>, <span class="number">2960</span>, <span class="number">2961</span>, <span class="number">2961</span>, <span class="number">2962</span>, <span class="number">2964</span>, <span class="number">2967</span>, <span class="number">2968</span>, <span class="number">2968</span>, <span class="number">2969</span>, <span class="number">2971</span>, <span class="number">2974</span>, <span class="number">2975</span>, <span class="number">2975</span>, <span class="number">2976</span>, <span class="number">2978</span>, <span class="number">2981</span>, <span class="number">2982</span>, <span class="number">2982</span>, <span class="number">2983</span>, <span class="number">2985</span>, <span class="number">2988</span>, <span class="number">2989</span>, <span class="number">2989</span>, <span class="number">2990</span>, <span class="number">2992</span>, <span class="number">2995</span>, <span class="number">2996</span>, <span class="number">2996</span>, <span class="number">2997</span>, <span class="number">2999</span>, <span class="number">3002</span>, <span class="number">3003</span>, <span class="number">3003</span>, <span class="number">3004</span>, <span class="number">3006</span>, <span class="number">3009</span>, <span class="number">3010</span>, <span class="number">3010</span>, <span class="number">3011</span>, <span class="number">3013</span>, <span class="number">3016</span>, <span class="number">3017</span>, <span class="number">3017</span>, <span class="number">3018</span>, <span class="number">3020</span>, <span class="number">3023</span>, <span class="number">3024</span>, <span class="number">3024</span>, <span class="number">3025</span>, <span class="number">3027</span>, <span class="number">3030</span>, <span class="number">3031</span>, <span class="number">3031</span>, <span class="number">3032</span>, <span class="number">3034</span>, <span class="number">3037</span>, <span class="number">3038</span>, <span class="number">3038</span>, <span class="number">3039</span>, <span class="number">3041</span>, <span class="number">3044</span>, <span class="number">3045</span>, <span class="number">3045</span>, <span class="number">3046</span>, <span class="number">3048</span>, <span class="number">3051</span>, <span class="number">3052</span>, <span class="number">3052</span>, <span class="number">3053</span>, <span class="number">3055</span>, <span class="number">3058</span>, <span class="number">3059</span>, <span class="number">3059</span>, <span class="number">3060</span>, <span class="number">3062</span>, <span class="number">3065</span>, <span class="number">3066</span>, <span class="number">3066</span>, <span class="number">3067</span>, <span class="number">3069</span>, <span class="number">3072</span>, <span class="number">3073</span>, <span class="number">3073</span>, <span class="number">3074</span>, <span class="number">3076</span>, <span class="number">3079</span>, <span class="number">3080</span>, <span class="number">3080</span>, <span class="number">3081</span>, <span class="number">3083</span>, <span class="number">3086</span>, <span class="number">3087</span>, <span class="number">3087</span>, <span class="number">3088</span>, <span class="number">3090</span>, <span class="number">3093</span>, <span class="number">3094</span>, <span class="number">3094</span>, <span class="number">3095</span>, <span class="number">3097</span>, <span class="number">3100</span>, <span class="number">3101</span>, <span class="number">3101</span>, <span class="number">3102</span>, <span class="number">3104</span>, <span class="number">3107</span>, <span class="number">3108</span>, <span class="number">3108</span>, <span class="number">3109</span>, <span class="number">3111</span>, <span class="number">3114</span>, <span class="number">3115</span>, <span class="number">3115</span>, <span class="number">3116</span>, <span class="number">3118</span>, <span class="number">3121</span>, <span class="number">3122</span>, <span class="number">3122</span>, <span class="number">3123</span>, <span class="number">3125</span>, <span class="number">3128</span>, <span class="number">3129</span>, <span class="number">3129</span>, <span class="number">3130</span>, <span class="number">3132</span>, <span class="number">3135</span>, <span class="number">3136</span>, <span class="number">3136</span>, <span class="number">3137</span>, <span class="number">3139</span>, <span class="number">3142</span>, <span class="number">3143</span>, <span class="number">3143</span>, <span class="number">3144</span>, <span class="number">3146</span>, <span class="number">3149</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3151</span>, <span class="number">3153</span>, <span class="number">3156</span>, <span class="number">3157</span>, <span class="number">3157</span>, <span class="number">3158</span>, <span class="number">3160</span>, <span class="number">3163</span>, <span class="number">3164</span>, <span class="number">3164</span>, <span class="number">3165</span>, <span class="number">3167</span>, <span class="number">3170</span>, <span class="number">3171</span>, <span class="number">3171</span>, <span class="number">3172</span>, <span class="number">3174</span>, <span class="number">3177</span>, <span class="number">3178</span>, <span class="number">3178</span>, <span class="number">3179</span>, <span class="number">3181</span>, <span class="number">3184</span>, <span class="number">3185</span>, <span class="number">3185</span>, <span class="number">3186</span>, <span class="number">3188</span>, <span class="number">3191</span>, <span class="number">3192</span>, <span class="number">3192</span>, <span class="number">3193</span>, <span class="number">3195</span>, <span class="number">3198</span>, <span class="number">3199</span>, <span class="number">3199</span>, <span class="number">3200</span>, <span class="number">3202</span>, <span class="number">3205</span>, <span class="number">3206</span>, <span class="number">3206</span>, <span class="number">3207</span>, <span class="number">3209</span>, <span class="number">3212</span>, <span class="number">3213</span>, <span class="number">3213</span>, <span class="number">3214</span>, <span class="number">3216</span>, <span class="number">3219</span>, <span class="number">3220</span>, <span class="number">3220</span>, <span class="number">3221</span>, <span class="number">3223</span>, <span class="number">3226</span>, <span class="number">3227</span>, <span class="number">3227</span>, <span class="number">3228</span>, <span class="number">3230</span>, <span class="number">3233</span>, <span class="number">3234</span>, <span class="number">3234</span>, <span class="number">3235</span>, <span class="number">3237</span>, <span class="number">3240</span>, <span class="number">3241</span>, <span class="number">3241</span>, <span class="number">3242</span>, <span class="number">3244</span>, <span class="number">3247</span>, <span class="number">3248</span>, <span class="number">3248</span>, <span class="number">3249</span>, <span class="number">3251</span>, <span class="number">3254</span>, <span class="number">3255</span>, <span class="number">3255</span>, <span class="number">3256</span>, <span class="number">3258</span>, <span class="number">3261</span>, <span class="number">3262</span>, <span class="number">3262</span>, <span class="number">3263</span>, <span class="number">3265</span>, <span class="number">3268</span>, <span class="number">3269</span>, <span class="number">3269</span>, <span class="number">3270</span>, <span class="number">3272</span>, <span class="number">3275</span>, <span class="number">3276</span>, <span class="number">3276</span>, <span class="number">3277</span>, <span class="number">3279</span>, <span class="number">3282</span>, <span class="number">3283</span>, <span class="number">3283</span>, <span class="number">3284</span>, <span class="number">3286</span>, <span class="number">3289</span>, <span class="number">3290</span>, <span class="number">3290</span>, <span class="number">3291</span>, <span class="number">3293</span>, <span class="number">3296</span>, <span class="number">3297</span>, <span class="number">3297</span>, <span class="number">3298</span>, <span class="number">3300</span>, <span class="number">3303</span>, <span class="number">3304</span>, <span class="number">3304</span>, <span class="number">3305</span>, <span class="number">3307</span>, <span class="number">3310</span>, <span class="number">3311</span>, <span class="number">3311</span>, <span class="number">3312</span>, <span class="number">3314</span>, <span class="number">3317</span>, <span class="number">3318</span>, <span class="number">3318</span>, <span class="number">3319</span>, <span class="number">3321</span>, <span class="number">3324</span>, <span class="number">3325</span>, <span class="number">3325</span>, <span class="number">3326</span>, <span class="number">3328</span>, <span class="number">3331</span>, <span class="number">3332</span>, <span class="number">3332</span>, <span class="number">3333</span>, <span class="number">3335</span>, <span class="number">3338</span>, <span class="number">3339</span>, <span class="number">3339</span>, <span class="number">3340</span>, <span class="number">3342</span>, <span class="number">3345</span>, <span class="number">3346</span>, <span class="number">3346</span>, <span class="number">3347</span>, <span class="number">3349</span>, <span class="number">3352</span>, <span class="number">3353</span>, <span class="number">3353</span>, <span class="number">3354</span>, <span class="number">3356</span>, <span class="number">3359</span>, <span class="number">3360</span>, <span class="number">3360</span>, <span class="number">3361</span>, <span class="number">3363</span>, <span class="number">3366</span>, <span class="number">3367</span>, <span class="number">3367</span>, <span class="number">3368</span>, <span class="number">3370</span>, <span class="number">3373</span>, <span class="number">3374</span>, <span class="number">3374</span>, <span class="number">3375</span>, <span class="number">3377</span>, <span class="number">3380</span>, <span class="number">3381</span>, <span class="number">3381</span>, <span class="number">3382</span>, <span class="number">3384</span>, <span class="number">3387</span>, <span class="number">3388</span>, <span class="number">3388</span>, <span class="number">3389</span>, <span class="number">3391</span>, <span class="number">3394</span>, <span class="number">3395</span>, <span class="number">3395</span>, <span class="number">3396</span>, <span class="number">3398</span>, <span class="number">3401</span>, <span class="number">3402</span>, <span class="number">3402</span>, <span class="number">3403</span>, <span class="number">3405</span>, <span class="number">3408</span>, <span class="number">3409</span>, <span class="number">3409</span>, <span class="number">3410</span>, <span class="number">3412</span>, <span class="number">3415</span>, <span class="number">3416</span>, <span class="number">3416</span>, <span class="number">3417</span>, <span class="number">3419</span>, <span class="number">3422</span>, <span class="number">3423</span>, <span class="number">3423</span>, <span class="number">3424</span>, <span class="number">3426</span>, <span class="number">3429</span>, <span class="number">3430</span>, <span class="number">3430</span>, <span class="number">3431</span>, <span class="number">3433</span>, <span class="number">3436</span>, <span class="number">3437</span>, <span class="number">3437</span>, <span class="number">3438</span>, <span class="number">3440</span>, <span class="number">3443</span>, <span class="number">3444</span>, <span class="number">3444</span>, <span class="number">3445</span>, <span class="number">3447</span>, <span class="number">3450</span>, <span class="number">3451</span>, <span class="number">3451</span>, <span class="number">3452</span>, <span class="number">3454</span>, <span class="number">3457</span>, <span class="number">3458</span>, <span class="number">3458</span>, <span class="number">3459</span>, <span class="number">3461</span>, <span class="number">3464</span>, <span class="number">3465</span>, <span class="number">3465</span>, <span class="number">3466</span>, <span class="number">3468</span>, <span class="number">3471</span>, <span class="number">3472</span>, <span class="number">3472</span>, <span class="number">3473</span>, <span class="number">3475</span>, <span class="number">3478</span>, <span class="number">3479</span>, <span class="number">3479</span>, <span class="number">3480</span>, <span class="number">3482</span>, <span class="number">3485</span>, <span class="number">3486</span>, <span class="number">3486</span>, <span class="number">3487</span>, <span class="number">3489</span>, <span class="number">3492</span>, <span class="number">3493</span>, <span class="number">3493</span>, <span class="number">3494</span>, <span class="number">3496</span>, <span class="number">3499</span>, <span class="number">3500</span>, <span class="number">3500</span>, <span class="number">3501</span>, <span class="number">3503</span>, <span class="number">3506</span>, <span class="number">3507</span>, <span class="number">3507</span>, <span class="number">3508</span>, <span class="number">3510</span>, <span class="number">3513</span>, <span class="number">3514</span>, <span class="number">3514</span>, <span class="number">3515</span>, <span class="number">3517</span>, <span class="number">3520</span>, <span class="number">3521</span>, <span class="number">3521</span>, <span class="number">3522</span>, <span class="number">3524</span>, <span class="number">3527</span>, <span class="number">3528</span>, <span class="number">3528</span>, <span class="number">3529</span>, <span class="number">3531</span>, <span class="number">3534</span>, <span class="number">3535</span>, <span class="number">3535</span>, <span class="number">3536</span>, <span class="number">3538</span>, <span class="number">3541</span>, <span class="number">3542</span>, <span class="number">3542</span>, <span class="number">3543</span>, <span class="number">3545</span>, <span class="number">3548</span>, <span class="number">3549</span>, <span class="number">3549</span>, <span class="number">3550</span>, <span class="number">3552</span>, <span class="number">3555</span>, <span class="number">3556</span>, <span class="number">3556</span>, <span class="number">3557</span>, <span class="number">3559</span>, <span class="number">3562</span>, <span class="number">3563</span>, <span class="number">3563</span>, <span class="number">3564</span>, <span class="number">3566</span>, <span class="number">3569</span>, <span class="number">3570</span>, <span class="number">3570</span>, <span class="number">3571</span>, <span class="number">3573</span>, <span class="number">3576</span>, <span class="number">3577</span>, <span class="number">3577</span>, <span class="number">3578</span>, <span class="number">3580</span>, <span class="number">3583</span>, <span class="number">3584</span>, <span class="number">3584</span>, <span class="number">3585</span>, <span class="number">3587</span>, <span class="number">3590</span>, <span class="number">3591</span>, <span class="number">3591</span>, <span class="number">3592</span>, <span class="number">3594</span>, <span class="number">3597</span>, <span class="number">3598</span>, <span class="number">3598</span>, <span class="number">3599</span>, <span class="number">3601</span>, <span class="number">3604</span>, <span class="number">3605</span>, <span class="number">3605</span>, <span class="number">3606</span>, <span class="number">3608</span>, <span class="number">3611</span>, <span class="number">3612</span>, <span class="number">3612</span>, <span class="number">3613</span>, <span class="number">3615</span>, <span class="number">3618</span>, <span class="number">3619</span>, <span class="number">3619</span>, <span class="number">3620</span>, <span class="number">3622</span>, <span class="number">3625</span>, <span class="number">3626</span>, <span class="number">3626</span>, <span class="number">3627</span>, <span class="number">3629</span>, <span class="number">3632</span>, <span class="number">3633</span>, <span class="number">3633</span>, <span class="number">3634</span>, <span class="number">3636</span>, <span class="number">3639</span>, <span class="number">3640</span>, <span class="number">3640</span>, <span class="number">3641</span>, <span class="number">3643</span>, <span class="number">3646</span>, <span class="number">3647</span>, <span class="number">3647</span>, <span class="number">3648</span>, <span class="number">3650</span>, <span class="number">3653</span>, <span class="number">3654</span>, <span class="number">3654</span>, <span class="number">3655</span>, <span class="number">3657</span>, <span class="number">3660</span>, <span class="number">3661</span>, <span class="number">3661</span>, <span class="number">3662</span>, <span class="number">3664</span>, <span class="number">3667</span>, <span class="number">3668</span>, <span class="number">3668</span>, <span class="number">3669</span>, <span class="number">3671</span>, <span class="number">3674</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3676</span>, <span class="number">3678</span>, <span class="number">3681</span>, <span class="number">3682</span>, <span class="number">3682</span>, <span class="number">3683</span>, <span class="number">3685</span>, <span class="number">3688</span>, <span class="number">3689</span>, <span class="number">3689</span>, <span class="number">3690</span>, <span class="number">3692</span>, <span class="number">3695</span>, <span class="number">3696</span>, <span class="number">3696</span>, <span class="number">3697</span>, <span class="number">3699</span>, <span class="number">3702</span>, <span class="number">3703</span>, <span class="number">3703</span>, <span class="number">3704</span>, <span class="number">3706</span>, <span class="number">3709</span>, <span class="number">3710</span>, <span class="number">3710</span>, <span class="number">3711</span>, <span class="number">3713</span>, <span class="number">3716</span>, <span class="number">3717</span>, <span class="number">3717</span>, <span class="number">3718</span>, <span class="number">3720</span>, <span class="number">3723</span>, <span class="number">3724</span>, <span class="number">3724</span>, <span class="number">3725</span>, <span class="number">3727</span>, <span class="number">3730</span>, <span class="number">3731</span>, <span class="number">3731</span>, <span class="number">3732</span>, <span class="number">3734</span>, <span class="number">3737</span>, <span class="number">3738</span>, <span class="number">3738</span>, <span class="number">3739</span>, <span class="number">3741</span>, <span class="number">3744</span>, <span class="number">3745</span>, <span class="number">3745</span>, <span class="number">3746</span>, <span class="number">3748</span>, <span class="number">3751</span>, <span class="number">3752</span>, <span class="number">3752</span>, <span class="number">3753</span>, <span class="number">3755</span>, <span class="number">3758</span>, <span class="number">3759</span>, <span class="number">3759</span>, <span class="number">3760</span>, <span class="number">3762</span>, <span class="number">3765</span>, <span class="number">3766</span>, <span class="number">3766</span>, <span class="number">3767</span>, <span class="number">3769</span>, <span class="number">3772</span>, <span class="number">3773</span>, <span class="number">3773</span>, <span class="number">3774</span>, <span class="number">3776</span>, <span class="number">3779</span>, <span class="number">3780</span>, <span class="number">3780</span>, <span class="number">3781</span>, <span class="number">3783</span>, <span class="number">3786</span>, <span class="number">3787</span>, <span class="number">3787</span>, <span class="number">3788</span>, <span class="number">3790</span>, <span class="number">3793</span>, <span class="number">3794</span>, <span class="number">3794</span>, <span class="number">3795</span>, <span class="number">3797</span>, <span class="number">3800</span>, <span class="number">3801</span>, <span class="number">3801</span>, <span class="number">3802</span>, <span class="number">3804</span>, <span class="number">3807</span>, <span class="number">3808</span>, <span class="number">3808</span>, <span class="number">3809</span>, <span class="number">3811</span>, <span class="number">3814</span>, <span class="number">3815</span>, <span class="number">3815</span>, <span class="number">3816</span>, <span class="number">3818</span>, <span class="number">3821</span>, <span class="number">3822</span>, <span class="number">3822</span>, <span class="number">3823</span>, <span class="number">3825</span>, <span class="number">3828</span>, <span class="number">3829</span>, <span class="number">3829</span>, <span class="number">3830</span>, <span class="number">3832</span>, <span class="number">3835</span>, <span class="number">3836</span>, <span class="number">3836</span>, <span class="number">3837</span>, <span class="number">3839</span>, <span class="number">3842</span>, <span class="number">3843</span>, <span class="number">3843</span>, <span class="number">3844</span>, <span class="number">3846</span>, <span class="number">3849</span>, <span class="number">3850</span>, <span class="number">3850</span>, <span class="number">3851</span>, <span class="number">3853</span>, <span class="number">3856</span>, <span class="number">3857</span>, <span class="number">3857</span>, <span class="number">3858</span>, <span class="number">3860</span>, <span class="number">3863</span>, <span class="number">3864</span>, <span class="number">3864</span>, <span class="number">3865</span>, <span class="number">3867</span>, <span class="number">3870</span>, <span class="number">3871</span>, <span class="number">3871</span>, <span class="number">3872</span>, <span class="number">3874</span>, <span class="number">3877</span>, <span class="number">3878</span>, <span class="number">3878</span>, <span class="number">3879</span>, <span class="number">3881</span>, <span class="number">3884</span>, <span class="number">3885</span>, <span class="number">3885</span>, <span class="number">3886</span>, <span class="number">3888</span>, <span class="number">3891</span>, <span class="number">3892</span>, <span class="number">3892</span>, <span class="number">3893</span>, <span class="number">3895</span>, <span class="number">3898</span>, <span class="number">3899</span>, <span class="number">3899</span>, <span class="number">3900</span>, <span class="number">3902</span>, <span class="number">3905</span>, <span class="number">3906</span>, <span class="number">3906</span>, <span class="number">3907</span>, <span class="number">3909</span>, <span class="number">3912</span>, <span class="number">3913</span>, <span class="number">3913</span>, <span class="number">3914</span>, <span class="number">3916</span>, <span class="number">3919</span>, <span class="number">3920</span>, <span class="number">3920</span>, <span class="number">3921</span>, <span class="number">3923</span>, <span class="number">3926</span>, <span class="number">3927</span>, <span class="number">3927</span>, <span class="number">3928</span>, <span class="number">3930</span>, <span class="number">3933</span>, <span class="number">3934</span>, <span class="number">3934</span>, <span class="number">3935</span>, <span class="number">3937</span>, <span class="number">3940</span>, <span class="number">3941</span>, <span class="number">3941</span>, <span class="number">3942</span>, <span class="number">3944</span>, <span class="number">3947</span>, <span class="number">3948</span>, <span class="number">3948</span>, <span class="number">3949</span>, <span class="number">3951</span>, <span class="number">3954</span>, <span class="number">3955</span>, <span class="number">3955</span>, <span class="number">3956</span>, <span class="number">3958</span>, <span class="number">3961</span>, <span class="number">3962</span>, <span class="number">3962</span>, <span class="number">3963</span>, <span class="number">3965</span>, <span class="number">3968</span>, <span class="number">3969</span>, <span class="number">3969</span>, <span class="number">3970</span>, <span class="number">3972</span>, <span class="number">3975</span>, <span class="number">3976</span>, <span class="number">3976</span>, <span class="number">3977</span>, <span class="number">3979</span>, <span class="number">3982</span>, <span class="number">3983</span>, <span class="number">3983</span>, <span class="number">3984</span>, <span class="number">3986</span>, <span class="number">3989</span>, <span class="number">3990</span>, <span class="number">3990</span>, <span class="number">3991</span>, <span class="number">3993</span>, <span class="number">3996</span>, <span class="number">3997</span>, <span class="number">3997</span>, <span class="number">3998</span>, <span class="number">4000</span>, <span class="number">4003</span>, <span class="number">4004</span>, <span class="number">4004</span>, <span class="number">4005</span>, <span class="number">4007</span>, <span class="number">4010</span>, <span class="number">4011</span>, <span class="number">4011</span>, <span class="number">4012</span>, <span class="number">4014</span>, <span class="number">4017</span>, <span class="number">4018</span>, <span class="number">4018</span>, <span class="number">4019</span>, <span class="number">4021</span>, <span class="number">4024</span>, <span class="number">4025</span>, <span class="number">4025</span>, <span class="number">4026</span>, <span class="number">4028</span>, <span class="number">4031</span>, <span class="number">4032</span>, <span class="number">4032</span>, <span class="number">4033</span>, <span class="number">4035</span>, <span class="number">4038</span>, <span class="number">4039</span>, <span class="number">4039</span>, <span class="number">4040</span>, <span class="number">4042</span>, <span class="number">4045</span>, <span class="number">4046</span>, <span class="number">4046</span>, <span class="number">4047</span>, <span class="number">4049</span>, <span class="number">4052</span>, <span class="number">4053</span>, <span class="number">4053</span>, <span class="number">4054</span>, <span class="number">4056</span>, <span class="number">4059</span>, <span class="number">4060</span>, <span class="number">4060</span>, <span class="number">4061</span>, <span class="number">4063</span>, <span class="number">4066</span>, <span class="number">4067</span>, <span class="number">4067</span>, <span class="number">4068</span>, <span class="number">4070</span>, <span class="number">4073</span>, <span class="number">4074</span>, <span class="number">4074</span>, <span class="number">4075</span>, <span class="number">4077</span>, <span class="number">4080</span>, <span class="number">4081</span>, <span class="number">4081</span>, <span class="number">4082</span>, <span class="number">4084</span>, <span class="number">4087</span>, <span class="number">4088</span>, <span class="number">4088</span>, <span class="number">4089</span>, <span class="number">4091</span>, <span class="number">4094</span>, <span class="number">4095</span>, <span class="number">4095</span>, <span class="number">4096</span>, <span class="number">4098</span>, <span class="number">4101</span>, <span class="number">4102</span>, <span class="number">4102</span>, <span class="number">4103</span>, <span class="number">4105</span>, <span class="number">4108</span>, <span class="number">4109</span>, <span class="number">4109</span>, <span class="number">4110</span>, <span class="number">4112</span>, <span class="number">4115</span>, <span class="number">4116</span>, <span class="number">4116</span>, <span class="number">4117</span>, <span class="number">4119</span>, <span class="number">4122</span>, <span class="number">4123</span>, <span class="number">4123</span>, <span class="number">4124</span>, <span class="number">4126</span>, <span class="number">4129</span>, <span class="number">4130</span>, <span class="number">4130</span>, <span class="number">4131</span>, <span class="number">4133</span>, <span class="number">4136</span>, <span class="number">4137</span>, <span class="number">4137</span>, <span class="number">4138</span>, <span class="number">4140</span>, <span class="number">4143</span>, <span class="number">4144</span>, <span class="number">4144</span>, <span class="number">4145</span>, <span class="number">4147</span>, <span class="number">4150</span>, <span class="number">4151</span>, <span class="number">4151</span>, <span class="number">4152</span>, <span class="number">4154</span>, <span class="number">4157</span>, <span class="number">4158</span>, <span class="number">4158</span>, <span class="number">4159</span>, <span class="number">4161</span>, <span class="number">4164</span>, <span class="number">4165</span>, <span class="number">4165</span>, <span class="number">4166</span>, <span class="number">4168</span>, <span class="number">4171</span>, <span class="number">4172</span>, <span class="number">4172</span>, <span class="number">4173</span>, <span class="number">4175</span>, <span class="number">4178</span>, <span class="number">4179</span>, <span class="number">4179</span>, <span class="number">4180</span>, <span class="number">4182</span>, <span class="number">4185</span>, <span class="number">4186</span>, <span class="number">4186</span>, <span class="number">4187</span>, <span class="number">4189</span>, <span class="number">4192</span>, <span class="number">4193</span>, <span class="number">4193</span>, <span class="number">4194</span>, <span class="number">4196</span>, <span class="number">4199</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4201</span>, <span class="number">4203</span>, <span class="number">4206</span>, <span class="number">4207</span>, <span class="number">4207</span>, <span class="number">4208</span>, <span class="number">4210</span>, <span class="number">4213</span>, <span class="number">4214</span>, <span class="number">4214</span>, <span class="number">4215</span>, <span class="number">4217</span>, <span class="number">4220</span>, <span class="number">4221</span>, <span class="number">4221</span>, <span class="number">4222</span>, <span class="number">4224</span>, <span class="number">4227</span>, <span class="number">4228</span>, <span class="number">4228</span>, <span class="number">4229</span>, <span class="number">4231</span>, <span class="number">4234</span>, <span class="number">4235</span>, <span class="number">4235</span>, <span class="number">4236</span>, <span class="number">4238</span>, <span class="number">4241</span>, <span class="number">4242</span>, <span class="number">4242</span>, <span class="number">4243</span>, <span class="number">4245</span>, <span class="number">4248</span>, <span class="number">4249</span>, <span class="number">4249</span>, <span class="number">4250</span>, <span class="number">4252</span>, <span class="number">4255</span>, <span class="number">4256</span>, <span class="number">4256</span>, <span class="number">4257</span>, <span class="number">4259</span>, <span class="number">4262</span>, <span class="number">4263</span>, <span class="number">4263</span>, <span class="number">4264</span>, <span class="number">4266</span>, <span class="number">4269</span>, <span class="number">4270</span>, <span class="number">4270</span>, <span class="number">4271</span>, <span class="number">4273</span>, <span class="number">4276</span>, <span class="number">4277</span>, <span class="number">4277</span>, <span class="number">4278</span>, <span class="number">4280</span>, <span class="number">4283</span>, <span class="number">4284</span>, <span class="number">4284</span>, <span class="number">4285</span>, <span class="number">4287</span>, <span class="number">4290</span>, <span class="number">4291</span>, <span class="number">4291</span>, <span class="number">4292</span>, <span class="number">4294</span>, <span class="number">4297</span>, <span class="number">4298</span>, <span class="number">4298</span>, <span class="number">4299</span>, <span class="number">4301</span>, <span class="number">4304</span>, <span class="number">4305</span>, <span class="number">4305</span>, <span class="number">4306</span>, <span class="number">4308</span>, <span class="number">4311</span>, <span class="number">4312</span>, <span class="number">4312</span>, <span class="number">4313</span>, <span class="number">4315</span>, <span class="number">4318</span>, <span class="number">4319</span>, <span class="number">4319</span>, <span class="number">4320</span>, <span class="number">4322</span>, <span class="number">4325</span>, <span class="number">4326</span>, <span class="number">4326</span>, <span class="number">4327</span>, <span class="number">4329</span>, <span class="number">4332</span>, <span class="number">4333</span>, <span class="number">4333</span>, <span class="number">4334</span>, <span class="number">4336</span>, <span class="number">4339</span>, <span class="number">4340</span>, <span class="number">4340</span>, <span class="number">4341</span>, <span class="number">4343</span>, <span class="number">4346</span>, <span class="number">4347</span>, <span class="number">4347</span>, <span class="number">4348</span>, <span class="number">4350</span>, <span class="number">4353</span>, <span class="number">4354</span>, <span class="number">4354</span>, <span class="number">4355</span>, <span class="number">4357</span>, <span class="number">4360</span>, <span class="number">4361</span>, <span class="number">4361</span>, <span class="number">4362</span>, <span class="number">4364</span>, <span class="number">4367</span>, <span class="number">4368</span>, <span class="number">4368</span>, <span class="number">4369</span>, <span class="number">4371</span>, <span class="number">4374</span>, <span class="number">4375</span>, <span class="number">4375</span>, <span class="number">4376</span>, <span class="number">4378</span>, <span class="number">4381</span>, <span class="number">4382</span>, <span class="number">4382</span>, <span class="number">4383</span>, <span class="number">4385</span>, <span class="number">4388</span>, <span class="number">4389</span>, <span class="number">4389</span>, <span class="number">4390</span>, <span class="number">4392</span>, <span class="number">4395</span>, <span class="number">4396</span>, <span class="number">4396</span>, <span class="number">4397</span>, <span class="number">4399</span>, <span class="number">4402</span>, <span class="number">4403</span>, <span class="number">4403</span>, <span class="number">4404</span>, <span class="number">4406</span>, <span class="number">4409</span>, <span class="number">4410</span>, <span class="number">4410</span>, <span class="number">4411</span>, <span class="number">4413</span>, <span class="number">4416</span>, <span class="number">4417</span>, <span class="number">4417</span>, <span class="number">4418</span>, <span class="number">4420</span>, <span class="number">4423</span>, <span class="number">4424</span>, <span class="number">4424</span>, <span class="number">4425</span>, <span class="number">4427</span>, <span class="number">4430</span>, <span class="number">4431</span>, <span class="number">4431</span>, <span class="number">4432</span>, <span class="number">4434</span>, <span class="number">4437</span>, <span class="number">4438</span>, <span class="number">4438</span>, <span class="number">4439</span>, <span class="number">4441</span>, <span class="number">4444</span>, <span class="number">4445</span>, <span class="number">4445</span>, <span class="number">4446</span>, <span class="number">4448</span>, <span class="number">4451</span>, <span class="number">4452</span>, <span class="number">4452</span>, <span class="number">4453</span>, <span class="number">4455</span>, <span class="number">4458</span>, <span class="number">4459</span>, <span class="number">4459</span>, <span class="number">4460</span>, <span class="number">4462</span>, <span class="number">4465</span>, <span class="number">4466</span>, <span class="number">4466</span>, <span class="number">4467</span>, <span class="number">4469</span>, <span class="number">4472</span>, <span class="number">4473</span>, <span class="number">4473</span>, <span class="number">4474</span>, <span class="number">4476</span>, <span class="number">4479</span>, <span class="number">4480</span>, <span class="number">4480</span>, <span class="number">4481</span>, <span class="number">4483</span>, <span class="number">4486</span>, <span class="number">4487</span>, <span class="number">4487</span>, <span class="number">4488</span>, <span class="number">4490</span>, <span class="number">4493</span>, <span class="number">4494</span>, <span class="number">4494</span>, <span class="number">4495</span>, <span class="number">4497</span>, <span class="number">4500</span>, <span class="number">4501</span>, <span class="number">4501</span>, <span class="number">4502</span>, <span class="number">4504</span>, <span class="number">4507</span>, <span class="number">4508</span>, <span class="number">4508</span>, <span class="number">4509</span>, <span class="number">4511</span>, <span class="number">4514</span>, <span class="number">4515</span>, <span class="number">4515</span>, <span class="number">4516</span>, <span class="number">4518</span>, <span class="number">4521</span>, <span class="number">4522</span>, <span class="number">4522</span>, <span class="number">4523</span>, <span class="number">4525</span>, <span class="number">4528</span>, <span class="number">4529</span>, <span class="number">4529</span>, <span class="number">4530</span>, <span class="number">4532</span>, <span class="number">4535</span>, <span class="number">4536</span>, <span class="number">4536</span>, <span class="number">4537</span>, <span class="number">4539</span>, <span class="number">4542</span>, <span class="number">4543</span>, <span class="number">4543</span>, <span class="number">4544</span>, <span class="number">4546</span>, <span class="number">4549</span>, <span class="number">4550</span>, <span class="number">4550</span>, <span class="number">4551</span>, <span class="number">4553</span>, <span class="number">4556</span>, <span class="number">4557</span>, <span class="number">4557</span>, <span class="number">4558</span>, <span class="number">4560</span>, <span class="number">4563</span>, <span class="number">4564</span>, <span class="number">4564</span>, <span class="number">4565</span>, <span class="number">4567</span>, <span class="number">4570</span>, <span class="number">4571</span>, <span class="number">4571</span>, <span class="number">4572</span>, <span class="number">4574</span>, <span class="number">4577</span>, <span class="number">4578</span>, <span class="number">4578</span>, <span class="number">4579</span>, <span class="number">4581</span>, <span class="number">4584</span>, <span class="number">4585</span>, <span class="number">4585</span>, <span class="number">4586</span>, <span class="number">4588</span>, <span class="number">4591</span>, <span class="number">4592</span>, <span class="number">4592</span>, <span class="number">4593</span>, <span class="number">4595</span>, <span class="number">4598</span>, <span class="number">4599</span>, <span class="number">4599</span>, <span class="number">4600</span>, <span class="number">4602</span>, <span class="number">4605</span>, <span class="number">4606</span>, <span class="number">4606</span>, <span class="number">4607</span>, <span class="number">4609</span>, <span class="number">4612</span>, <span class="number">4613</span>, <span class="number">4613</span>, <span class="number">4614</span>, <span class="number">4616</span>, <span class="number">4619</span>, <span class="number">4620</span>, <span class="number">4620</span>, <span class="number">4621</span>, <span class="number">4623</span>, <span class="number">4626</span>, <span class="number">4627</span>, <span class="number">4627</span>, <span class="number">4628</span>, <span class="number">4630</span>, <span class="number">4633</span>, <span class="number">4634</span>, <span class="number">4634</span>, <span class="number">4635</span>, <span class="number">4637</span>, <span class="number">4640</span>, <span class="number">4641</span>, <span class="number">4641</span>, <span class="number">4642</span>, <span class="number">4644</span>, <span class="number">4647</span>, <span class="number">4648</span>, <span class="number">4648</span>, <span class="number">4649</span>, <span class="number">4651</span>, <span class="number">4654</span>, <span class="number">4655</span>, <span class="number">4655</span>, <span class="number">4656</span>, <span class="number">4658</span>, <span class="number">4661</span>, <span class="number">4662</span>, <span class="number">4662</span>, <span class="number">4663</span>, <span class="number">4665</span>, <span class="number">4668</span>, <span class="number">4669</span>, <span class="number">4669</span>, <span class="number">4670</span>, <span class="number">4672</span>, <span class="number">4675</span>, <span class="number">4676</span>, <span class="number">4676</span>, <span class="number">4677</span>, <span class="number">4679</span>, <span class="number">4682</span>, <span class="number">4683</span>, <span class="number">4683</span>, <span class="number">4684</span>, <span class="number">4686</span>, <span class="number">4689</span>, <span class="number">4690</span>, <span class="number">4690</span>, <span class="number">4691</span>, <span class="number">4693</span>, <span class="number">4696</span>, <span class="number">4697</span>, <span class="number">4697</span>, <span class="number">4698</span>, <span class="number">4700</span>, <span class="number">4703</span>, <span class="number">4704</span>, <span class="number">4704</span>, <span class="number">4705</span>, <span class="number">4707</span>, <span class="number">4710</span>, <span class="number">4711</span>, <span class="number">4711</span>, <span class="number">4712</span>, <span class="number">4714</span>, <span class="number">4717</span>, <span class="number">4718</span>, <span class="number">4718</span>, <span class="number">4719</span>, <span class="number">4721</span>, <span class="number">4724</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4726</span>, <span class="number">4728</span>, <span class="number">4731</span>, <span class="number">4732</span>, <span class="number">4732</span>, <span class="number">4733</span>, <span class="number">4735</span>, <span class="number">4738</span>, <span class="number">4739</span>, <span class="number">4739</span>, <span class="number">4740</span>, <span class="number">4742</span>, <span class="number">4745</span>, <span class="number">4746</span>, <span class="number">4746</span>, <span class="number">4747</span>, <span class="number">4749</span>, <span class="number">4752</span>, <span class="number">4753</span>, <span class="number">4753</span>, <span class="number">4754</span>, <span class="number">4756</span>, <span class="number">4759</span>, <span class="number">4760</span>, <span class="number">4760</span>, <span class="number">4761</span>, <span class="number">4763</span>, <span class="number">4766</span>, <span class="number">4767</span>, <span class="number">4767</span>, <span class="number">4768</span>, <span class="number">4770</span>, <span class="number">4773</span>, <span class="number">4774</span>, <span class="number">4774</span>, <span class="number">4775</span>, <span class="number">4777</span>, <span class="number">4780</span>, <span class="number">4781</span>, <span class="number">4781</span>, <span class="number">4782</span>, <span class="number">4784</span>, <span class="number">4787</span>, <span class="number">4788</span>, <span class="number">4788</span>, <span class="number">4789</span>, <span class="number">4791</span>, <span class="number">4794</span>, <span class="number">4795</span>, <span class="number">4795</span>, <span class="number">4796</span>, <span class="number">4798</span>, <span class="number">4801</span>, <span class="number">4802</span>, <span class="number">4802</span>, <span class="number">4803</span>, <span class="number">4805</span>, <span class="number">4808</span>, <span class="number">4809</span>, <span class="number">4809</span>, <span class="number">4810</span>, <span class="number">4812</span>, <span class="number">4815</span>, <span class="number">4816</span>, <span class="number">4816</span>, <span class="number">4817</span>, <span class="number">4819</span>, <span class="number">4822</span>, <span class="number">4823</span>, <span class="number">4823</span>, <span class="number">4824</span>, <span class="number">4826</span>, <span class="number">4829</span>, <span class="number">4830</span>, <span class="number">4830</span>, <span class="number">4831</span>, <span class="number">4833</span>, <span class="number">4836</span>, <span class="number">4837</span>, <span class="number">4837</span>, <span class="number">4838</span>, <span class="number">4840</span>, <span class="number">4843</span>, <span class="number">4844</span>, <span class="number">4844</span>, <span class="number">4845</span>, <span class="number">4847</span>, <span class="number">4850</span>, <span class="number">4851</span>, <span class="number">4851</span>, <span class="number">4852</span>, <span class="number">4854</span>, <span class="number">4857</span>, <span class="number">4858</span>, <span class="number">4858</span>, <span class="number">4859</span>, <span class="number">4861</span>, <span class="number">4864</span>, <span class="number">4865</span>, <span class="number">4865</span>, <span class="number">4866</span>, <span class="number">4868</span>, <span class="number">4871</span>, <span class="number">4872</span>, <span class="number">4872</span>, <span class="number">4873</span>, <span class="number">4875</span>, <span class="number">4878</span>, <span class="number">4879</span>, <span class="number">4879</span>, <span class="number">4880</span>, <span class="number">4882</span>, <span class="number">4885</span>, <span class="number">4886</span>, <span class="number">4886</span>, <span class="number">4887</span>, <span class="number">4889</span>, <span class="number">4892</span>, <span class="number">4893</span>, <span class="number">4893</span>, <span class="number">4894</span>, <span class="number">4896</span>, <span class="number">4899</span>, <span class="number">4900</span>, <span class="number">4900</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> t2[<span class="number">3510</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">55</span>, <span class="number">55</span>, <span class="number">55</span>, <span class="number">55</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">105</span>, <span class="number">105</span>, <span class="number">105</span>, <span class="number">105</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">130</span>, <span class="number">130</span>, <span class="number">130</span>, <span class="number">130</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">135</span>, <span class="number">135</span>, <span class="number">135</span>, <span class="number">135</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">140</span>, <span class="number">140</span>, <span class="number">140</span>, <span class="number">140</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">145</span>, <span class="number">145</span>, <span class="number">145</span>, <span class="number">145</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">155</span>, <span class="number">155</span>, <span class="number">155</span>, <span class="number">155</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">160</span>, <span class="number">160</span>, <span class="number">160</span>, <span class="number">160</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">165</span>, <span class="number">165</span>, <span class="number">165</span>, <span class="number">165</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">170</span>, <span class="number">170</span>, <span class="number">170</span>, <span class="number">170</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">175</span>, <span class="number">175</span>, <span class="number">175</span>, <span class="number">175</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">185</span>, <span class="number">185</span>, <span class="number">185</span>, <span class="number">185</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">190</span>, <span class="number">190</span>, <span class="number">190</span>, <span class="number">190</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">195</span>, <span class="number">195</span>, <span class="number">195</span>, <span class="number">195</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">205</span>, <span class="number">205</span>, <span class="number">205</span>, <span class="number">205</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">210</span>, <span class="number">210</span>, <span class="number">210</span>, <span class="number">210</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">215</span>, <span class="number">215</span>, <span class="number">215</span>, <span class="number">215</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">220</span>, <span class="number">220</span>, <span class="number">220</span>, <span class="number">220</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">245</span>, <span class="number">245</span>, <span class="number">245</span>, <span class="number">245</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">256</span>, <span class="number">257</span>, <span class="number">258</span>, <span class="number">259</span>, <span class="number">260</span>, <span class="number">260</span>, <span class="number">260</span>, <span class="number">260</span>, <span class="number">260</span>, <span class="number">260</span>, <span class="number">261</span>, <span class="number">262</span>, <span class="number">263</span>, <span class="number">264</span>, <span class="number">265</span>, <span class="number">265</span>, <span class="number">265</span>, <span class="number">265</span>, <span class="number">265</span>, <span class="number">265</span>, <span class="number">266</span>, <span class="number">267</span>, <span class="number">268</span>, <span class="number">269</span>, <span class="number">270</span>, <span class="number">270</span>, <span class="number">270</span>, <span class="number">270</span>, <span class="number">270</span>, <span class="number">270</span>, <span class="number">271</span>, <span class="number">272</span>, <span class="number">273</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">275</span>, <span class="number">275</span>, <span class="number">275</span>, <span class="number">275</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">280</span>, <span class="number">280</span>, <span class="number">280</span>, <span class="number">280</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">285</span>, <span class="number">285</span>, <span class="number">285</span>, <span class="number">285</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">287</span>, <span class="number">288</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">290</span>, <span class="number">290</span>, <span class="number">290</span>, <span class="number">290</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">295</span>, <span class="number">295</span>, <span class="number">295</span>, <span class="number">295</span>, <span class="number">295</span>, <span class="number">296</span>, <span class="number">297</span>, <span class="number">298</span>, <span class="number">299</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>, <span class="number">305</span>, <span class="number">305</span>, <span class="number">305</span>, <span class="number">305</span>, <span class="number">305</span>, <span class="number">306</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">310</span>, <span class="number">310</span>, <span class="number">310</span>, <span class="number">310</span>, <span class="number">310</span>, <span class="number">310</span>, <span class="number">311</span>, <span class="number">312</span>, <span class="number">313</span>, <span class="number">314</span>, <span class="number">315</span>, <span class="number">315</span>, <span class="number">315</span>, <span class="number">315</span>, <span class="number">315</span>, <span class="number">315</span>, <span class="number">316</span>, <span class="number">317</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">320</span>, <span class="number">320</span>, <span class="number">320</span>, <span class="number">320</span>, <span class="number">320</span>, <span class="number">321</span>, <span class="number">322</span>, <span class="number">323</span>, <span class="number">324</span>, <span class="number">325</span>, <span class="number">325</span>, <span class="number">325</span>, <span class="number">325</span>, <span class="number">325</span>, <span class="number">325</span>, <span class="number">326</span>, <span class="number">327</span>, <span class="number">328</span>, <span class="number">329</span>, <span class="number">330</span>, <span class="number">330</span>, <span class="number">330</span>, <span class="number">330</span>, <span class="number">330</span>, <span class="number">330</span>, <span class="number">331</span>, <span class="number">332</span>, <span class="number">333</span>, <span class="number">334</span>, <span class="number">335</span>, <span class="number">335</span>, <span class="number">335</span>, <span class="number">335</span>, <span class="number">335</span>, <span class="number">335</span>, <span class="number">336</span>, <span class="number">337</span>, <span class="number">338</span>, <span class="number">339</span>, <span class="number">340</span>, <span class="number">340</span>, <span class="number">340</span>, <span class="number">340</span>, <span class="number">340</span>, <span class="number">340</span>, <span class="number">341</span>, <span class="number">342</span>, <span class="number">343</span>, <span class="number">344</span>, <span class="number">345</span>, <span class="number">345</span>, <span class="number">345</span>, <span class="number">345</span>, <span class="number">345</span>, <span class="number">345</span>, <span class="number">346</span>, <span class="number">347</span>, <span class="number">348</span>, <span class="number">349</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">351</span>, <span class="number">352</span>, <span class="number">353</span>, <span class="number">354</span>, <span class="number">355</span>, <span class="number">355</span>, <span class="number">355</span>, <span class="number">355</span>, <span class="number">355</span>, <span class="number">355</span>, <span class="number">356</span>, <span class="number">357</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">360</span>, <span class="number">360</span>, <span class="number">360</span>, <span class="number">360</span>, <span class="number">360</span>, <span class="number">361</span>, <span class="number">362</span>, <span class="number">363</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">365</span>, <span class="number">365</span>, <span class="number">365</span>, <span class="number">365</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">370</span>, <span class="number">370</span>, <span class="number">370</span>, <span class="number">370</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">376</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">380</span>, <span class="number">380</span>, <span class="number">380</span>, <span class="number">380</span>, <span class="number">380</span>, <span class="number">380</span>, <span class="number">381</span>, <span class="number">382</span>, <span class="number">383</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">385</span>, <span class="number">385</span>, <span class="number">385</span>, <span class="number">385</span>, <span class="number">385</span>, <span class="number">386</span>, <span class="number">387</span>, <span class="number">388</span>, <span class="number">389</span>, <span class="number">390</span>, <span class="number">390</span>, <span class="number">390</span>, <span class="number">390</span>, <span class="number">390</span>, <span class="number">390</span>, <span class="number">391</span>, <span class="number">392</span>, <span class="number">393</span>, <span class="number">394</span>, <span class="number">395</span>, <span class="number">395</span>, <span class="number">395</span>, <span class="number">395</span>, <span class="number">395</span>, <span class="number">395</span>, <span class="number">396</span>, <span class="number">397</span>, <span class="number">398</span>, <span class="number">399</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="number">402</span>, <span class="number">403</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">405</span>, <span class="number">405</span>, <span class="number">405</span>, <span class="number">405</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">407</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">410</span>, <span class="number">410</span>, <span class="number">410</span>, <span class="number">410</span>, <span class="number">410</span>, <span class="number">411</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">415</span>, <span class="number">415</span>, <span class="number">415</span>, <span class="number">415</span>, <span class="number">415</span>, <span class="number">415</span>, <span class="number">416</span>, <span class="number">417</span>, <span class="number">418</span>, <span class="number">419</span>, <span class="number">420</span>, <span class="number">420</span>, <span class="number">420</span>, <span class="number">420</span>, <span class="number">420</span>, <span class="number">420</span>, <span class="number">421</span>, <span class="number">422</span>, <span class="number">423</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">425</span>, <span class="number">425</span>, <span class="number">425</span>, <span class="number">425</span>, <span class="number">425</span>, <span class="number">426</span>, <span class="number">427</span>, <span class="number">428</span>, <span class="number">429</span>, <span class="number">430</span>, <span class="number">430</span>, <span class="number">430</span>, <span class="number">430</span>, <span class="number">430</span>, <span class="number">430</span>, <span class="number">431</span>, <span class="number">432</span>, <span class="number">433</span>, <span class="number">434</span>, <span class="number">435</span>, <span class="number">435</span>, <span class="number">435</span>, <span class="number">435</span>, <span class="number">435</span>, <span class="number">435</span>, <span class="number">436</span>, <span class="number">437</span>, <span class="number">438</span>, <span class="number">439</span>, <span class="number">440</span>, <span class="number">440</span>, <span class="number">440</span>, <span class="number">440</span>, <span class="number">440</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">443</span>, <span class="number">444</span>, <span class="number">445</span>, <span class="number">445</span>, <span class="number">445</span>, <span class="number">445</span>, <span class="number">445</span>, <span class="number">445</span>, <span class="number">446</span>, <span class="number">447</span>, <span class="number">448</span>, <span class="number">449</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">451</span>, <span class="number">452</span>, <span class="number">453</span>, <span class="number">454</span>, <span class="number">455</span>, <span class="number">455</span>, <span class="number">455</span>, <span class="number">455</span>, <span class="number">455</span>, <span class="number">455</span>, <span class="number">456</span>, <span class="number">457</span>, <span class="number">458</span>, <span class="number">459</span>, <span class="number">460</span>, <span class="number">460</span>, <span class="number">460</span>, <span class="number">460</span>, <span class="number">460</span>, <span class="number">460</span>, <span class="number">461</span>, <span class="number">462</span>, <span class="number">463</span>, <span class="number">464</span>, <span class="number">465</span>, <span class="number">465</span>, <span class="number">465</span>, <span class="number">465</span>, <span class="number">465</span>, <span class="number">465</span>, <span class="number">466</span>, <span class="number">467</span>, <span class="number">468</span>, <span class="number">469</span>, <span class="number">470</span>, <span class="number">470</span>, <span class="number">470</span>, <span class="number">470</span>, <span class="number">470</span>, <span class="number">470</span>, <span class="number">471</span>, <span class="number">472</span>, <span class="number">473</span>, <span class="number">474</span>, <span class="number">475</span>, <span class="number">475</span>, <span class="number">475</span>, <span class="number">475</span>, <span class="number">475</span>, <span class="number">475</span>, <span class="number">476</span>, <span class="number">477</span>, <span class="number">478</span>, <span class="number">479</span>, <span class="number">480</span>, <span class="number">480</span>, <span class="number">480</span>, <span class="number">480</span>, <span class="number">480</span>, <span class="number">480</span>, <span class="number">481</span>, <span class="number">482</span>, <span class="number">483</span>, <span class="number">484</span>, <span class="number">485</span>, <span class="number">485</span>, <span class="number">485</span>, <span class="number">485</span>, <span class="number">485</span>, <span class="number">485</span>, <span class="number">486</span>, <span class="number">487</span>, <span class="number">488</span>, <span class="number">489</span>, <span class="number">490</span>, <span class="number">490</span>, <span class="number">490</span>, <span class="number">490</span>, <span class="number">490</span>, <span class="number">490</span>, <span class="number">491</span>, <span class="number">492</span>, <span class="number">493</span>, <span class="number">494</span>, <span class="number">495</span>, <span class="number">495</span>, <span class="number">495</span>, <span class="number">495</span>, <span class="number">495</span>, <span class="number">495</span>, <span class="number">496</span>, <span class="number">497</span>, <span class="number">498</span>, <span class="number">499</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">501</span>, <span class="number">502</span>, <span class="number">503</span>, <span class="number">504</span>, <span class="number">505</span>, <span class="number">505</span>, <span class="number">505</span>, <span class="number">505</span>, <span class="number">505</span>, <span class="number">505</span>, <span class="number">506</span>, <span class="number">507</span>, <span class="number">508</span>, <span class="number">509</span>, <span class="number">510</span>, <span class="number">510</span>, <span class="number">510</span>, <span class="number">510</span>, <span class="number">510</span>, <span class="number">510</span>, <span class="number">511</span>, <span class="number">512</span>, <span class="number">513</span>, <span class="number">514</span>, <span class="number">515</span>, <span class="number">515</span>, <span class="number">515</span>, <span class="number">515</span>, <span class="number">515</span>, <span class="number">515</span>, <span class="number">516</span>, <span class="number">517</span>, <span class="number">518</span>, <span class="number">519</span>, <span class="number">520</span>, <span class="number">520</span>, <span class="number">520</span>, <span class="number">520</span>, <span class="number">520</span>, <span class="number">520</span>, <span class="number">521</span>, <span class="number">522</span>, <span class="number">523</span>, <span class="number">524</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">526</span>, <span class="number">527</span>, <span class="number">528</span>, <span class="number">529</span>, <span class="number">530</span>, <span class="number">530</span>, <span class="number">530</span>, <span class="number">530</span>, <span class="number">530</span>, <span class="number">530</span>, <span class="number">531</span>, <span class="number">532</span>, <span class="number">533</span>, <span class="number">534</span>, <span class="number">535</span>, <span class="number">535</span>, <span class="number">535</span>, <span class="number">535</span>, <span class="number">535</span>, <span class="number">535</span>, <span class="number">536</span>, <span class="number">537</span>, <span class="number">538</span>, <span class="number">539</span>, <span class="number">540</span>, <span class="number">540</span>, <span class="number">540</span>, <span class="number">540</span>, <span class="number">540</span>, <span class="number">540</span>, <span class="number">541</span>, <span class="number">542</span>, <span class="number">543</span>, <span class="number">544</span>, <span class="number">545</span>, <span class="number">545</span>, <span class="number">545</span>, <span class="number">545</span>, <span class="number">545</span>, <span class="number">545</span>, <span class="number">546</span>, <span class="number">547</span>, <span class="number">548</span>, <span class="number">549</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">551</span>, <span class="number">552</span>, <span class="number">553</span>, <span class="number">554</span>, <span class="number">555</span>, <span class="number">555</span>, <span class="number">555</span>, <span class="number">555</span>, <span class="number">555</span>, <span class="number">555</span>, <span class="number">556</span>, <span class="number">557</span>, <span class="number">558</span>, <span class="number">559</span>, <span class="number">560</span>, <span class="number">560</span>, <span class="number">560</span>, <span class="number">560</span>, <span class="number">560</span>, <span class="number">560</span>, <span class="number">561</span>, <span class="number">562</span>, <span class="number">563</span>, <span class="number">564</span>, <span class="number">565</span>, <span class="number">565</span>, <span class="number">565</span>, <span class="number">565</span>, <span class="number">565</span>, <span class="number">565</span>, <span class="number">566</span>, <span class="number">567</span>, <span class="number">568</span>, <span class="number">569</span>, <span class="number">570</span>, <span class="number">570</span>, <span class="number">570</span>, <span class="number">570</span>, <span class="number">570</span>, <span class="number">570</span>, <span class="number">571</span>, <span class="number">572</span>, <span class="number">573</span>, <span class="number">574</span>, <span class="number">575</span>, <span class="number">575</span>, <span class="number">575</span>, <span class="number">575</span>, <span class="number">575</span>, <span class="number">575</span>, <span class="number">576</span>, <span class="number">577</span>, <span class="number">578</span>, <span class="number">579</span>, <span class="number">580</span>, <span class="number">580</span>, <span class="number">580</span>, <span class="number">580</span>, <span class="number">580</span>, <span class="number">580</span>, <span class="number">581</span>, <span class="number">582</span>, <span class="number">583</span>, <span class="number">584</span>, <span class="number">585</span>, <span class="number">585</span>, <span class="number">585</span>, <span class="number">585</span>, <span class="number">585</span>, <span class="number">585</span>, <span class="number">586</span>, <span class="number">587</span>, <span class="number">588</span>, <span class="number">589</span>, <span class="number">590</span>, <span class="number">590</span>, <span class="number">590</span>, <span class="number">590</span>, <span class="number">590</span>, <span class="number">590</span>, <span class="number">591</span>, <span class="number">592</span>, <span class="number">593</span>, <span class="number">594</span>, <span class="number">595</span>, <span class="number">595</span>, <span class="number">595</span>, <span class="number">595</span>, <span class="number">595</span>, <span class="number">595</span>, <span class="number">596</span>, <span class="number">597</span>, <span class="number">598</span>, <span class="number">599</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">601</span>, <span class="number">602</span>, <span class="number">603</span>, <span class="number">604</span>, <span class="number">605</span>, <span class="number">605</span>, <span class="number">605</span>, <span class="number">605</span>, <span class="number">605</span>, <span class="number">605</span>, <span class="number">606</span>, <span class="number">607</span>, <span class="number">608</span>, <span class="number">609</span>, <span class="number">610</span>, <span class="number">610</span>, <span class="number">610</span>, <span class="number">610</span>, <span class="number">610</span>, <span class="number">610</span>, <span class="number">611</span>, <span class="number">612</span>, <span class="number">613</span>, <span class="number">614</span>, <span class="number">615</span>, <span class="number">615</span>, <span class="number">615</span>, <span class="number">615</span>, <span class="number">615</span>, <span class="number">615</span>, <span class="number">616</span>, <span class="number">617</span>, <span class="number">618</span>, <span class="number">619</span>, <span class="number">620</span>, <span class="number">620</span>, <span class="number">620</span>, <span class="number">620</span>, <span class="number">620</span>, <span class="number">620</span>, <span class="number">621</span>, <span class="number">622</span>, <span class="number">623</span>, <span class="number">624</span>, <span class="number">625</span>, <span class="number">625</span>, <span class="number">625</span>, <span class="number">625</span>, <span class="number">625</span>, <span class="number">625</span>, <span class="number">626</span>, <span class="number">627</span>, <span class="number">628</span>, <span class="number">629</span>, <span class="number">630</span>, <span class="number">630</span>, <span class="number">630</span>, <span class="number">630</span>, <span class="number">630</span>, <span class="number">630</span>, <span class="number">631</span>, <span class="number">632</span>, <span class="number">633</span>, <span class="number">634</span>, <span class="number">635</span>, <span class="number">635</span>, <span class="number">635</span>, <span class="number">635</span>, <span class="number">635</span>, <span class="number">635</span>, <span class="number">636</span>, <span class="number">637</span>, <span class="number">638</span>, <span class="number">639</span>, <span class="number">640</span>, <span class="number">640</span>, <span class="number">640</span>, <span class="number">640</span>, <span class="number">640</span>, <span class="number">640</span>, <span class="number">641</span>, <span class="number">642</span>, <span class="number">643</span>, <span class="number">644</span>, <span class="number">645</span>, <span class="number">645</span>, <span class="number">645</span>, <span class="number">645</span>, <span class="number">645</span>, <span class="number">645</span>, <span class="number">646</span>, <span class="number">647</span>, <span class="number">648</span>, <span class="number">649</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">651</span>, <span class="number">652</span>, <span class="number">653</span>, <span class="number">654</span>, <span class="number">655</span>, <span class="number">655</span>, <span class="number">655</span>, <span class="number">655</span>, <span class="number">655</span>, <span class="number">655</span>, <span class="number">656</span>, <span class="number">657</span>, <span class="number">658</span>, <span class="number">659</span>, <span class="number">660</span>, <span class="number">660</span>, <span class="number">660</span>, <span class="number">660</span>, <span class="number">660</span>, <span class="number">660</span>, <span class="number">661</span>, <span class="number">662</span>, <span class="number">663</span>, <span class="number">664</span>, <span class="number">665</span>, <span class="number">665</span>, <span class="number">665</span>, <span class="number">665</span>, <span class="number">665</span>, <span class="number">665</span>, <span class="number">666</span>, <span class="number">667</span>, <span class="number">668</span>, <span class="number">669</span>, <span class="number">670</span>, <span class="number">670</span>, <span class="number">670</span>, <span class="number">670</span>, <span class="number">670</span>, <span class="number">670</span>, <span class="number">671</span>, <span class="number">672</span>, <span class="number">673</span>, <span class="number">674</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">676</span>, <span class="number">677</span>, <span class="number">678</span>, <span class="number">679</span>, <span class="number">680</span>, <span class="number">680</span>, <span class="number">680</span>, <span class="number">680</span>, <span class="number">680</span>, <span class="number">680</span>, <span class="number">681</span>, <span class="number">682</span>, <span class="number">683</span>, <span class="number">684</span>, <span class="number">685</span>, <span class="number">685</span>, <span class="number">685</span>, <span class="number">685</span>, <span class="number">685</span>, <span class="number">685</span>, <span class="number">686</span>, <span class="number">687</span>, <span class="number">688</span>, <span class="number">689</span>, <span class="number">690</span>, <span class="number">690</span>, <span class="number">690</span>, <span class="number">690</span>, <span class="number">690</span>, <span class="number">690</span>, <span class="number">691</span>, <span class="number">692</span>, <span class="number">693</span>, <span class="number">694</span>, <span class="number">695</span>, <span class="number">695</span>, <span class="number">695</span>, <span class="number">695</span>, <span class="number">695</span>, <span class="number">695</span>, <span class="number">696</span>, <span class="number">697</span>, <span class="number">698</span>, <span class="number">699</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">701</span>, <span class="number">702</span>, <span class="number">703</span>, <span class="number">704</span>, <span class="number">705</span>, <span class="number">705</span>, <span class="number">705</span>, <span class="number">705</span>, <span class="number">705</span>, <span class="number">705</span>, <span class="number">706</span>, <span class="number">707</span>, <span class="number">708</span>, <span class="number">709</span>, <span class="number">710</span>, <span class="number">710</span>, <span class="number">710</span>, <span class="number">710</span>, <span class="number">710</span>, <span class="number">710</span>, <span class="number">711</span>, <span class="number">712</span>, <span class="number">713</span>, <span class="number">714</span>, <span class="number">715</span>, <span class="number">715</span>, <span class="number">715</span>, <span class="number">715</span>, <span class="number">715</span>, <span class="number">715</span>, <span class="number">716</span>, <span class="number">717</span>, <span class="number">718</span>, <span class="number">719</span>, <span class="number">720</span>, <span class="number">720</span>, <span class="number">720</span>, <span class="number">720</span>, <span class="number">720</span>, <span class="number">720</span>, <span class="number">721</span>, <span class="number">722</span>, <span class="number">723</span>, <span class="number">724</span>, <span class="number">725</span>, <span class="number">725</span>, <span class="number">725</span>, <span class="number">725</span>, <span class="number">725</span>, <span class="number">725</span>, <span class="number">726</span>, <span class="number">727</span>, <span class="number">728</span>, <span class="number">729</span>, <span class="number">730</span>, <span class="number">730</span>, <span class="number">730</span>, <span class="number">730</span>, <span class="number">730</span>, <span class="number">730</span>, <span class="number">731</span>, <span class="number">732</span>, <span class="number">733</span>, <span class="number">734</span>, <span class="number">735</span>, <span class="number">735</span>, <span class="number">735</span>, <span class="number">735</span>, <span class="number">735</span>, <span class="number">735</span>, <span class="number">736</span>, <span class="number">737</span>, <span class="number">738</span>, <span class="number">739</span>, <span class="number">740</span>, <span class="number">740</span>, <span class="number">740</span>, <span class="number">740</span>, <span class="number">740</span>, <span class="number">740</span>, <span class="number">741</span>, <span class="number">742</span>, <span class="number">743</span>, <span class="number">744</span>, <span class="number">745</span>, <span class="number">745</span>, <span class="number">745</span>, <span class="number">745</span>, <span class="number">745</span>, <span class="number">745</span>, <span class="number">746</span>, <span class="number">747</span>, <span class="number">748</span>, <span class="number">749</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">751</span>, <span class="number">752</span>, <span class="number">753</span>, <span class="number">754</span>, <span class="number">755</span>, <span class="number">755</span>, <span class="number">755</span>, <span class="number">755</span>, <span class="number">755</span>, <span class="number">755</span>, <span class="number">756</span>, <span class="number">757</span>, <span class="number">758</span>, <span class="number">759</span>, <span class="number">760</span>, <span class="number">760</span>, <span class="number">760</span>, <span class="number">760</span>, <span class="number">760</span>, <span class="number">760</span>, <span class="number">761</span>, <span class="number">762</span>, <span class="number">763</span>, <span class="number">764</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">766</span>, <span class="number">767</span>, <span class="number">768</span>, <span class="number">769</span>, <span class="number">770</span>, <span class="number">770</span>, <span class="number">770</span>, <span class="number">770</span>, <span class="number">770</span>, <span class="number">770</span>, <span class="number">771</span>, <span class="number">772</span>, <span class="number">773</span>, <span class="number">774</span>, <span class="number">775</span>, <span class="number">775</span>, <span class="number">775</span>, <span class="number">775</span>, <span class="number">775</span>, <span class="number">775</span>, <span class="number">776</span>, <span class="number">777</span>, <span class="number">778</span>, <span class="number">779</span>, <span class="number">780</span>, <span class="number">780</span>, <span class="number">780</span>, <span class="number">780</span>, <span class="number">780</span>, <span class="number">780</span>, <span class="number">781</span>, <span class="number">782</span>, <span class="number">783</span>, <span class="number">784</span>, <span class="number">785</span>, <span class="number">785</span>, <span class="number">785</span>, <span class="number">785</span>, <span class="number">785</span>, <span class="number">785</span>, <span class="number">786</span>, <span class="number">787</span>, <span class="number">788</span>, <span class="number">789</span>, <span class="number">790</span>, <span class="number">790</span>, <span class="number">790</span>, <span class="number">790</span>, <span class="number">790</span>, <span class="number">790</span>, <span class="number">791</span>, <span class="number">792</span>, <span class="number">793</span>, <span class="number">794</span>, <span class="number">795</span>, <span class="number">795</span>, <span class="number">795</span>, <span class="number">795</span>, <span class="number">795</span>, <span class="number">795</span>, <span class="number">796</span>, <span class="number">797</span>, <span class="number">798</span>, <span class="number">799</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">801</span>, <span class="number">802</span>, <span class="number">803</span>, <span class="number">804</span>, <span class="number">805</span>, <span class="number">805</span>, <span class="number">805</span>, <span class="number">805</span>, <span class="number">805</span>, <span class="number">805</span>, <span class="number">806</span>, <span class="number">807</span>, <span class="number">808</span>, <span class="number">809</span>, <span class="number">810</span>, <span class="number">810</span>, <span class="number">810</span>, <span class="number">810</span>, <span class="number">810</span>, <span class="number">810</span>, <span class="number">811</span>, <span class="number">812</span>, <span class="number">813</span>, <span class="number">814</span>, <span class="number">815</span>, <span class="number">815</span>, <span class="number">815</span>, <span class="number">815</span>, <span class="number">815</span>, <span class="number">815</span>, <span class="number">816</span>, <span class="number">817</span>, <span class="number">818</span>, <span class="number">819</span>, <span class="number">820</span>, <span class="number">820</span>, <span class="number">820</span>, <span class="number">820</span>, <span class="number">820</span>, <span class="number">820</span>, <span class="number">821</span>, <span class="number">822</span>, <span class="number">823</span>, <span class="number">824</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">826</span>, <span class="number">827</span>, <span class="number">828</span>, <span class="number">829</span>, <span class="number">830</span>, <span class="number">830</span>, <span class="number">830</span>, <span class="number">830</span>, <span class="number">830</span>, <span class="number">830</span>, <span class="number">831</span>, <span class="number">832</span>, <span class="number">833</span>, <span class="number">834</span>, <span class="number">835</span>, <span class="number">835</span>, <span class="number">835</span>, <span class="number">835</span>, <span class="number">835</span>, <span class="number">835</span>, <span class="number">836</span>, <span class="number">837</span>, <span class="number">838</span>, <span class="number">839</span>, <span class="number">840</span>, <span class="number">840</span>, <span class="number">840</span>, <span class="number">840</span>, <span class="number">840</span>, <span class="number">840</span>, <span class="number">841</span>, <span class="number">842</span>, <span class="number">843</span>, <span class="number">844</span>, <span class="number">845</span>, <span class="number">845</span>, <span class="number">845</span>, <span class="number">845</span>, <span class="number">845</span>, <span class="number">845</span>, <span class="number">846</span>, <span class="number">847</span>, <span class="number">848</span>, <span class="number">849</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">851</span>, <span class="number">852</span>, <span class="number">853</span>, <span class="number">854</span>, <span class="number">855</span>, <span class="number">855</span>, <span class="number">855</span>, <span class="number">855</span>, <span class="number">855</span>, <span class="number">855</span>, <span class="number">856</span>, <span class="number">857</span>, <span class="number">858</span>, <span class="number">859</span>, <span class="number">860</span>, <span class="number">860</span>, <span class="number">860</span>, <span class="number">860</span>, <span class="number">860</span>, <span class="number">860</span>, <span class="number">861</span>, <span class="number">862</span>, <span class="number">863</span>, <span class="number">864</span>, <span class="number">865</span>, <span class="number">865</span>, <span class="number">865</span>, <span class="number">865</span>, <span class="number">865</span>, <span class="number">865</span>, <span class="number">866</span>, <span class="number">867</span>, <span class="number">868</span>, <span class="number">869</span>, <span class="number">870</span>, <span class="number">870</span>, <span class="number">870</span>, <span class="number">870</span>, <span class="number">870</span>, <span class="number">870</span>, <span class="number">871</span>, <span class="number">872</span>, <span class="number">873</span>, <span class="number">874</span>, <span class="number">875</span>, <span class="number">875</span>, <span class="number">875</span>, <span class="number">875</span>, <span class="number">875</span>, <span class="number">875</span>, <span class="number">876</span>, <span class="number">877</span>, <span class="number">878</span>, <span class="number">879</span>, <span class="number">880</span>, <span class="number">880</span>, <span class="number">880</span>, <span class="number">880</span>, <span class="number">880</span>, <span class="number">880</span>, <span class="number">881</span>, <span class="number">882</span>, <span class="number">883</span>, <span class="number">884</span>, <span class="number">885</span>, <span class="number">885</span>, <span class="number">885</span>, <span class="number">885</span>, <span class="number">885</span>, <span class="number">885</span>, <span class="number">886</span>, <span class="number">887</span>, <span class="number">888</span>, <span class="number">889</span>, <span class="number">890</span>, <span class="number">890</span>, <span class="number">890</span>, <span class="number">890</span>, <span class="number">890</span>, <span class="number">890</span>, <span class="number">891</span>, <span class="number">892</span>, <span class="number">893</span>, <span class="number">894</span>, <span class="number">895</span>, <span class="number">895</span>, <span class="number">895</span>, <span class="number">895</span>, <span class="number">895</span>, <span class="number">895</span>, <span class="number">896</span>, <span class="number">897</span>, <span class="number">898</span>, <span class="number">899</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">901</span>, <span class="number">902</span>, <span class="number">903</span>, <span class="number">904</span>, <span class="number">905</span>, <span class="number">905</span>, <span class="number">905</span>, <span class="number">905</span>, <span class="number">905</span>, <span class="number">905</span>, <span class="number">906</span>, <span class="number">907</span>, <span class="number">908</span>, <span class="number">909</span>, <span class="number">910</span>, <span class="number">910</span>, <span class="number">910</span>, <span class="number">910</span>, <span class="number">910</span>, <span class="number">910</span>, <span class="number">911</span>, <span class="number">912</span>, <span class="number">913</span>, <span class="number">914</span>, <span class="number">915</span>, <span class="number">915</span>, <span class="number">915</span>, <span class="number">915</span>, <span class="number">915</span>, <span class="number">915</span>, <span class="number">916</span>, <span class="number">917</span>, <span class="number">918</span>, <span class="number">919</span>, <span class="number">920</span>, <span class="number">920</span>, <span class="number">920</span>, <span class="number">920</span>, <span class="number">920</span>, <span class="number">920</span>, <span class="number">921</span>, <span class="number">922</span>, <span class="number">923</span>, <span class="number">924</span>, <span class="number">925</span>, <span class="number">925</span>, <span class="number">925</span>, <span class="number">925</span>, <span class="number">925</span>, <span class="number">925</span>, <span class="number">926</span>, <span class="number">927</span>, <span class="number">928</span>, <span class="number">929</span>, <span class="number">930</span>, <span class="number">930</span>, <span class="number">930</span>, <span class="number">930</span>, <span class="number">930</span>, <span class="number">930</span>, <span class="number">931</span>, <span class="number">932</span>, <span class="number">933</span>, <span class="number">934</span>, <span class="number">935</span>, <span class="number">935</span>, <span class="number">935</span>, <span class="number">935</span>, <span class="number">935</span>, <span class="number">935</span>, <span class="number">936</span>, <span class="number">937</span>, <span class="number">938</span>, <span class="number">939</span>, <span class="number">940</span>, <span class="number">940</span>, <span class="number">940</span>, <span class="number">940</span>, <span class="number">940</span>, <span class="number">940</span>, <span class="number">941</span>, <span class="number">942</span>, <span class="number">943</span>, <span class="number">944</span>, <span class="number">945</span>, <span class="number">945</span>, <span class="number">945</span>, <span class="number">945</span>, <span class="number">945</span>, <span class="number">945</span>, <span class="number">946</span>, <span class="number">947</span>, <span class="number">948</span>, <span class="number">949</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">951</span>, <span class="number">952</span>, <span class="number">953</span>, <span class="number">954</span>, <span class="number">955</span>, <span class="number">955</span>, <span class="number">955</span>, <span class="number">955</span>, <span class="number">955</span>, <span class="number">955</span>, <span class="number">956</span>, <span class="number">957</span>, <span class="number">958</span>, <span class="number">959</span>, <span class="number">960</span>, <span class="number">960</span>, <span class="number">960</span>, <span class="number">960</span>, <span class="number">960</span>, <span class="number">960</span>, <span class="number">961</span>, <span class="number">962</span>, <span class="number">963</span>, <span class="number">964</span>, <span class="number">965</span>, <span class="number">965</span>, <span class="number">965</span>, <span class="number">965</span>, <span class="number">965</span>, <span class="number">965</span>, <span class="number">966</span>, <span class="number">967</span>, <span class="number">968</span>, <span class="number">969</span>, <span class="number">970</span>, <span class="number">970</span>, <span class="number">970</span>, <span class="number">970</span>, <span class="number">970</span>, <span class="number">970</span>, <span class="number">971</span>, <span class="number">972</span>, <span class="number">973</span>, <span class="number">974</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">976</span>, <span class="number">977</span>, <span class="number">978</span>, <span class="number">979</span>, <span class="number">980</span>, <span class="number">980</span>, <span class="number">980</span>, <span class="number">980</span>, <span class="number">980</span>, <span class="number">980</span>, <span class="number">981</span>, <span class="number">982</span>, <span class="number">983</span>, <span class="number">984</span>, <span class="number">985</span>, <span class="number">985</span>, <span class="number">985</span>, <span class="number">985</span>, <span class="number">985</span>, <span class="number">985</span>, <span class="number">986</span>, <span class="number">987</span>, <span class="number">988</span>, <span class="number">989</span>, <span class="number">990</span>, <span class="number">990</span>, <span class="number">990</span>, <span class="number">990</span>, <span class="number">990</span>, <span class="number">990</span>, <span class="number">991</span>, <span class="number">992</span>, <span class="number">993</span>, <span class="number">994</span>, <span class="number">995</span>, <span class="number">995</span>, <span class="number">995</span>, <span class="number">995</span>, <span class="number">995</span>, <span class="number">995</span>, <span class="number">996</span>, <span class="number">997</span>, <span class="number">998</span>, <span class="number">999</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1003</span>, <span class="number">1004</span>, <span class="number">1005</span>, <span class="number">1005</span>, <span class="number">1005</span>, <span class="number">1005</span>, <span class="number">1005</span>, <span class="number">1005</span>, <span class="number">1006</span>, <span class="number">1007</span>, <span class="number">1008</span>, <span class="number">1009</span>, <span class="number">1010</span>, <span class="number">1010</span>, <span class="number">1010</span>, <span class="number">1010</span>, <span class="number">1010</span>, <span class="number">1010</span>, <span class="number">1011</span>, <span class="number">1012</span>, <span class="number">1013</span>, <span class="number">1014</span>, <span class="number">1015</span>, <span class="number">1015</span>, <span class="number">1015</span>, <span class="number">1015</span>, <span class="number">1015</span>, <span class="number">1015</span>, <span class="number">1016</span>, <span class="number">1017</span>, <span class="number">1018</span>, <span class="number">1019</span>, <span class="number">1020</span>, <span class="number">1020</span>, <span class="number">1020</span>, <span class="number">1020</span>, <span class="number">1020</span>, <span class="number">1020</span>, <span class="number">1021</span>, <span class="number">1022</span>, <span class="number">1023</span>, <span class="number">1024</span>, <span class="number">1025</span>, <span class="number">1025</span>, <span class="number">1025</span>, <span class="number">1025</span>, <span class="number">1025</span>, <span class="number">1025</span>, <span class="number">1026</span>, <span class="number">1027</span>, <span class="number">1028</span>, <span class="number">1029</span>, <span class="number">1030</span>, <span class="number">1030</span>, <span class="number">1030</span>, <span class="number">1030</span>, <span class="number">1030</span>, <span class="number">1030</span>, <span class="number">1031</span>, <span class="number">1032</span>, <span class="number">1033</span>, <span class="number">1034</span>, <span class="number">1035</span>, <span class="number">1035</span>, <span class="number">1035</span>, <span class="number">1035</span>, <span class="number">1035</span>, <span class="number">1035</span>, <span class="number">1036</span>, <span class="number">1037</span>, <span class="number">1038</span>, <span class="number">1039</span>, <span class="number">1040</span>, <span class="number">1040</span>, <span class="number">1040</span>, <span class="number">1040</span>, <span class="number">1040</span>, <span class="number">1040</span>, <span class="number">1041</span>, <span class="number">1042</span>, <span class="number">1043</span>, <span class="number">1044</span>, <span class="number">1045</span>, <span class="number">1045</span>, <span class="number">1045</span>, <span class="number">1045</span>, <span class="number">1045</span>, <span class="number">1045</span>, <span class="number">1046</span>, <span class="number">1047</span>, <span class="number">1048</span>, <span class="number">1049</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1051</span>, <span class="number">1052</span>, <span class="number">1053</span>, <span class="number">1054</span>, <span class="number">1055</span>, <span class="number">1055</span>, <span class="number">1055</span>, <span class="number">1055</span>, <span class="number">1055</span>, <span class="number">1055</span>, <span class="number">1056</span>, <span class="number">1057</span>, <span class="number">1058</span>, <span class="number">1059</span>, <span class="number">1060</span>, <span class="number">1060</span>, <span class="number">1060</span>, <span class="number">1060</span>, <span class="number">1060</span>, <span class="number">1060</span>, <span class="number">1061</span>, <span class="number">1062</span>, <span class="number">1063</span>, <span class="number">1064</span>, <span class="number">1065</span>, <span class="number">1065</span>, <span class="number">1065</span>, <span class="number">1065</span>, <span class="number">1065</span>, <span class="number">1065</span>, <span class="number">1066</span>, <span class="number">1067</span>, <span class="number">1068</span>, <span class="number">1069</span>, <span class="number">1070</span>, <span class="number">1070</span>, <span class="number">1070</span>, <span class="number">1070</span>, <span class="number">1070</span>, <span class="number">1070</span>, <span class="number">1071</span>, <span class="number">1072</span>, <span class="number">1073</span>, <span class="number">1074</span>, <span class="number">1075</span>, <span class="number">1075</span>, <span class="number">1075</span>, <span class="number">1075</span>, <span class="number">1075</span>, <span class="number">1075</span>, <span class="number">1076</span>, <span class="number">1077</span>, <span class="number">1078</span>, <span class="number">1079</span>, <span class="number">1080</span>, <span class="number">1080</span>, <span class="number">1080</span>, <span class="number">1080</span>, <span class="number">1080</span>, <span class="number">1080</span>, <span class="number">1081</span>, <span class="number">1082</span>, <span class="number">1083</span>, <span class="number">1084</span>, <span class="number">1085</span>, <span class="number">1085</span>, <span class="number">1085</span>, <span class="number">1085</span>, <span class="number">1085</span>, <span class="number">1085</span>, <span class="number">1086</span>, <span class="number">1087</span>, <span class="number">1088</span>, <span class="number">1089</span>, <span class="number">1090</span>, <span class="number">1090</span>, <span class="number">1090</span>, <span class="number">1090</span>, <span class="number">1090</span>, <span class="number">1090</span>, <span class="number">1091</span>, <span class="number">1092</span>, <span class="number">1093</span>, <span class="number">1094</span>, <span class="number">1095</span>, <span class="number">1095</span>, <span class="number">1095</span>, <span class="number">1095</span>, <span class="number">1095</span>, <span class="number">1095</span>, <span class="number">1096</span>, <span class="number">1097</span>, <span class="number">1098</span>, <span class="number">1099</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1101</span>, <span class="number">1102</span>, <span class="number">1103</span>, <span class="number">1104</span>, <span class="number">1105</span>, <span class="number">1105</span>, <span class="number">1105</span>, <span class="number">1105</span>, <span class="number">1105</span>, <span class="number">1105</span>, <span class="number">1106</span>, <span class="number">1107</span>, <span class="number">1108</span>, <span class="number">1109</span>, <span class="number">1110</span>, <span class="number">1110</span>, <span class="number">1110</span>, <span class="number">1110</span>, <span class="number">1110</span>, <span class="number">1110</span>, <span class="number">1111</span>, <span class="number">1112</span>, <span class="number">1113</span>, <span class="number">1114</span>, <span class="number">1115</span>, <span class="number">1115</span>, <span class="number">1115</span>, <span class="number">1115</span>, <span class="number">1115</span>, <span class="number">1115</span>, <span class="number">1116</span>, <span class="number">1117</span>, <span class="number">1118</span>, <span class="number">1119</span>, <span class="number">1120</span>, <span class="number">1120</span>, <span class="number">1120</span>, <span class="number">1120</span>, <span class="number">1120</span>, <span class="number">1120</span>, <span class="number">1121</span>, <span class="number">1122</span>, <span class="number">1123</span>, <span class="number">1124</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1126</span>, <span class="number">1127</span>, <span class="number">1128</span>, <span class="number">1129</span>, <span class="number">1130</span>, <span class="number">1130</span>, <span class="number">1130</span>, <span class="number">1130</span>, <span class="number">1130</span>, <span class="number">1130</span>, <span class="number">1131</span>, <span class="number">1132</span>, <span class="number">1133</span>, <span class="number">1134</span>, <span class="number">1135</span>, <span class="number">1135</span>, <span class="number">1135</span>, <span class="number">1135</span>, <span class="number">1135</span>, <span class="number">1135</span>, <span class="number">1136</span>, <span class="number">1137</span>, <span class="number">1138</span>, <span class="number">1139</span>, <span class="number">1140</span>, <span class="number">1140</span>, <span class="number">1140</span>, <span class="number">1140</span>, <span class="number">1140</span>, <span class="number">1140</span>, <span class="number">1141</span>, <span class="number">1142</span>, <span class="number">1143</span>, <span class="number">1144</span>, <span class="number">1145</span>, <span class="number">1145</span>, <span class="number">1145</span>, <span class="number">1145</span>, <span class="number">1145</span>, <span class="number">1145</span>, <span class="number">1146</span>, <span class="number">1147</span>, <span class="number">1148</span>, <span class="number">1149</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1151</span>, <span class="number">1152</span>, <span class="number">1153</span>, <span class="number">1154</span>, <span class="number">1155</span>, <span class="number">1155</span>, <span class="number">1155</span>, <span class="number">1155</span>, <span class="number">1155</span>, <span class="number">1155</span>, <span class="number">1156</span>, <span class="number">1157</span>, <span class="number">1158</span>, <span class="number">1159</span>, <span class="number">1160</span>, <span class="number">1160</span>, <span class="number">1160</span>, <span class="number">1160</span>, <span class="number">1160</span>, <span class="number">1160</span>, <span class="number">1161</span>, <span class="number">1162</span>, <span class="number">1163</span>, <span class="number">1164</span>, <span class="number">1165</span>, <span class="number">1165</span>, <span class="number">1165</span>, <span class="number">1165</span>, <span class="number">1165</span>, <span class="number">1165</span>, <span class="number">1166</span>, <span class="number">1167</span>, <span class="number">1168</span>, <span class="number">1169</span>, <span class="number">1170</span>, <span class="number">1170</span>, <span class="number">1170</span>, <span class="number">1170</span>, <span class="number">1170</span>, <span class="number">1170</span>, <span class="number">1171</span>, <span class="number">1172</span>, <span class="number">1173</span>, <span class="number">1174</span>, <span class="number">1175</span>, <span class="number">1175</span>, <span class="number">1175</span>, <span class="number">1175</span>, <span class="number">1175</span>, <span class="number">1175</span>, <span class="number">1176</span>, <span class="number">1177</span>, <span class="number">1178</span>, <span class="number">1179</span>, <span class="number">1180</span>, <span class="number">1180</span>, <span class="number">1180</span>, <span class="number">1180</span>, <span class="number">1180</span>, <span class="number">1180</span>, <span class="number">1181</span>, <span class="number">1182</span>, <span class="number">1183</span>, <span class="number">1184</span>, <span class="number">1185</span>, <span class="number">1185</span>, <span class="number">1185</span>, <span class="number">1185</span>, <span class="number">1185</span>, <span class="number">1185</span>, <span class="number">1186</span>, <span class="number">1187</span>, <span class="number">1188</span>, <span class="number">1189</span>, <span class="number">1190</span>, <span class="number">1190</span>, <span class="number">1190</span>, <span class="number">1190</span>, <span class="number">1190</span>, <span class="number">1190</span>, <span class="number">1191</span>, <span class="number">1192</span>, <span class="number">1193</span>, <span class="number">1194</span>, <span class="number">1195</span>, <span class="number">1195</span>, <span class="number">1195</span>, <span class="number">1195</span>, <span class="number">1195</span>, <span class="number">1195</span>, <span class="number">1196</span>, <span class="number">1197</span>, <span class="number">1198</span>, <span class="number">1199</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1201</span>, <span class="number">1202</span>, <span class="number">1203</span>, <span class="number">1204</span>, <span class="number">1205</span>, <span class="number">1205</span>, <span class="number">1205</span>, <span class="number">1205</span>, <span class="number">1205</span>, <span class="number">1205</span>, <span class="number">1206</span>, <span class="number">1207</span>, <span class="number">1208</span>, <span class="number">1209</span>, <span class="number">1210</span>, <span class="number">1210</span>, <span class="number">1210</span>, <span class="number">1210</span>, <span class="number">1210</span>, <span class="number">1210</span>, <span class="number">1211</span>, <span class="number">1212</span>, <span class="number">1213</span>, <span class="number">1214</span>, <span class="number">1215</span>, <span class="number">1215</span>, <span class="number">1215</span>, <span class="number">1215</span>, <span class="number">1215</span>, <span class="number">1215</span>, <span class="number">1216</span>, <span class="number">1217</span>, <span class="number">1218</span>, <span class="number">1219</span>, <span class="number">1220</span>, <span class="number">1220</span>, <span class="number">1220</span>, <span class="number">1220</span>, <span class="number">1220</span>, <span class="number">1220</span>, <span class="number">1221</span>, <span class="number">1222</span>, <span class="number">1223</span>, <span class="number">1224</span>, <span class="number">1225</span>, <span class="number">1225</span>, <span class="number">1225</span>, <span class="number">1225</span>, <span class="number">1225</span>, <span class="number">1225</span>, <span class="number">1226</span>, <span class="number">1227</span>, <span class="number">1228</span>, <span class="number">1229</span>, <span class="number">1230</span>, <span class="number">1230</span>, <span class="number">1230</span>, <span class="number">1230</span>, <span class="number">1230</span>, <span class="number">1230</span>, <span class="number">1231</span>, <span class="number">1232</span>, <span class="number">1233</span>, <span class="number">1234</span>, <span class="number">1235</span>, <span class="number">1235</span>, <span class="number">1235</span>, <span class="number">1235</span>, <span class="number">1235</span>, <span class="number">1235</span>, <span class="number">1236</span>, <span class="number">1237</span>, <span class="number">1238</span>, <span class="number">1239</span>, <span class="number">1240</span>, <span class="number">1240</span>, <span class="number">1240</span>, <span class="number">1240</span>, <span class="number">1240</span>, <span class="number">1240</span>, <span class="number">1241</span>, <span class="number">1242</span>, <span class="number">1243</span>, <span class="number">1244</span>, <span class="number">1245</span>, <span class="number">1245</span>, <span class="number">1245</span>, <span class="number">1245</span>, <span class="number">1245</span>, <span class="number">1245</span>, <span class="number">1246</span>, <span class="number">1247</span>, <span class="number">1248</span>, <span class="number">1249</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1251</span>, <span class="number">1252</span>, <span class="number">1253</span>, <span class="number">1254</span>, <span class="number">1255</span>, <span class="number">1255</span>, <span class="number">1255</span>, <span class="number">1255</span>, <span class="number">1255</span>, <span class="number">1255</span>, <span class="number">1256</span>, <span class="number">1257</span>, <span class="number">1258</span>, <span class="number">1259</span>, <span class="number">1260</span>, <span class="number">1260</span>, <span class="number">1260</span>, <span class="number">1260</span>, <span class="number">1260</span>, <span class="number">1260</span>, <span class="number">1261</span>, <span class="number">1262</span>, <span class="number">1263</span>, <span class="number">1264</span>, <span class="number">1265</span>, <span class="number">1265</span>, <span class="number">1265</span>, <span class="number">1265</span>, <span class="number">1265</span>, <span class="number">1265</span>, <span class="number">1266</span>, <span class="number">1267</span>, <span class="number">1268</span>, <span class="number">1269</span>, <span class="number">1270</span>, <span class="number">1270</span>, <span class="number">1270</span>, <span class="number">1270</span>, <span class="number">1270</span>, <span class="number">1270</span>, <span class="number">1271</span>, <span class="number">1272</span>, <span class="number">1273</span>, <span class="number">1274</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1276</span>, <span class="number">1277</span>, <span class="number">1278</span>, <span class="number">1279</span>, <span class="number">1280</span>, <span class="number">1280</span>, <span class="number">1280</span>, <span class="number">1280</span>, <span class="number">1280</span>, <span class="number">1280</span>, <span class="number">1281</span>, <span class="number">1282</span>, <span class="number">1283</span>, <span class="number">1284</span>, <span class="number">1285</span>, <span class="number">1285</span>, <span class="number">1285</span>, <span class="number">1285</span>, <span class="number">1285</span>, <span class="number">1285</span>, <span class="number">1286</span>, <span class="number">1287</span>, <span class="number">1288</span>, <span class="number">1289</span>, <span class="number">1290</span>, <span class="number">1290</span>, <span class="number">1290</span>, <span class="number">1290</span>, <span class="number">1290</span>, <span class="number">1290</span>, <span class="number">1291</span>, <span class="number">1292</span>, <span class="number">1293</span>, <span class="number">1294</span>, <span class="number">1295</span>, <span class="number">1295</span>, <span class="number">1295</span>, <span class="number">1295</span>, <span class="number">1295</span>, <span class="number">1295</span>, <span class="number">1296</span>, <span class="number">1297</span>, <span class="number">1298</span>, <span class="number">1299</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1301</span>, <span class="number">1302</span>, <span class="number">1303</span>, <span class="number">1304</span>, <span class="number">1305</span>, <span class="number">1305</span>, <span class="number">1305</span>, <span class="number">1305</span>, <span class="number">1305</span>, <span class="number">1305</span>, <span class="number">1306</span>, <span class="number">1307</span>, <span class="number">1308</span>, <span class="number">1309</span>, <span class="number">1310</span>, <span class="number">1310</span>, <span class="number">1310</span>, <span class="number">1310</span>, <span class="number">1310</span>, <span class="number">1310</span>, <span class="number">1311</span>, <span class="number">1312</span>, <span class="number">1313</span>, <span class="number">1314</span>, <span class="number">1315</span>, <span class="number">1315</span>, <span class="number">1315</span>, <span class="number">1315</span>, <span class="number">1315</span>, <span class="number">1315</span>, <span class="number">1316</span>, <span class="number">1317</span>, <span class="number">1318</span>, <span class="number">1319</span>, <span class="number">1320</span>, <span class="number">1320</span>, <span class="number">1320</span>, <span class="number">1320</span>, <span class="number">1320</span>, <span class="number">1320</span>, <span class="number">1321</span>, <span class="number">1322</span>, <span class="number">1323</span>, <span class="number">1324</span>, <span class="number">1325</span>, <span class="number">1325</span>, <span class="number">1325</span>, <span class="number">1325</span>, <span class="number">1325</span>, <span class="number">1325</span>, <span class="number">1326</span>, <span class="number">1327</span>, <span class="number">1328</span>, <span class="number">1329</span>, <span class="number">1330</span>, <span class="number">1330</span>, <span class="number">1330</span>, <span class="number">1330</span>, <span class="number">1330</span>, <span class="number">1330</span>, <span class="number">1331</span>, <span class="number">1332</span>, <span class="number">1333</span>, <span class="number">1334</span>, <span class="number">1335</span>, <span class="number">1335</span>, <span class="number">1335</span>, <span class="number">1335</span>, <span class="number">1335</span>, <span class="number">1335</span>, <span class="number">1336</span>, <span class="number">1337</span>, <span class="number">1338</span>, <span class="number">1339</span>, <span class="number">1340</span>, <span class="number">1340</span>, <span class="number">1340</span>, <span class="number">1340</span>, <span class="number">1340</span>, <span class="number">1340</span>, <span class="number">1341</span>, <span class="number">1342</span>, <span class="number">1343</span>, <span class="number">1344</span>, <span class="number">1345</span>, <span class="number">1345</span>, <span class="number">1345</span>, <span class="number">1345</span>, <span class="number">1345</span>, <span class="number">1345</span>, <span class="number">1346</span>, <span class="number">1347</span>, <span class="number">1348</span>, <span class="number">1349</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1351</span>, <span class="number">1352</span>, <span class="number">1353</span>, <span class="number">1354</span>, <span class="number">1355</span>, <span class="number">1355</span>, <span class="number">1355</span>, <span class="number">1355</span>, <span class="number">1355</span>, <span class="number">1355</span>, <span class="number">1356</span>, <span class="number">1357</span>, <span class="number">1358</span>, <span class="number">1359</span>, <span class="number">1360</span>, <span class="number">1360</span>, <span class="number">1360</span>, <span class="number">1360</span>, <span class="number">1360</span>, <span class="number">1360</span>, <span class="number">1361</span>, <span class="number">1362</span>, <span class="number">1363</span>, <span class="number">1364</span>, <span class="number">1365</span>, <span class="number">1365</span>, <span class="number">1365</span>, <span class="number">1365</span>, <span class="number">1365</span>, <span class="number">1365</span>, <span class="number">1366</span>, <span class="number">1367</span>, <span class="number">1368</span>, <span class="number">1369</span>, <span class="number">1370</span>, <span class="number">1370</span>, <span class="number">1370</span>, <span class="number">1370</span>, <span class="number">1370</span>, <span class="number">1370</span>, <span class="number">1371</span>, <span class="number">1372</span>, <span class="number">1373</span>, <span class="number">1374</span>, <span class="number">1375</span>, <span class="number">1375</span>, <span class="number">1375</span>, <span class="number">1375</span>, <span class="number">1375</span>, <span class="number">1375</span>, <span class="number">1376</span>, <span class="number">1377</span>, <span class="number">1378</span>, <span class="number">1379</span>, <span class="number">1380</span>, <span class="number">1380</span>, <span class="number">1380</span>, <span class="number">1380</span>, <span class="number">1380</span>, <span class="number">1380</span>, <span class="number">1381</span>, <span class="number">1382</span>, <span class="number">1383</span>, <span class="number">1384</span>, <span class="number">1385</span>, <span class="number">1385</span>, <span class="number">1385</span>, <span class="number">1385</span>, <span class="number">1385</span>, <span class="number">1385</span>, <span class="number">1386</span>, <span class="number">1387</span>, <span class="number">1388</span>, <span class="number">1389</span>, <span class="number">1390</span>, <span class="number">1390</span>, <span class="number">1390</span>, <span class="number">1390</span>, <span class="number">1390</span>, <span class="number">1390</span>, <span class="number">1391</span>, <span class="number">1392</span>, <span class="number">1393</span>, <span class="number">1394</span>, <span class="number">1395</span>, <span class="number">1395</span>, <span class="number">1395</span>, <span class="number">1395</span>, <span class="number">1395</span>, <span class="number">1395</span>, <span class="number">1396</span>, <span class="number">1397</span>, <span class="number">1398</span>, <span class="number">1399</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1401</span>, <span class="number">1402</span>, <span class="number">1403</span>, <span class="number">1404</span>, <span class="number">1405</span>, <span class="number">1405</span>, <span class="number">1405</span>, <span class="number">1405</span>, <span class="number">1405</span>, <span class="number">1405</span>, <span class="number">1406</span>, <span class="number">1407</span>, <span class="number">1408</span>, <span class="number">1409</span>, <span class="number">1410</span>, <span class="number">1410</span>, <span class="number">1410</span>, <span class="number">1410</span>, <span class="number">1410</span>, <span class="number">1410</span>, <span class="number">1411</span>, <span class="number">1412</span>, <span class="number">1413</span>, <span class="number">1414</span>, <span class="number">1415</span>, <span class="number">1415</span>, <span class="number">1415</span>, <span class="number">1415</span>, <span class="number">1415</span>, <span class="number">1415</span>, <span class="number">1416</span>, <span class="number">1417</span>, <span class="number">1418</span>, <span class="number">1419</span>, <span class="number">1420</span>, <span class="number">1420</span>, <span class="number">1420</span>, <span class="number">1420</span>, <span class="number">1420</span>, <span class="number">1420</span>, <span class="number">1421</span>, <span class="number">1422</span>, <span class="number">1423</span>, <span class="number">1424</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1426</span>, <span class="number">1427</span>, <span class="number">1428</span>, <span class="number">1429</span>, <span class="number">1430</span>, <span class="number">1430</span>, <span class="number">1430</span>, <span class="number">1430</span>, <span class="number">1430</span>, <span class="number">1430</span>, <span class="number">1431</span>, <span class="number">1432</span>, <span class="number">1433</span>, <span class="number">1434</span>, <span class="number">1435</span>, <span class="number">1435</span>, <span class="number">1435</span>, <span class="number">1435</span>, <span class="number">1435</span>, <span class="number">1435</span>, <span class="number">1436</span>, <span class="number">1437</span>, <span class="number">1438</span>, <span class="number">1439</span>, <span class="number">1440</span>, <span class="number">1440</span>, <span class="number">1440</span>, <span class="number">1440</span>, <span class="number">1440</span>, <span class="number">1440</span>, <span class="number">1441</span>, <span class="number">1442</span>, <span class="number">1443</span>, <span class="number">1444</span>, <span class="number">1445</span>, <span class="number">1445</span>, <span class="number">1445</span>, <span class="number">1445</span>, <span class="number">1445</span>, <span class="number">1445</span>, <span class="number">1446</span>, <span class="number">1447</span>, <span class="number">1448</span>, <span class="number">1449</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1451</span>, <span class="number">1452</span>, <span class="number">1453</span>, <span class="number">1454</span>, <span class="number">1455</span>, <span class="number">1455</span>, <span class="number">1455</span>, <span class="number">1455</span>, <span class="number">1455</span>, <span class="number">1455</span>, <span class="number">1456</span>, <span class="number">1457</span>, <span class="number">1458</span>, <span class="number">1459</span>, <span class="number">1460</span>, <span class="number">1460</span>, <span class="number">1460</span>, <span class="number">1460</span>, <span class="number">1460</span>, <span class="number">1460</span>, <span class="number">1461</span>, <span class="number">1462</span>, <span class="number">1463</span>, <span class="number">1464</span>, <span class="number">1465</span>, <span class="number">1465</span>, <span class="number">1465</span>, <span class="number">1465</span>, <span class="number">1465</span>, <span class="number">1465</span>, <span class="number">1466</span>, <span class="number">1467</span>, <span class="number">1468</span>, <span class="number">1469</span>, <span class="number">1470</span>, <span class="number">1470</span>, <span class="number">1470</span>, <span class="number">1470</span>, <span class="number">1470</span>, <span class="number">1470</span>, <span class="number">1471</span>, <span class="number">1472</span>, <span class="number">1473</span>, <span class="number">1474</span>, <span class="number">1475</span>, <span class="number">1475</span>, <span class="number">1475</span>, <span class="number">1475</span>, <span class="number">1475</span>, <span class="number">1475</span>, <span class="number">1476</span>, <span class="number">1477</span>, <span class="number">1478</span>, <span class="number">1479</span>, <span class="number">1480</span>, <span class="number">1480</span>, <span class="number">1480</span>, <span class="number">1480</span>, <span class="number">1480</span>, <span class="number">1480</span>, <span class="number">1481</span>, <span class="number">1482</span>, <span class="number">1483</span>, <span class="number">1484</span>, <span class="number">1485</span>, <span class="number">1485</span>, <span class="number">1485</span>, <span class="number">1485</span>, <span class="number">1485</span>, <span class="number">1485</span>, <span class="number">1486</span>, <span class="number">1487</span>, <span class="number">1488</span>, <span class="number">1489</span>, <span class="number">1490</span>, <span class="number">1490</span>, <span class="number">1490</span>, <span class="number">1490</span>, <span class="number">1490</span>, <span class="number">1490</span>, <span class="number">1491</span>, <span class="number">1492</span>, <span class="number">1493</span>, <span class="number">1494</span>, <span class="number">1495</span>, <span class="number">1495</span>, <span class="number">1495</span>, <span class="number">1495</span>, <span class="number">1495</span>, <span class="number">1495</span>, <span class="number">1496</span>, <span class="number">1497</span>, <span class="number">1498</span>, <span class="number">1499</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1501</span>, <span class="number">1502</span>, <span class="number">1503</span>, <span class="number">1504</span>, <span class="number">1505</span>, <span class="number">1505</span>, <span class="number">1505</span>, <span class="number">1505</span>, <span class="number">1505</span>, <span class="number">1505</span>, <span class="number">1506</span>, <span class="number">1507</span>, <span class="number">1508</span>, <span class="number">1509</span>, <span class="number">1510</span>, <span class="number">1510</span>, <span class="number">1510</span>, <span class="number">1510</span>, <span class="number">1510</span>, <span class="number">1510</span>, <span class="number">1511</span>, <span class="number">1512</span>, <span class="number">1513</span>, <span class="number">1514</span>, <span class="number">1515</span>, <span class="number">1515</span>, <span class="number">1515</span>, <span class="number">1515</span>, <span class="number">1515</span>, <span class="number">1515</span>, <span class="number">1516</span>, <span class="number">1517</span>, <span class="number">1518</span>, <span class="number">1519</span>, <span class="number">1520</span>, <span class="number">1520</span>, <span class="number">1520</span>, <span class="number">1520</span>, <span class="number">1520</span>, <span class="number">1520</span>, <span class="number">1521</span>, <span class="number">1522</span>, <span class="number">1523</span>, <span class="number">1524</span>, <span class="number">1525</span>, <span class="number">1525</span>, <span class="number">1525</span>, <span class="number">1525</span>, <span class="number">1525</span>, <span class="number">1525</span>, <span class="number">1526</span>, <span class="number">1527</span>, <span class="number">1528</span>, <span class="number">1529</span>, <span class="number">1530</span>, <span class="number">1530</span>, <span class="number">1530</span>, <span class="number">1530</span>, <span class="number">1530</span>, <span class="number">1530</span>, <span class="number">1531</span>, <span class="number">1532</span>, <span class="number">1533</span>, <span class="number">1534</span>, <span class="number">1535</span>, <span class="number">1535</span>, <span class="number">1535</span>, <span class="number">1535</span>, <span class="number">1535</span>, <span class="number">1535</span>, <span class="number">1536</span>, <span class="number">1537</span>, <span class="number">1538</span>, <span class="number">1539</span>, <span class="number">1540</span>, <span class="number">1540</span>, <span class="number">1540</span>, <span class="number">1540</span>, <span class="number">1540</span>, <span class="number">1540</span>, <span class="number">1541</span>, <span class="number">1542</span>, <span class="number">1543</span>, <span class="number">1544</span>, <span class="number">1545</span>, <span class="number">1545</span>, <span class="number">1545</span>, <span class="number">1545</span>, <span class="number">1545</span>, <span class="number">1545</span>, <span class="number">1546</span>, <span class="number">1547</span>, <span class="number">1548</span>, <span class="number">1549</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1551</span>, <span class="number">1552</span>, <span class="number">1553</span>, <span class="number">1554</span>, <span class="number">1555</span>, <span class="number">1555</span>, <span class="number">1555</span>, <span class="number">1555</span>, <span class="number">1555</span>, <span class="number">1555</span>, <span class="number">1556</span>, <span class="number">1557</span>, <span class="number">1558</span>, <span class="number">1559</span>, <span class="number">1560</span>, <span class="number">1560</span>, <span class="number">1560</span>, <span class="number">1560</span>, <span class="number">1560</span>, <span class="number">1560</span>, <span class="number">1561</span>, <span class="number">1562</span>, <span class="number">1563</span>, <span class="number">1564</span>, <span class="number">1565</span>, <span class="number">1565</span>, <span class="number">1565</span>, <span class="number">1565</span>, <span class="number">1565</span>, <span class="number">1565</span>, <span class="number">1566</span>, <span class="number">1567</span>, <span class="number">1568</span>, <span class="number">1569</span>, <span class="number">1570</span>, <span class="number">1570</span>, <span class="number">1570</span>, <span class="number">1570</span>, <span class="number">1570</span>, <span class="number">1570</span>, <span class="number">1571</span>, <span class="number">1572</span>, <span class="number">1573</span>, <span class="number">1574</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1576</span>, <span class="number">1577</span>, <span class="number">1578</span>, <span class="number">1579</span>, <span class="number">1580</span>, <span class="number">1580</span>, <span class="number">1580</span>, <span class="number">1580</span>, <span class="number">1580</span>, <span class="number">1580</span>, <span class="number">1581</span>, <span class="number">1582</span>, <span class="number">1583</span>, <span class="number">1584</span>, <span class="number">1585</span>, <span class="number">1585</span>, <span class="number">1585</span>, <span class="number">1585</span>, <span class="number">1585</span>, <span class="number">1585</span>, <span class="number">1586</span>, <span class="number">1587</span>, <span class="number">1588</span>, <span class="number">1589</span>, <span class="number">1590</span>, <span class="number">1590</span>, <span class="number">1590</span>, <span class="number">1590</span>, <span class="number">1590</span>, <span class="number">1590</span>, <span class="number">1591</span>, <span class="number">1592</span>, <span class="number">1593</span>, <span class="number">1594</span>, <span class="number">1595</span>, <span class="number">1595</span>, <span class="number">1595</span>, <span class="number">1595</span>, <span class="number">1595</span>, <span class="number">1595</span>, <span class="number">1596</span>, <span class="number">1597</span>, <span class="number">1598</span>, <span class="number">1599</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1601</span>, <span class="number">1602</span>, <span class="number">1603</span>, <span class="number">1604</span>, <span class="number">1605</span>, <span class="number">1605</span>, <span class="number">1605</span>, <span class="number">1605</span>, <span class="number">1605</span>, <span class="number">1605</span>, <span class="number">1606</span>, <span class="number">1607</span>, <span class="number">1608</span>, <span class="number">1609</span>, <span class="number">1610</span>, <span class="number">1610</span>, <span class="number">1610</span>, <span class="number">1610</span>, <span class="number">1610</span>, <span class="number">1610</span>, <span class="number">1611</span>, <span class="number">1612</span>, <span class="number">1613</span>, <span class="number">1614</span>, <span class="number">1615</span>, <span class="number">1615</span>, <span class="number">1615</span>, <span class="number">1615</span>, <span class="number">1615</span>, <span class="number">1615</span>, <span class="number">1616</span>, <span class="number">1617</span>, <span class="number">1618</span>, <span class="number">1619</span>, <span class="number">1620</span>, <span class="number">1620</span>, <span class="number">1620</span>, <span class="number">1620</span>, <span class="number">1620</span>, <span class="number">1620</span>, <span class="number">1621</span>, <span class="number">1622</span>, <span class="number">1623</span>, <span class="number">1624</span>, <span class="number">1625</span>, <span class="number">1625</span>, <span class="number">1625</span>, <span class="number">1625</span>, <span class="number">1625</span>, <span class="number">1625</span>, <span class="number">1626</span>, <span class="number">1627</span>, <span class="number">1628</span>, <span class="number">1629</span>, <span class="number">1630</span>, <span class="number">1630</span>, <span class="number">1630</span>, <span class="number">1630</span>, <span class="number">1630</span>, <span class="number">1630</span>, <span class="number">1631</span>, <span class="number">1632</span>, <span class="number">1633</span>, <span class="number">1634</span>, <span class="number">1635</span>, <span class="number">1635</span>, <span class="number">1635</span>, <span class="number">1635</span>, <span class="number">1635</span>, <span class="number">1635</span>, <span class="number">1636</span>, <span class="number">1637</span>, <span class="number">1638</span>, <span class="number">1639</span>, <span class="number">1640</span>, <span class="number">1640</span>, <span class="number">1640</span>, <span class="number">1640</span>, <span class="number">1640</span>, <span class="number">1640</span>, <span class="number">1641</span>, <span class="number">1642</span>, <span class="number">1643</span>, <span class="number">1644</span>, <span class="number">1645</span>, <span class="number">1645</span>, <span class="number">1645</span>, <span class="number">1645</span>, <span class="number">1645</span>, <span class="number">1645</span>, <span class="number">1646</span>, <span class="number">1647</span>, <span class="number">1648</span>, <span class="number">1649</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1651</span>, <span class="number">1652</span>, <span class="number">1653</span>, <span class="number">1654</span>, <span class="number">1655</span>, <span class="number">1655</span>, <span class="number">1655</span>, <span class="number">1655</span>, <span class="number">1655</span>, <span class="number">1655</span>, <span class="number">1656</span>, <span class="number">1657</span>, <span class="number">1658</span>, <span class="number">1659</span>, <span class="number">1660</span>, <span class="number">1660</span>, <span class="number">1660</span>, <span class="number">1660</span>, <span class="number">1660</span>, <span class="number">1660</span>, <span class="number">1661</span>, <span class="number">1662</span>, <span class="number">1663</span>, <span class="number">1664</span>, <span class="number">1665</span>, <span class="number">1665</span>, <span class="number">1665</span>, <span class="number">1665</span>, <span class="number">1665</span>, <span class="number">1665</span>, <span class="number">1666</span>, <span class="number">1667</span>, <span class="number">1668</span>, <span class="number">1669</span>, <span class="number">1670</span>, <span class="number">1670</span>, <span class="number">1670</span>, <span class="number">1670</span>, <span class="number">1670</span>, <span class="number">1670</span>, <span class="number">1671</span>, <span class="number">1672</span>, <span class="number">1673</span>, <span class="number">1674</span>, <span class="number">1675</span>, <span class="number">1675</span>, <span class="number">1675</span>, <span class="number">1675</span>, <span class="number">1675</span>, <span class="number">1675</span>, <span class="number">1676</span>, <span class="number">1677</span>, <span class="number">1678</span>, <span class="number">1679</span>, <span class="number">1680</span>, <span class="number">1680</span>, <span class="number">1680</span>, <span class="number">1680</span>, <span class="number">1680</span>, <span class="number">1680</span>, <span class="number">1681</span>, <span class="number">1682</span>, <span class="number">1683</span>, <span class="number">1684</span>, <span class="number">1685</span>, <span class="number">1685</span>, <span class="number">1685</span>, <span class="number">1685</span>, <span class="number">1685</span>, <span class="number">1685</span>, <span class="number">1686</span>, <span class="number">1687</span>, <span class="number">1688</span>, <span class="number">1689</span>, <span class="number">1690</span>, <span class="number">1690</span>, <span class="number">1690</span>, <span class="number">1690</span>, <span class="number">1690</span>, <span class="number">1690</span>, <span class="number">1691</span>, <span class="number">1692</span>, <span class="number">1693</span>, <span class="number">1694</span>, <span class="number">1695</span>, <span class="number">1695</span>, <span class="number">1695</span>, <span class="number">1695</span>, <span class="number">1695</span>, <span class="number">1695</span>, <span class="number">1696</span>, <span class="number">1697</span>, <span class="number">1698</span>, <span class="number">1699</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1701</span>, <span class="number">1702</span>, <span class="number">1703</span>, <span class="number">1704</span>, <span class="number">1705</span>, <span class="number">1705</span>, <span class="number">1705</span>, <span class="number">1705</span>, <span class="number">1705</span>, <span class="number">1705</span>, <span class="number">1706</span>, <span class="number">1707</span>, <span class="number">1708</span>, <span class="number">1709</span>, <span class="number">1710</span>, <span class="number">1710</span>, <span class="number">1710</span>, <span class="number">1710</span>, <span class="number">1710</span>, <span class="number">1710</span>, <span class="number">1711</span>, <span class="number">1712</span>, <span class="number">1713</span>, <span class="number">1714</span>, <span class="number">1715</span>, <span class="number">1715</span>, <span class="number">1715</span>, <span class="number">1715</span>, <span class="number">1715</span>, <span class="number">1715</span>, <span class="number">1716</span>, <span class="number">1717</span>, <span class="number">1718</span>, <span class="number">1719</span>, <span class="number">1720</span>, <span class="number">1720</span>, <span class="number">1720</span>, <span class="number">1720</span>, <span class="number">1720</span>, <span class="number">1720</span>, <span class="number">1721</span>, <span class="number">1722</span>, <span class="number">1723</span>, <span class="number">1724</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1726</span>, <span class="number">1727</span>, <span class="number">1728</span>, <span class="number">1729</span>, <span class="number">1730</span>, <span class="number">1730</span>, <span class="number">1730</span>, <span class="number">1730</span>, <span class="number">1730</span>, <span class="number">1730</span>, <span class="number">1731</span>, <span class="number">1732</span>, <span class="number">1733</span>, <span class="number">1734</span>, <span class="number">1735</span>, <span class="number">1735</span>, <span class="number">1735</span>, <span class="number">1735</span>, <span class="number">1735</span>, <span class="number">1735</span>, <span class="number">1736</span>, <span class="number">1737</span>, <span class="number">1738</span>, <span class="number">1739</span>, <span class="number">1740</span>, <span class="number">1740</span>, <span class="number">1740</span>, <span class="number">1740</span>, <span class="number">1740</span>, <span class="number">1740</span>, <span class="number">1741</span>, <span class="number">1742</span>, <span class="number">1743</span>, <span class="number">1744</span>, <span class="number">1745</span>, <span class="number">1745</span>, <span class="number">1745</span>, <span class="number">1745</span>, <span class="number">1745</span>, <span class="number">1745</span>, <span class="number">1746</span>, <span class="number">1747</span>, <span class="number">1748</span>, <span class="number">1749</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> t3[<span class="number">3510</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">36</span>, <span class="number">39</span>, <span class="number">42</span>, <span class="number">45</span>, <span class="number">48</span>, <span class="number">51</span>, <span class="number">54</span>, <span class="number">57</span>, <span class="number">60</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">87</span>, <span class="number">89</span>, <span class="number">91</span>, <span class="number">93</span>, <span class="number">95</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">117</span>, <span class="number">120</span>, <span class="number">123</span>, <span class="number">126</span>, <span class="number">129</span>, <span class="number">132</span>, <span class="number">135</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">162</span>, <span class="number">164</span>, <span class="number">166</span>, <span class="number">168</span>, <span class="number">170</span>, <span class="number">172</span>, <span class="number">174</span>, <span class="number">176</span>, <span class="number">178</span>, <span class="number">180</span>, <span class="number">183</span>, <span class="number">186</span>, <span class="number">189</span>, <span class="number">192</span>, <span class="number">195</span>, <span class="number">198</span>, <span class="number">201</span>, <span class="number">204</span>, <span class="number">207</span>, <span class="number">210</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">243</span>, <span class="number">245</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">251</span>, <span class="number">253</span>, <span class="number">255</span>, <span class="number">258</span>, <span class="number">261</span>, <span class="number">264</span>, <span class="number">267</span>, <span class="number">270</span>, <span class="number">273</span>, <span class="number">276</span>, <span class="number">279</span>, <span class="number">282</span>, <span class="number">285</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">296</span>, <span class="number">297</span>, <span class="number">298</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>, <span class="number">306</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">310</span>, <span class="number">312</span>, <span class="number">314</span>, <span class="number">316</span>, <span class="number">318</span>, <span class="number">320</span>, <span class="number">322</span>, <span class="number">324</span>, <span class="number">326</span>, <span class="number">328</span>, <span class="number">330</span>, <span class="number">333</span>, <span class="number">336</span>, <span class="number">339</span>, <span class="number">342</span>, <span class="number">345</span>, <span class="number">348</span>, <span class="number">351</span>, <span class="number">354</span>, <span class="number">357</span>, <span class="number">360</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">375</span>, <span class="number">376</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">380</span>, <span class="number">381</span>, <span class="number">382</span>, <span class="number">383</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">387</span>, <span class="number">389</span>, <span class="number">391</span>, <span class="number">393</span>, <span class="number">395</span>, <span class="number">397</span>, <span class="number">399</span>, <span class="number">401</span>, <span class="number">403</span>, <span class="number">405</span>, <span class="number">408</span>, <span class="number">411</span>, <span class="number">414</span>, <span class="number">417</span>, <span class="number">420</span>, <span class="number">423</span>, <span class="number">426</span>, <span class="number">429</span>, <span class="number">432</span>, <span class="number">435</span>, <span class="number">439</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">443</span>, <span class="number">444</span>, <span class="number">445</span>, <span class="number">446</span>, <span class="number">447</span>, <span class="number">448</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">451</span>, <span class="number">452</span>, <span class="number">453</span>, <span class="number">454</span>, <span class="number">455</span>, <span class="number">456</span>, <span class="number">457</span>, <span class="number">458</span>, <span class="number">459</span>, <span class="number">460</span>, <span class="number">462</span>, <span class="number">464</span>, <span class="number">466</span>, <span class="number">468</span>, <span class="number">470</span>, <span class="number">472</span>, <span class="number">474</span>, <span class="number">476</span>, <span class="number">478</span>, <span class="number">480</span>, <span class="number">483</span>, <span class="number">486</span>, <span class="number">489</span>, <span class="number">492</span>, <span class="number">495</span>, <span class="number">498</span>, <span class="number">501</span>, <span class="number">504</span>, <span class="number">507</span>, <span class="number">510</span>, <span class="number">514</span>, <span class="number">515</span>, <span class="number">516</span>, <span class="number">517</span>, <span class="number">518</span>, <span class="number">519</span>, <span class="number">520</span>, <span class="number">521</span>, <span class="number">522</span>, <span class="number">523</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">525</span>, <span class="number">526</span>, <span class="number">527</span>, <span class="number">528</span>, <span class="number">529</span>, <span class="number">530</span>, <span class="number">531</span>, <span class="number">532</span>, <span class="number">533</span>, <span class="number">534</span>, <span class="number">535</span>, <span class="number">537</span>, <span class="number">539</span>, <span class="number">541</span>, <span class="number">543</span>, <span class="number">545</span>, <span class="number">547</span>, <span class="number">549</span>, <span class="number">551</span>, <span class="number">553</span>, <span class="number">555</span>, <span class="number">558</span>, <span class="number">561</span>, <span class="number">564</span>, <span class="number">567</span>, <span class="number">570</span>, <span class="number">573</span>, <span class="number">576</span>, <span class="number">579</span>, <span class="number">582</span>, <span class="number">585</span>, <span class="number">589</span>, <span class="number">590</span>, <span class="number">591</span>, <span class="number">592</span>, <span class="number">593</span>, <span class="number">594</span>, <span class="number">595</span>, <span class="number">596</span>, <span class="number">597</span>, <span class="number">598</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">601</span>, <span class="number">602</span>, <span class="number">603</span>, <span class="number">604</span>, <span class="number">605</span>, <span class="number">606</span>, <span class="number">607</span>, <span class="number">608</span>, <span class="number">609</span>, <span class="number">610</span>, <span class="number">612</span>, <span class="number">614</span>, <span class="number">616</span>, <span class="number">618</span>, <span class="number">620</span>, <span class="number">622</span>, <span class="number">624</span>, <span class="number">626</span>, <span class="number">628</span>, <span class="number">630</span>, <span class="number">633</span>, <span class="number">636</span>, <span class="number">639</span>, <span class="number">642</span>, <span class="number">645</span>, <span class="number">648</span>, <span class="number">651</span>, <span class="number">654</span>, <span class="number">657</span>, <span class="number">660</span>, <span class="number">664</span>, <span class="number">665</span>, <span class="number">666</span>, <span class="number">667</span>, <span class="number">668</span>, <span class="number">669</span>, <span class="number">670</span>, <span class="number">671</span>, <span class="number">672</span>, <span class="number">673</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">675</span>, <span class="number">676</span>, <span class="number">677</span>, <span class="number">678</span>, <span class="number">679</span>, <span class="number">680</span>, <span class="number">681</span>, <span class="number">682</span>, <span class="number">683</span>, <span class="number">684</span>, <span class="number">685</span>, <span class="number">687</span>, <span class="number">689</span>, <span class="number">691</span>, <span class="number">693</span>, <span class="number">695</span>, <span class="number">697</span>, <span class="number">699</span>, <span class="number">701</span>, <span class="number">703</span>, <span class="number">705</span>, <span class="number">708</span>, <span class="number">711</span>, <span class="number">714</span>, <span class="number">717</span>, <span class="number">720</span>, <span class="number">723</span>, <span class="number">726</span>, <span class="number">729</span>, <span class="number">732</span>, <span class="number">735</span>, <span class="number">739</span>, <span class="number">740</span>, <span class="number">741</span>, <span class="number">742</span>, <span class="number">743</span>, <span class="number">744</span>, <span class="number">745</span>, <span class="number">746</span>, <span class="number">747</span>, <span class="number">748</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">751</span>, <span class="number">752</span>, <span class="number">753</span>, <span class="number">754</span>, <span class="number">755</span>, <span class="number">756</span>, <span class="number">757</span>, <span class="number">758</span>, <span class="number">759</span>, <span class="number">760</span>, <span class="number">762</span>, <span class="number">764</span>, <span class="number">766</span>, <span class="number">768</span>, <span class="number">770</span>, <span class="number">772</span>, <span class="number">774</span>, <span class="number">776</span>, <span class="number">778</span>, <span class="number">780</span>, <span class="number">783</span>, <span class="number">786</span>, <span class="number">789</span>, <span class="number">792</span>, <span class="number">795</span>, <span class="number">798</span>, <span class="number">801</span>, <span class="number">804</span>, <span class="number">807</span>, <span class="number">810</span>, <span class="number">814</span>, <span class="number">815</span>, <span class="number">816</span>, <span class="number">817</span>, <span class="number">818</span>, <span class="number">819</span>, <span class="number">820</span>, <span class="number">821</span>, <span class="number">822</span>, <span class="number">823</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">825</span>, <span class="number">826</span>, <span class="number">827</span>, <span class="number">828</span>, <span class="number">829</span>, <span class="number">830</span>, <span class="number">831</span>, <span class="number">832</span>, <span class="number">833</span>, <span class="number">834</span>, <span class="number">835</span>, <span class="number">837</span>, <span class="number">839</span>, <span class="number">841</span>, <span class="number">843</span>, <span class="number">845</span>, <span class="number">847</span>, <span class="number">849</span>, <span class="number">851</span>, <span class="number">853</span>, <span class="number">855</span>, <span class="number">858</span>, <span class="number">861</span>, <span class="number">864</span>, <span class="number">867</span>, <span class="number">870</span>, <span class="number">873</span>, <span class="number">876</span>, <span class="number">879</span>, <span class="number">882</span>, <span class="number">885</span>, <span class="number">889</span>, <span class="number">890</span>, <span class="number">891</span>, <span class="number">892</span>, <span class="number">893</span>, <span class="number">894</span>, <span class="number">895</span>, <span class="number">896</span>, <span class="number">897</span>, <span class="number">898</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">901</span>, <span class="number">902</span>, <span class="number">903</span>, <span class="number">904</span>, <span class="number">905</span>, <span class="number">906</span>, <span class="number">907</span>, <span class="number">908</span>, <span class="number">909</span>, <span class="number">910</span>, <span class="number">912</span>, <span class="number">914</span>, <span class="number">916</span>, <span class="number">918</span>, <span class="number">920</span>, <span class="number">922</span>, <span class="number">924</span>, <span class="number">926</span>, <span class="number">928</span>, <span class="number">930</span>, <span class="number">933</span>, <span class="number">936</span>, <span class="number">939</span>, <span class="number">942</span>, <span class="number">945</span>, <span class="number">948</span>, <span class="number">951</span>, <span class="number">954</span>, <span class="number">957</span>, <span class="number">960</span>, <span class="number">964</span>, <span class="number">965</span>, <span class="number">966</span>, <span class="number">967</span>, <span class="number">968</span>, <span class="number">969</span>, <span class="number">970</span>, <span class="number">971</span>, <span class="number">972</span>, <span class="number">973</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">975</span>, <span class="number">976</span>, <span class="number">977</span>, <span class="number">978</span>, <span class="number">979</span>, <span class="number">980</span>, <span class="number">981</span>, <span class="number">982</span>, <span class="number">983</span>, <span class="number">984</span>, <span class="number">985</span>, <span class="number">987</span>, <span class="number">989</span>, <span class="number">991</span>, <span class="number">993</span>, <span class="number">995</span>, <span class="number">997</span>, <span class="number">999</span>, <span class="number">1001</span>, <span class="number">1003</span>, <span class="number">1005</span>, <span class="number">1008</span>, <span class="number">1011</span>, <span class="number">1014</span>, <span class="number">1017</span>, <span class="number">1020</span>, <span class="number">1023</span>, <span class="number">1026</span>, <span class="number">1029</span>, <span class="number">1032</span>, <span class="number">1035</span>, <span class="number">1039</span>, <span class="number">1040</span>, <span class="number">1041</span>, <span class="number">1042</span>, <span class="number">1043</span>, <span class="number">1044</span>, <span class="number">1045</span>, <span class="number">1046</span>, <span class="number">1047</span>, <span class="number">1048</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1051</span>, <span class="number">1052</span>, <span class="number">1053</span>, <span class="number">1054</span>, <span class="number">1055</span>, <span class="number">1056</span>, <span class="number">1057</span>, <span class="number">1058</span>, <span class="number">1059</span>, <span class="number">1060</span>, <span class="number">1062</span>, <span class="number">1064</span>, <span class="number">1066</span>, <span class="number">1068</span>, <span class="number">1070</span>, <span class="number">1072</span>, <span class="number">1074</span>, <span class="number">1076</span>, <span class="number">1078</span>, <span class="number">1080</span>, <span class="number">1083</span>, <span class="number">1086</span>, <span class="number">1089</span>, <span class="number">1092</span>, <span class="number">1095</span>, <span class="number">1098</span>, <span class="number">1101</span>, <span class="number">1104</span>, <span class="number">1107</span>, <span class="number">1110</span>, <span class="number">1114</span>, <span class="number">1115</span>, <span class="number">1116</span>, <span class="number">1117</span>, <span class="number">1118</span>, <span class="number">1119</span>, <span class="number">1120</span>, <span class="number">1121</span>, <span class="number">1122</span>, <span class="number">1123</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1125</span>, <span class="number">1126</span>, <span class="number">1127</span>, <span class="number">1128</span>, <span class="number">1129</span>, <span class="number">1130</span>, <span class="number">1131</span>, <span class="number">1132</span>, <span class="number">1133</span>, <span class="number">1134</span>, <span class="number">1135</span>, <span class="number">1137</span>, <span class="number">1139</span>, <span class="number">1141</span>, <span class="number">1143</span>, <span class="number">1145</span>, <span class="number">1147</span>, <span class="number">1149</span>, <span class="number">1151</span>, <span class="number">1153</span>, <span class="number">1155</span>, <span class="number">1158</span>, <span class="number">1161</span>, <span class="number">1164</span>, <span class="number">1167</span>, <span class="number">1170</span>, <span class="number">1173</span>, <span class="number">1176</span>, <span class="number">1179</span>, <span class="number">1182</span>, <span class="number">1185</span>, <span class="number">1189</span>, <span class="number">1190</span>, <span class="number">1191</span>, <span class="number">1192</span>, <span class="number">1193</span>, <span class="number">1194</span>, <span class="number">1195</span>, <span class="number">1196</span>, <span class="number">1197</span>, <span class="number">1198</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1201</span>, <span class="number">1202</span>, <span class="number">1203</span>, <span class="number">1204</span>, <span class="number">1205</span>, <span class="number">1206</span>, <span class="number">1207</span>, <span class="number">1208</span>, <span class="number">1209</span>, <span class="number">1210</span>, <span class="number">1212</span>, <span class="number">1214</span>, <span class="number">1216</span>, <span class="number">1218</span>, <span class="number">1220</span>, <span class="number">1222</span>, <span class="number">1224</span>, <span class="number">1226</span>, <span class="number">1228</span>, <span class="number">1230</span>, <span class="number">1233</span>, <span class="number">1236</span>, <span class="number">1239</span>, <span class="number">1242</span>, <span class="number">1245</span>, <span class="number">1248</span>, <span class="number">1251</span>, <span class="number">1254</span>, <span class="number">1257</span>, <span class="number">1260</span>, <span class="number">1264</span>, <span class="number">1265</span>, <span class="number">1266</span>, <span class="number">1267</span>, <span class="number">1268</span>, <span class="number">1269</span>, <span class="number">1270</span>, <span class="number">1271</span>, <span class="number">1272</span>, <span class="number">1273</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1275</span>, <span class="number">1276</span>, <span class="number">1277</span>, <span class="number">1278</span>, <span class="number">1279</span>, <span class="number">1280</span>, <span class="number">1281</span>, <span class="number">1282</span>, <span class="number">1283</span>, <span class="number">1284</span>, <span class="number">1285</span>, <span class="number">1287</span>, <span class="number">1289</span>, <span class="number">1291</span>, <span class="number">1293</span>, <span class="number">1295</span>, <span class="number">1297</span>, <span class="number">1299</span>, <span class="number">1301</span>, <span class="number">1303</span>, <span class="number">1305</span>, <span class="number">1308</span>, <span class="number">1311</span>, <span class="number">1314</span>, <span class="number">1317</span>, <span class="number">1320</span>, <span class="number">1323</span>, <span class="number">1326</span>, <span class="number">1329</span>, <span class="number">1332</span>, <span class="number">1335</span>, <span class="number">1339</span>, <span class="number">1340</span>, <span class="number">1341</span>, <span class="number">1342</span>, <span class="number">1343</span>, <span class="number">1344</span>, <span class="number">1345</span>, <span class="number">1346</span>, <span class="number">1347</span>, <span class="number">1348</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1351</span>, <span class="number">1352</span>, <span class="number">1353</span>, <span class="number">1354</span>, <span class="number">1355</span>, <span class="number">1356</span>, <span class="number">1357</span>, <span class="number">1358</span>, <span class="number">1359</span>, <span class="number">1360</span>, <span class="number">1362</span>, <span class="number">1364</span>, <span class="number">1366</span>, <span class="number">1368</span>, <span class="number">1370</span>, <span class="number">1372</span>, <span class="number">1374</span>, <span class="number">1376</span>, <span class="number">1378</span>, <span class="number">1380</span>, <span class="number">1383</span>, <span class="number">1386</span>, <span class="number">1389</span>, <span class="number">1392</span>, <span class="number">1395</span>, <span class="number">1398</span>, <span class="number">1401</span>, <span class="number">1404</span>, <span class="number">1407</span>, <span class="number">1410</span>, <span class="number">1414</span>, <span class="number">1415</span>, <span class="number">1416</span>, <span class="number">1417</span>, <span class="number">1418</span>, <span class="number">1419</span>, <span class="number">1420</span>, <span class="number">1421</span>, <span class="number">1422</span>, <span class="number">1423</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1425</span>, <span class="number">1426</span>, <span class="number">1427</span>, <span class="number">1428</span>, <span class="number">1429</span>, <span class="number">1430</span>, <span class="number">1431</span>, <span class="number">1432</span>, <span class="number">1433</span>, <span class="number">1434</span>, <span class="number">1435</span>, <span class="number">1437</span>, <span class="number">1439</span>, <span class="number">1441</span>, <span class="number">1443</span>, <span class="number">1445</span>, <span class="number">1447</span>, <span class="number">1449</span>, <span class="number">1451</span>, <span class="number">1453</span>, <span class="number">1455</span>, <span class="number">1458</span>, <span class="number">1461</span>, <span class="number">1464</span>, <span class="number">1467</span>, <span class="number">1470</span>, <span class="number">1473</span>, <span class="number">1476</span>, <span class="number">1479</span>, <span class="number">1482</span>, <span class="number">1485</span>, <span class="number">1489</span>, <span class="number">1490</span>, <span class="number">1491</span>, <span class="number">1492</span>, <span class="number">1493</span>, <span class="number">1494</span>, <span class="number">1495</span>, <span class="number">1496</span>, <span class="number">1497</span>, <span class="number">1498</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1501</span>, <span class="number">1502</span>, <span class="number">1503</span>, <span class="number">1504</span>, <span class="number">1505</span>, <span class="number">1506</span>, <span class="number">1507</span>, <span class="number">1508</span>, <span class="number">1509</span>, <span class="number">1510</span>, <span class="number">1512</span>, <span class="number">1514</span>, <span class="number">1516</span>, <span class="number">1518</span>, <span class="number">1520</span>, <span class="number">1522</span>, <span class="number">1524</span>, <span class="number">1526</span>, <span class="number">1528</span>, <span class="number">1530</span>, <span class="number">1533</span>, <span class="number">1536</span>, <span class="number">1539</span>, <span class="number">1542</span>, <span class="number">1545</span>, <span class="number">1548</span>, <span class="number">1551</span>, <span class="number">1554</span>, <span class="number">1557</span>, <span class="number">1560</span>, <span class="number">1564</span>, <span class="number">1565</span>, <span class="number">1566</span>, <span class="number">1567</span>, <span class="number">1568</span>, <span class="number">1569</span>, <span class="number">1570</span>, <span class="number">1571</span>, <span class="number">1572</span>, <span class="number">1573</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1575</span>, <span class="number">1576</span>, <span class="number">1577</span>, <span class="number">1578</span>, <span class="number">1579</span>, <span class="number">1580</span>, <span class="number">1581</span>, <span class="number">1582</span>, <span class="number">1583</span>, <span class="number">1584</span>, <span class="number">1585</span>, <span class="number">1587</span>, <span class="number">1589</span>, <span class="number">1591</span>, <span class="number">1593</span>, <span class="number">1595</span>, <span class="number">1597</span>, <span class="number">1599</span>, <span class="number">1601</span>, <span class="number">1603</span>, <span class="number">1605</span>, <span class="number">1608</span>, <span class="number">1611</span>, <span class="number">1614</span>, <span class="number">1617</span>, <span class="number">1620</span>, <span class="number">1623</span>, <span class="number">1626</span>, <span class="number">1629</span>, <span class="number">1632</span>, <span class="number">1635</span>, <span class="number">1639</span>, <span class="number">1640</span>, <span class="number">1641</span>, <span class="number">1642</span>, <span class="number">1643</span>, <span class="number">1644</span>, <span class="number">1645</span>, <span class="number">1646</span>, <span class="number">1647</span>, <span class="number">1648</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1651</span>, <span class="number">1652</span>, <span class="number">1653</span>, <span class="number">1654</span>, <span class="number">1655</span>, <span class="number">1656</span>, <span class="number">1657</span>, <span class="number">1658</span>, <span class="number">1659</span>, <span class="number">1660</span>, <span class="number">1662</span>, <span class="number">1664</span>, <span class="number">1666</span>, <span class="number">1668</span>, <span class="number">1670</span>, <span class="number">1672</span>, <span class="number">1674</span>, <span class="number">1676</span>, <span class="number">1678</span>, <span class="number">1680</span>, <span class="number">1683</span>, <span class="number">1686</span>, <span class="number">1689</span>, <span class="number">1692</span>, <span class="number">1695</span>, <span class="number">1698</span>, <span class="number">1701</span>, <span class="number">1704</span>, <span class="number">1707</span>, <span class="number">1710</span>, <span class="number">1714</span>, <span class="number">1715</span>, <span class="number">1716</span>, <span class="number">1717</span>, <span class="number">1718</span>, <span class="number">1719</span>, <span class="number">1720</span>, <span class="number">1721</span>, <span class="number">1722</span>, <span class="number">1723</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1725</span>, <span class="number">1726</span>, <span class="number">1727</span>, <span class="number">1728</span>, <span class="number">1729</span>, <span class="number">1730</span>, <span class="number">1731</span>, <span class="number">1732</span>, <span class="number">1733</span>, <span class="number">1734</span>, <span class="number">1735</span>, <span class="number">1737</span>, <span class="number">1739</span>, <span class="number">1741</span>, <span class="number">1743</span>, <span class="number">1745</span>, <span class="number">1747</span>, <span class="number">1749</span>, <span class="number">1751</span>, <span class="number">1753</span>, <span class="number">1755</span>, <span class="number">1758</span>, <span class="number">1761</span>, <span class="number">1764</span>, <span class="number">1767</span>, <span class="number">1770</span>, <span class="number">1773</span>, <span class="number">1776</span>, <span class="number">1779</span>, <span class="number">1782</span>, <span class="number">1785</span>, <span class="number">1789</span>, <span class="number">1790</span>, <span class="number">1791</span>, <span class="number">1792</span>, <span class="number">1793</span>, <span class="number">1794</span>, <span class="number">1795</span>, <span class="number">1796</span>, <span class="number">1797</span>, <span class="number">1798</span>, <span class="number">1800</span>, <span class="number">1800</span>, <span class="number">1800</span>, <span class="number">1800</span>, <span class="number">1800</span>, <span class="number">1800</span>, <span class="number">1800</span>, <span class="number">1800</span>, <span class="number">1800</span>, <span class="number">1800</span>, <span class="number">1801</span>, <span class="number">1802</span>, <span class="number">1803</span>, <span class="number">1804</span>, <span class="number">1805</span>, <span class="number">1806</span>, <span class="number">1807</span>, <span class="number">1808</span>, <span class="number">1809</span>, <span class="number">1810</span>, <span class="number">1812</span>, <span class="number">1814</span>, <span class="number">1816</span>, <span class="number">1818</span>, <span class="number">1820</span>, <span class="number">1822</span>, <span class="number">1824</span>, <span class="number">1826</span>, <span class="number">1828</span>, <span class="number">1830</span>, <span class="number">1833</span>, <span class="number">1836</span>, <span class="number">1839</span>, <span class="number">1842</span>, <span class="number">1845</span>, <span class="number">1848</span>, <span class="number">1851</span>, <span class="number">1854</span>, <span class="number">1857</span>, <span class="number">1860</span>, <span class="number">1864</span>, <span class="number">1865</span>, <span class="number">1866</span>, <span class="number">1867</span>, <span class="number">1868</span>, <span class="number">1869</span>, <span class="number">1870</span>, <span class="number">1871</span>, <span class="number">1872</span>, <span class="number">1873</span>, <span class="number">1875</span>, <span class="number">1875</span>, <span class="number">1875</span>, <span class="number">1875</span>, <span class="number">1875</span>, <span class="number">1875</span>, <span class="number">1875</span>, <span class="number">1875</span>, <span class="number">1875</span>, <span class="number">1875</span>, <span class="number">1876</span>, <span class="number">1877</span>, <span class="number">1878</span>, <span class="number">1879</span>, <span class="number">1880</span>, <span class="number">1881</span>, <span class="number">1882</span>, <span class="number">1883</span>, <span class="number">1884</span>, <span class="number">1885</span>, <span class="number">1887</span>, <span class="number">1889</span>, <span class="number">1891</span>, <span class="number">1893</span>, <span class="number">1895</span>, <span class="number">1897</span>, <span class="number">1899</span>, <span class="number">1901</span>, <span class="number">1903</span>, <span class="number">1905</span>, <span class="number">1908</span>, <span class="number">1911</span>, <span class="number">1914</span>, <span class="number">1917</span>, <span class="number">1920</span>, <span class="number">1923</span>, <span class="number">1926</span>, <span class="number">1929</span>, <span class="number">1932</span>, <span class="number">1935</span>, <span class="number">1939</span>, <span class="number">1940</span>, <span class="number">1941</span>, <span class="number">1942</span>, <span class="number">1943</span>, <span class="number">1944</span>, <span class="number">1945</span>, <span class="number">1946</span>, <span class="number">1947</span>, <span class="number">1948</span>, <span class="number">1950</span>, <span class="number">1950</span>, <span class="number">1950</span>, <span class="number">1950</span>, <span class="number">1950</span>, <span class="number">1950</span>, <span class="number">1950</span>, <span class="number">1950</span>, <span class="number">1950</span>, <span class="number">1950</span>, <span class="number">1951</span>, <span class="number">1952</span>, <span class="number">1953</span>, <span class="number">1954</span>, <span class="number">1955</span>, <span class="number">1956</span>, <span class="number">1957</span>, <span class="number">1958</span>, <span class="number">1959</span>, <span class="number">1960</span>, <span class="number">1962</span>, <span class="number">1964</span>, <span class="number">1966</span>, <span class="number">1968</span>, <span class="number">1970</span>, <span class="number">1972</span>, <span class="number">1974</span>, <span class="number">1976</span>, <span class="number">1978</span>, <span class="number">1980</span>, <span class="number">1983</span>, <span class="number">1986</span>, <span class="number">1989</span>, <span class="number">1992</span>, <span class="number">1995</span>, <span class="number">1998</span>, <span class="number">2001</span>, <span class="number">2004</span>, <span class="number">2007</span>, <span class="number">2010</span>, <span class="number">2014</span>, <span class="number">2015</span>, <span class="number">2016</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2020</span>, <span class="number">2021</span>, <span class="number">2022</span>, <span class="number">2023</span>, <span class="number">2025</span>, <span class="number">2025</span>, <span class="number">2025</span>, <span class="number">2025</span>, <span class="number">2025</span>, <span class="number">2025</span>, <span class="number">2025</span>, <span class="number">2025</span>, <span class="number">2025</span>, <span class="number">2025</span>, <span class="number">2026</span>, <span class="number">2027</span>, <span class="number">2028</span>, <span class="number">2029</span>, <span class="number">2030</span>, <span class="number">2031</span>, <span class="number">2032</span>, <span class="number">2033</span>, <span class="number">2034</span>, <span class="number">2035</span>, <span class="number">2037</span>, <span class="number">2039</span>, <span class="number">2041</span>, <span class="number">2043</span>, <span class="number">2045</span>, <span class="number">2047</span>, <span class="number">2049</span>, <span class="number">2051</span>, <span class="number">2053</span>, <span class="number">2055</span>, <span class="number">2058</span>, <span class="number">2061</span>, <span class="number">2064</span>, <span class="number">2067</span>, <span class="number">2070</span>, <span class="number">2073</span>, <span class="number">2076</span>, <span class="number">2079</span>, <span class="number">2082</span>, <span class="number">2085</span>, <span class="number">2089</span>, <span class="number">2090</span>, <span class="number">2091</span>, <span class="number">2092</span>, <span class="number">2093</span>, <span class="number">2094</span>, <span class="number">2095</span>, <span class="number">2096</span>, <span class="number">2097</span>, <span class="number">2098</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2100</span>, <span class="number">2101</span>, <span class="number">2102</span>, <span class="number">2103</span>, <span class="number">2104</span>, <span class="number">2105</span>, <span class="number">2106</span>, <span class="number">2107</span>, <span class="number">2108</span>, <span class="number">2109</span>, <span class="number">2110</span>, <span class="number">2112</span>, <span class="number">2114</span>, <span class="number">2116</span>, <span class="number">2118</span>, <span class="number">2120</span>, <span class="number">2122</span>, <span class="number">2124</span>, <span class="number">2126</span>, <span class="number">2128</span>, <span class="number">2130</span>, <span class="number">2133</span>, <span class="number">2136</span>, <span class="number">2139</span>, <span class="number">2142</span>, <span class="number">2145</span>, <span class="number">2148</span>, <span class="number">2151</span>, <span class="number">2154</span>, <span class="number">2157</span>, <span class="number">2160</span>, <span class="number">2164</span>, <span class="number">2165</span>, <span class="number">2166</span>, <span class="number">2167</span>, <span class="number">2168</span>, <span class="number">2169</span>, <span class="number">2170</span>, <span class="number">2171</span>, <span class="number">2172</span>, <span class="number">2173</span>, <span class="number">2175</span>, <span class="number">2175</span>, <span class="number">2175</span>, <span class="number">2175</span>, <span class="number">2175</span>, <span class="number">2175</span>, <span class="number">2175</span>, <span class="number">2175</span>, <span class="number">2175</span>, <span class="number">2175</span>, <span class="number">2176</span>, <span class="number">2177</span>, <span class="number">2178</span>, <span class="number">2179</span>, <span class="number">2180</span>, <span class="number">2181</span>, <span class="number">2182</span>, <span class="number">2183</span>, <span class="number">2184</span>, <span class="number">2185</span>, <span class="number">2187</span>, <span class="number">2189</span>, <span class="number">2191</span>, <span class="number">2193</span>, <span class="number">2195</span>, <span class="number">2197</span>, <span class="number">2199</span>, <span class="number">2201</span>, <span class="number">2203</span>, <span class="number">2205</span>, <span class="number">2208</span>, <span class="number">2211</span>, <span class="number">2214</span>, <span class="number">2217</span>, <span class="number">2220</span>, <span class="number">2223</span>, <span class="number">2226</span>, <span class="number">2229</span>, <span class="number">2232</span>, <span class="number">2235</span>, <span class="number">2239</span>, <span class="number">2240</span>, <span class="number">2241</span>, <span class="number">2242</span>, <span class="number">2243</span>, <span class="number">2244</span>, <span class="number">2245</span>, <span class="number">2246</span>, <span class="number">2247</span>, <span class="number">2248</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2251</span>, <span class="number">2252</span>, <span class="number">2253</span>, <span class="number">2254</span>, <span class="number">2255</span>, <span class="number">2256</span>, <span class="number">2257</span>, <span class="number">2258</span>, <span class="number">2259</span>, <span class="number">2260</span>, <span class="number">2262</span>, <span class="number">2264</span>, <span class="number">2266</span>, <span class="number">2268</span>, <span class="number">2270</span>, <span class="number">2272</span>, <span class="number">2274</span>, <span class="number">2276</span>, <span class="number">2278</span>, <span class="number">2280</span>, <span class="number">2283</span>, <span class="number">2286</span>, <span class="number">2289</span>, <span class="number">2292</span>, <span class="number">2295</span>, <span class="number">2298</span>, <span class="number">2301</span>, <span class="number">2304</span>, <span class="number">2307</span>, <span class="number">2310</span>, <span class="number">2314</span>, <span class="number">2315</span>, <span class="number">2316</span>, <span class="number">2317</span>, <span class="number">2318</span>, <span class="number">2319</span>, <span class="number">2320</span>, <span class="number">2321</span>, <span class="number">2322</span>, <span class="number">2323</span>, <span class="number">2325</span>, <span class="number">2325</span>, <span class="number">2325</span>, <span class="number">2325</span>, <span class="number">2325</span>, <span class="number">2325</span>, <span class="number">2325</span>, <span class="number">2325</span>, <span class="number">2325</span>, <span class="number">2325</span>, <span class="number">2326</span>, <span class="number">2327</span>, <span class="number">2328</span>, <span class="number">2329</span>, <span class="number">2330</span>, <span class="number">2331</span>, <span class="number">2332</span>, <span class="number">2333</span>, <span class="number">2334</span>, <span class="number">2335</span>, <span class="number">2337</span>, <span class="number">2339</span>, <span class="number">2341</span>, <span class="number">2343</span>, <span class="number">2345</span>, <span class="number">2347</span>, <span class="number">2349</span>, <span class="number">2351</span>, <span class="number">2353</span>, <span class="number">2355</span>, <span class="number">2358</span>, <span class="number">2361</span>, <span class="number">2364</span>, <span class="number">2367</span>, <span class="number">2370</span>, <span class="number">2373</span>, <span class="number">2376</span>, <span class="number">2379</span>, <span class="number">2382</span>, <span class="number">2385</span>, <span class="number">2389</span>, <span class="number">2390</span>, <span class="number">2391</span>, <span class="number">2392</span>, <span class="number">2393</span>, <span class="number">2394</span>, <span class="number">2395</span>, <span class="number">2396</span>, <span class="number">2397</span>, <span class="number">2398</span>, <span class="number">2400</span>, <span class="number">2400</span>, <span class="number">2400</span>, <span class="number">2400</span>, <span class="number">2400</span>, <span class="number">2400</span>, <span class="number">2400</span>, <span class="number">2400</span>, <span class="number">2400</span>, <span class="number">2400</span>, <span class="number">2401</span>, <span class="number">2402</span>, <span class="number">2403</span>, <span class="number">2404</span>, <span class="number">2405</span>, <span class="number">2406</span>, <span class="number">2407</span>, <span class="number">2408</span>, <span class="number">2409</span>, <span class="number">2410</span>, <span class="number">2412</span>, <span class="number">2414</span>, <span class="number">2416</span>, <span class="number">2418</span>, <span class="number">2420</span>, <span class="number">2422</span>, <span class="number">2424</span>, <span class="number">2426</span>, <span class="number">2428</span>, <span class="number">2430</span>, <span class="number">2433</span>, <span class="number">2436</span>, <span class="number">2439</span>, <span class="number">2442</span>, <span class="number">2445</span>, <span class="number">2448</span>, <span class="number">2451</span>, <span class="number">2454</span>, <span class="number">2457</span>, <span class="number">2460</span>, <span class="number">2464</span>, <span class="number">2465</span>, <span class="number">2466</span>, <span class="number">2467</span>, <span class="number">2468</span>, <span class="number">2469</span>, <span class="number">2470</span>, <span class="number">2471</span>, <span class="number">2472</span>, <span class="number">2473</span>, <span class="number">2475</span>, <span class="number">2475</span>, <span class="number">2475</span>, <span class="number">2475</span>, <span class="number">2475</span>, <span class="number">2475</span>, <span class="number">2475</span>, <span class="number">2475</span>, <span class="number">2475</span>, <span class="number">2475</span>, <span class="number">2476</span>, <span class="number">2477</span>, <span class="number">2478</span>, <span class="number">2479</span>, <span class="number">2480</span>, <span class="number">2481</span>, <span class="number">2482</span>, <span class="number">2483</span>, <span class="number">2484</span>, <span class="number">2485</span>, <span class="number">2487</span>, <span class="number">2489</span>, <span class="number">2491</span>, <span class="number">2493</span>, <span class="number">2495</span>, <span class="number">2497</span>, <span class="number">2499</span>, <span class="number">2501</span>, <span class="number">2503</span>, <span class="number">2505</span>, <span class="number">2508</span>, <span class="number">2511</span>, <span class="number">2514</span>, <span class="number">2517</span>, <span class="number">2520</span>, <span class="number">2523</span>, <span class="number">2526</span>, <span class="number">2529</span>, <span class="number">2532</span>, <span class="number">2535</span>, <span class="number">2539</span>, <span class="number">2540</span>, <span class="number">2541</span>, <span class="number">2542</span>, <span class="number">2543</span>, <span class="number">2544</span>, <span class="number">2545</span>, <span class="number">2546</span>, <span class="number">2547</span>, <span class="number">2548</span>, <span class="number">2550</span>, <span class="number">2550</span>, <span class="number">2550</span>, <span class="number">2550</span>, <span class="number">2550</span>, <span class="number">2550</span>, <span class="number">2550</span>, <span class="number">2550</span>, <span class="number">2550</span>, <span class="number">2550</span>, <span class="number">2551</span>, <span class="number">2552</span>, <span class="number">2553</span>, <span class="number">2554</span>, <span class="number">2555</span>, <span class="number">2556</span>, <span class="number">2557</span>, <span class="number">2558</span>, <span class="number">2559</span>, <span class="number">2560</span>, <span class="number">2562</span>, <span class="number">2564</span>, <span class="number">2566</span>, <span class="number">2568</span>, <span class="number">2570</span>, <span class="number">2572</span>, <span class="number">2574</span>, <span class="number">2576</span>, <span class="number">2578</span>, <span class="number">2580</span>, <span class="number">2583</span>, <span class="number">2586</span>, <span class="number">2589</span>, <span class="number">2592</span>, <span class="number">2595</span>, <span class="number">2598</span>, <span class="number">2601</span>, <span class="number">2604</span>, <span class="number">2607</span>, <span class="number">2610</span>, <span class="number">2614</span>, <span class="number">2615</span>, <span class="number">2616</span>, <span class="number">2617</span>, <span class="number">2618</span>, <span class="number">2619</span>, <span class="number">2620</span>, <span class="number">2621</span>, <span class="number">2622</span>, <span class="number">2623</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2625</span>, <span class="number">2626</span>, <span class="number">2627</span>, <span class="number">2628</span>, <span class="number">2629</span>, <span class="number">2630</span>, <span class="number">2631</span>, <span class="number">2632</span>, <span class="number">2633</span>, <span class="number">2634</span>, <span class="number">2635</span>, <span class="number">2637</span>, <span class="number">2639</span>, <span class="number">2641</span>, <span class="number">2643</span>, <span class="number">2645</span>, <span class="number">2647</span>, <span class="number">2649</span>, <span class="number">2651</span>, <span class="number">2653</span>, <span class="number">2655</span>, <span class="number">2658</span>, <span class="number">2661</span>, <span class="number">2664</span>, <span class="number">2667</span>, <span class="number">2670</span>, <span class="number">2673</span>, <span class="number">2676</span>, <span class="number">2679</span>, <span class="number">2682</span>, <span class="number">2685</span>, <span class="number">2689</span>, <span class="number">2690</span>, <span class="number">2691</span>, <span class="number">2692</span>, <span class="number">2693</span>, <span class="number">2694</span>, <span class="number">2695</span>, <span class="number">2696</span>, <span class="number">2697</span>, <span class="number">2698</span>, <span class="number">2700</span>, <span class="number">2700</span>, <span class="number">2700</span>, <span class="number">2700</span>, <span class="number">2700</span>, <span class="number">2700</span>, <span class="number">2700</span>, <span class="number">2700</span>, <span class="number">2700</span>, <span class="number">2700</span>, <span class="number">2701</span>, <span class="number">2702</span>, <span class="number">2703</span>, <span class="number">2704</span>, <span class="number">2705</span>, <span class="number">2706</span>, <span class="number">2707</span>, <span class="number">2708</span>, <span class="number">2709</span>, <span class="number">2710</span>, <span class="number">2712</span>, <span class="number">2714</span>, <span class="number">2716</span>, <span class="number">2718</span>, <span class="number">2720</span>, <span class="number">2722</span>, <span class="number">2724</span>, <span class="number">2726</span>, <span class="number">2728</span>, <span class="number">2730</span>, <span class="number">2733</span>, <span class="number">2736</span>, <span class="number">2739</span>, <span class="number">2742</span>, <span class="number">2745</span>, <span class="number">2748</span>, <span class="number">2751</span>, <span class="number">2754</span>, <span class="number">2757</span>, <span class="number">2760</span>, <span class="number">2764</span>, <span class="number">2765</span>, <span class="number">2766</span>, <span class="number">2767</span>, <span class="number">2768</span>, <span class="number">2769</span>, <span class="number">2770</span>, <span class="number">2771</span>, <span class="number">2772</span>, <span class="number">2773</span>, <span class="number">2775</span>, <span class="number">2775</span>, <span class="number">2775</span>, <span class="number">2775</span>, <span class="number">2775</span>, <span class="number">2775</span>, <span class="number">2775</span>, <span class="number">2775</span>, <span class="number">2775</span>, <span class="number">2775</span>, <span class="number">2776</span>, <span class="number">2777</span>, <span class="number">2778</span>, <span class="number">2779</span>, <span class="number">2780</span>, <span class="number">2781</span>, <span class="number">2782</span>, <span class="number">2783</span>, <span class="number">2784</span>, <span class="number">2785</span>, <span class="number">2787</span>, <span class="number">2789</span>, <span class="number">2791</span>, <span class="number">2793</span>, <span class="number">2795</span>, <span class="number">2797</span>, <span class="number">2799</span>, <span class="number">2801</span>, <span class="number">2803</span>, <span class="number">2805</span>, <span class="number">2808</span>, <span class="number">2811</span>, <span class="number">2814</span>, <span class="number">2817</span>, <span class="number">2820</span>, <span class="number">2823</span>, <span class="number">2826</span>, <span class="number">2829</span>, <span class="number">2832</span>, <span class="number">2835</span>, <span class="number">2839</span>, <span class="number">2840</span>, <span class="number">2841</span>, <span class="number">2842</span>, <span class="number">2843</span>, <span class="number">2844</span>, <span class="number">2845</span>, <span class="number">2846</span>, <span class="number">2847</span>, <span class="number">2848</span>, <span class="number">2850</span>, <span class="number">2850</span>, <span class="number">2850</span>, <span class="number">2850</span>, <span class="number">2850</span>, <span class="number">2850</span>, <span class="number">2850</span>, <span class="number">2850</span>, <span class="number">2850</span>, <span class="number">2850</span>, <span class="number">2851</span>, <span class="number">2852</span>, <span class="number">2853</span>, <span class="number">2854</span>, <span class="number">2855</span>, <span class="number">2856</span>, <span class="number">2857</span>, <span class="number">2858</span>, <span class="number">2859</span>, <span class="number">2860</span>, <span class="number">2862</span>, <span class="number">2864</span>, <span class="number">2866</span>, <span class="number">2868</span>, <span class="number">2870</span>, <span class="number">2872</span>, <span class="number">2874</span>, <span class="number">2876</span>, <span class="number">2878</span>, <span class="number">2880</span>, <span class="number">2883</span>, <span class="number">2886</span>, <span class="number">2889</span>, <span class="number">2892</span>, <span class="number">2895</span>, <span class="number">2898</span>, <span class="number">2901</span>, <span class="number">2904</span>, <span class="number">2907</span>, <span class="number">2910</span>, <span class="number">2914</span>, <span class="number">2915</span>, <span class="number">2916</span>, <span class="number">2917</span>, <span class="number">2918</span>, <span class="number">2919</span>, <span class="number">2920</span>, <span class="number">2921</span>, <span class="number">2922</span>, <span class="number">2923</span>, <span class="number">2925</span>, <span class="number">2925</span>, <span class="number">2925</span>, <span class="number">2925</span>, <span class="number">2925</span>, <span class="number">2925</span>, <span class="number">2925</span>, <span class="number">2925</span>, <span class="number">2925</span>, <span class="number">2925</span>, <span class="number">2926</span>, <span class="number">2927</span>, <span class="number">2928</span>, <span class="number">2929</span>, <span class="number">2930</span>, <span class="number">2931</span>, <span class="number">2932</span>, <span class="number">2933</span>, <span class="number">2934</span>, <span class="number">2935</span>, <span class="number">2937</span>, <span class="number">2939</span>, <span class="number">2941</span>, <span class="number">2943</span>, <span class="number">2945</span>, <span class="number">2947</span>, <span class="number">2949</span>, <span class="number">2951</span>, <span class="number">2953</span>, <span class="number">2955</span>, <span class="number">2958</span>, <span class="number">2961</span>, <span class="number">2964</span>, <span class="number">2967</span>, <span class="number">2970</span>, <span class="number">2973</span>, <span class="number">2976</span>, <span class="number">2979</span>, <span class="number">2982</span>, <span class="number">2985</span>, <span class="number">2989</span>, <span class="number">2990</span>, <span class="number">2991</span>, <span class="number">2992</span>, <span class="number">2993</span>, <span class="number">2994</span>, <span class="number">2995</span>, <span class="number">2996</span>, <span class="number">2997</span>, <span class="number">2998</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3001</span>, <span class="number">3002</span>, <span class="number">3003</span>, <span class="number">3004</span>, <span class="number">3005</span>, <span class="number">3006</span>, <span class="number">3007</span>, <span class="number">3008</span>, <span class="number">3009</span>, <span class="number">3010</span>, <span class="number">3012</span>, <span class="number">3014</span>, <span class="number">3016</span>, <span class="number">3018</span>, <span class="number">3020</span>, <span class="number">3022</span>, <span class="number">3024</span>, <span class="number">3026</span>, <span class="number">3028</span>, <span class="number">3030</span>, <span class="number">3033</span>, <span class="number">3036</span>, <span class="number">3039</span>, <span class="number">3042</span>, <span class="number">3045</span>, <span class="number">3048</span>, <span class="number">3051</span>, <span class="number">3054</span>, <span class="number">3057</span>, <span class="number">3060</span>, <span class="number">3064</span>, <span class="number">3065</span>, <span class="number">3066</span>, <span class="number">3067</span>, <span class="number">3068</span>, <span class="number">3069</span>, <span class="number">3070</span>, <span class="number">3071</span>, <span class="number">3072</span>, <span class="number">3073</span>, <span class="number">3075</span>, <span class="number">3075</span>, <span class="number">3075</span>, <span class="number">3075</span>, <span class="number">3075</span>, <span class="number">3075</span>, <span class="number">3075</span>, <span class="number">3075</span>, <span class="number">3075</span>, <span class="number">3075</span>, <span class="number">3076</span>, <span class="number">3077</span>, <span class="number">3078</span>, <span class="number">3079</span>, <span class="number">3080</span>, <span class="number">3081</span>, <span class="number">3082</span>, <span class="number">3083</span>, <span class="number">3084</span>, <span class="number">3085</span>, <span class="number">3087</span>, <span class="number">3089</span>, <span class="number">3091</span>, <span class="number">3093</span>, <span class="number">3095</span>, <span class="number">3097</span>, <span class="number">3099</span>, <span class="number">3101</span>, <span class="number">3103</span>, <span class="number">3105</span>, <span class="number">3108</span>, <span class="number">3111</span>, <span class="number">3114</span>, <span class="number">3117</span>, <span class="number">3120</span>, <span class="number">3123</span>, <span class="number">3126</span>, <span class="number">3129</span>, <span class="number">3132</span>, <span class="number">3135</span>, <span class="number">3139</span>, <span class="number">3140</span>, <span class="number">3141</span>, <span class="number">3142</span>, <span class="number">3143</span>, <span class="number">3144</span>, <span class="number">3145</span>, <span class="number">3146</span>, <span class="number">3147</span>, <span class="number">3148</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3150</span>, <span class="number">3151</span>, <span class="number">3152</span>, <span class="number">3153</span>, <span class="number">3154</span>, <span class="number">3155</span>, <span class="number">3156</span>, <span class="number">3157</span>, <span class="number">3158</span>, <span class="number">3159</span>, <span class="number">3160</span>, <span class="number">3162</span>, <span class="number">3164</span>, <span class="number">3166</span>, <span class="number">3168</span>, <span class="number">3170</span>, <span class="number">3172</span>, <span class="number">3174</span>, <span class="number">3176</span>, <span class="number">3178</span>, <span class="number">3180</span>, <span class="number">3183</span>, <span class="number">3186</span>, <span class="number">3189</span>, <span class="number">3192</span>, <span class="number">3195</span>, <span class="number">3198</span>, <span class="number">3201</span>, <span class="number">3204</span>, <span class="number">3207</span>, <span class="number">3210</span>, <span class="number">3214</span>, <span class="number">3215</span>, <span class="number">3216</span>, <span class="number">3217</span>, <span class="number">3218</span>, <span class="number">3219</span>, <span class="number">3220</span>, <span class="number">3221</span>, <span class="number">3222</span>, <span class="number">3223</span>, <span class="number">3225</span>, <span class="number">3225</span>, <span class="number">3225</span>, <span class="number">3225</span>, <span class="number">3225</span>, <span class="number">3225</span>, <span class="number">3225</span>, <span class="number">3225</span>, <span class="number">3225</span>, <span class="number">3225</span>, <span class="number">3226</span>, <span class="number">3227</span>, <span class="number">3228</span>, <span class="number">3229</span>, <span class="number">3230</span>, <span class="number">3231</span>, <span class="number">3232</span>, <span class="number">3233</span>, <span class="number">3234</span>, <span class="number">3235</span>, <span class="number">3237</span>, <span class="number">3239</span>, <span class="number">3241</span>, <span class="number">3243</span>, <span class="number">3245</span>, <span class="number">3247</span>, <span class="number">3249</span>, <span class="number">3251</span>, <span class="number">3253</span>, <span class="number">3255</span>, <span class="number">3258</span>, <span class="number">3261</span>, <span class="number">3264</span>, <span class="number">3267</span>, <span class="number">3270</span>, <span class="number">3273</span>, <span class="number">3276</span>, <span class="number">3279</span>, <span class="number">3282</span>, <span class="number">3285</span>, <span class="number">3289</span>, <span class="number">3290</span>, <span class="number">3291</span>, <span class="number">3292</span>, <span class="number">3293</span>, <span class="number">3294</span>, <span class="number">3295</span>, <span class="number">3296</span>, <span class="number">3297</span>, <span class="number">3298</span>, <span class="number">3300</span>, <span class="number">3300</span>, <span class="number">3300</span>, <span class="number">3300</span>, <span class="number">3300</span>, <span class="number">3300</span>, <span class="number">3300</span>, <span class="number">3300</span>, <span class="number">3300</span>, <span class="number">3300</span>, <span class="number">3301</span>, <span class="number">3302</span>, <span class="number">3303</span>, <span class="number">3304</span>, <span class="number">3305</span>, <span class="number">3306</span>, <span class="number">3307</span>, <span class="number">3308</span>, <span class="number">3309</span>, <span class="number">3310</span>, <span class="number">3312</span>, <span class="number">3314</span>, <span class="number">3316</span>, <span class="number">3318</span>, <span class="number">3320</span>, <span class="number">3322</span>, <span class="number">3324</span>, <span class="number">3326</span>, <span class="number">3328</span>, <span class="number">3330</span>, <span class="number">3333</span>, <span class="number">3336</span>, <span class="number">3339</span>, <span class="number">3342</span>, <span class="number">3345</span>, <span class="number">3348</span>, <span class="number">3351</span>, <span class="number">3354</span>, <span class="number">3357</span>, <span class="number">3360</span>, <span class="number">3364</span>, <span class="number">3365</span>, <span class="number">3366</span>, <span class="number">3367</span>, <span class="number">3368</span>, <span class="number">3369</span>, <span class="number">3370</span>, <span class="number">3371</span>, <span class="number">3372</span>, <span class="number">3373</span>, <span class="number">3375</span>, <span class="number">3375</span>, <span class="number">3375</span>, <span class="number">3375</span>, <span class="number">3375</span>, <span class="number">3375</span>, <span class="number">3375</span>, <span class="number">3375</span>, <span class="number">3375</span>, <span class="number">3375</span>, <span class="number">3376</span>, <span class="number">3377</span>, <span class="number">3378</span>, <span class="number">3379</span>, <span class="number">3380</span>, <span class="number">3381</span>, <span class="number">3382</span>, <span class="number">3383</span>, <span class="number">3384</span>, <span class="number">3385</span>, <span class="number">3387</span>, <span class="number">3389</span>, <span class="number">3391</span>, <span class="number">3393</span>, <span class="number">3395</span>, <span class="number">3397</span>, <span class="number">3399</span>, <span class="number">3401</span>, <span class="number">3403</span>, <span class="number">3405</span>, <span class="number">3408</span>, <span class="number">3411</span>, <span class="number">3414</span>, <span class="number">3417</span>, <span class="number">3420</span>, <span class="number">3423</span>, <span class="number">3426</span>, <span class="number">3429</span>, <span class="number">3432</span>, <span class="number">3435</span>, <span class="number">3439</span>, <span class="number">3440</span>, <span class="number">3441</span>, <span class="number">3442</span>, <span class="number">3443</span>, <span class="number">3444</span>, <span class="number">3445</span>, <span class="number">3446</span>, <span class="number">3447</span>, <span class="number">3448</span>, <span class="number">3450</span>, <span class="number">3450</span>, <span class="number">3450</span>, <span class="number">3450</span>, <span class="number">3450</span>, <span class="number">3450</span>, <span class="number">3450</span>, <span class="number">3450</span>, <span class="number">3450</span>, <span class="number">3450</span>, <span class="number">3451</span>, <span class="number">3452</span>, <span class="number">3453</span>, <span class="number">3454</span>, <span class="number">3455</span>, <span class="number">3456</span>, <span class="number">3457</span>, <span class="number">3458</span>, <span class="number">3459</span>, <span class="number">3460</span>, <span class="number">3462</span>, <span class="number">3464</span>, <span class="number">3466</span>, <span class="number">3468</span>, <span class="number">3470</span>, <span class="number">3472</span>, <span class="number">3474</span>, <span class="number">3476</span>, <span class="number">3478</span>, <span class="number">3480</span>, <span class="number">3483</span>, <span class="number">3486</span>, <span class="number">3489</span>, <span class="number">3492</span>, <span class="number">3495</span>, <span class="number">3498</span>, <span class="number">3501</span>, <span class="number">3504</span>, <span class="number">3507</span>, <span class="number">3510</span>, <span class="number">3514</span>, <span class="number">3515</span>, <span class="number">3516</span>, <span class="number">3517</span>, <span class="number">3518</span>, <span class="number">3519</span>, <span class="number">3520</span>, <span class="number">3521</span>, <span class="number">3522</span>, <span class="number">3523</span>, <span class="number">3525</span>, <span class="number">3525</span>, <span class="number">3525</span>, <span class="number">3525</span>, <span class="number">3525</span>, <span class="number">3525</span>, <span class="number">3525</span>, <span class="number">3525</span>, <span class="number">3525</span>, <span class="number">3525</span>, <span class="number">3526</span>, <span class="number">3527</span>, <span class="number">3528</span>, <span class="number">3529</span>, <span class="number">3530</span>, <span class="number">3531</span>, <span class="number">3532</span>, <span class="number">3533</span>, <span class="number">3534</span>, <span class="number">3535</span>, <span class="number">3537</span>, <span class="number">3539</span>, <span class="number">3541</span>, <span class="number">3543</span>, <span class="number">3545</span>, <span class="number">3547</span>, <span class="number">3549</span>, <span class="number">3551</span>, <span class="number">3553</span>, <span class="number">3555</span>, <span class="number">3558</span>, <span class="number">3561</span>, <span class="number">3564</span>, <span class="number">3567</span>, <span class="number">3570</span>, <span class="number">3573</span>, <span class="number">3576</span>, <span class="number">3579</span>, <span class="number">3582</span>, <span class="number">3585</span>, <span class="number">3589</span>, <span class="number">3590</span>, <span class="number">3591</span>, <span class="number">3592</span>, <span class="number">3593</span>, <span class="number">3594</span>, <span class="number">3595</span>, <span class="number">3596</span>, <span class="number">3597</span>, <span class="number">3598</span>, <span class="number">3600</span>, <span class="number">3600</span>, <span class="number">3600</span>, <span class="number">3600</span>, <span class="number">3600</span>, <span class="number">3600</span>, <span class="number">3600</span>, <span class="number">3600</span>, <span class="number">3600</span>, <span class="number">3600</span>, <span class="number">3601</span>, <span class="number">3602</span>, <span class="number">3603</span>, <span class="number">3604</span>, <span class="number">3605</span>, <span class="number">3606</span>, <span class="number">3607</span>, <span class="number">3608</span>, <span class="number">3609</span>, <span class="number">3610</span>, <span class="number">3612</span>, <span class="number">3614</span>, <span class="number">3616</span>, <span class="number">3618</span>, <span class="number">3620</span>, <span class="number">3622</span>, <span class="number">3624</span>, <span class="number">3626</span>, <span class="number">3628</span>, <span class="number">3630</span>, <span class="number">3633</span>, <span class="number">3636</span>, <span class="number">3639</span>, <span class="number">3642</span>, <span class="number">3645</span>, <span class="number">3648</span>, <span class="number">3651</span>, <span class="number">3654</span>, <span class="number">3657</span>, <span class="number">3660</span>, <span class="number">3664</span>, <span class="number">3665</span>, <span class="number">3666</span>, <span class="number">3667</span>, <span class="number">3668</span>, <span class="number">3669</span>, <span class="number">3670</span>, <span class="number">3671</span>, <span class="number">3672</span>, <span class="number">3673</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3675</span>, <span class="number">3676</span>, <span class="number">3677</span>, <span class="number">3678</span>, <span class="number">3679</span>, <span class="number">3680</span>, <span class="number">3681</span>, <span class="number">3682</span>, <span class="number">3683</span>, <span class="number">3684</span>, <span class="number">3685</span>, <span class="number">3687</span>, <span class="number">3689</span>, <span class="number">3691</span>, <span class="number">3693</span>, <span class="number">3695</span>, <span class="number">3697</span>, <span class="number">3699</span>, <span class="number">3701</span>, <span class="number">3703</span>, <span class="number">3705</span>, <span class="number">3708</span>, <span class="number">3711</span>, <span class="number">3714</span>, <span class="number">3717</span>, <span class="number">3720</span>, <span class="number">3723</span>, <span class="number">3726</span>, <span class="number">3729</span>, <span class="number">3732</span>, <span class="number">3735</span>, <span class="number">3739</span>, <span class="number">3740</span>, <span class="number">3741</span>, <span class="number">3742</span>, <span class="number">3743</span>, <span class="number">3744</span>, <span class="number">3745</span>, <span class="number">3746</span>, <span class="number">3747</span>, <span class="number">3748</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3751</span>, <span class="number">3752</span>, <span class="number">3753</span>, <span class="number">3754</span>, <span class="number">3755</span>, <span class="number">3756</span>, <span class="number">3757</span>, <span class="number">3758</span>, <span class="number">3759</span>, <span class="number">3760</span>, <span class="number">3762</span>, <span class="number">3764</span>, <span class="number">3766</span>, <span class="number">3768</span>, <span class="number">3770</span>, <span class="number">3772</span>, <span class="number">3774</span>, <span class="number">3776</span>, <span class="number">3778</span>, <span class="number">3780</span>, <span class="number">3783</span>, <span class="number">3786</span>, <span class="number">3789</span>, <span class="number">3792</span>, <span class="number">3795</span>, <span class="number">3798</span>, <span class="number">3801</span>, <span class="number">3804</span>, <span class="number">3807</span>, <span class="number">3810</span>, <span class="number">3814</span>, <span class="number">3815</span>, <span class="number">3816</span>, <span class="number">3817</span>, <span class="number">3818</span>, <span class="number">3819</span>, <span class="number">3820</span>, <span class="number">3821</span>, <span class="number">3822</span>, <span class="number">3823</span>, <span class="number">3825</span>, <span class="number">3825</span>, <span class="number">3825</span>, <span class="number">3825</span>, <span class="number">3825</span>, <span class="number">3825</span>, <span class="number">3825</span>, <span class="number">3825</span>, <span class="number">3825</span>, <span class="number">3825</span>, <span class="number">3826</span>, <span class="number">3827</span>, <span class="number">3828</span>, <span class="number">3829</span>, <span class="number">3830</span>, <span class="number">3831</span>, <span class="number">3832</span>, <span class="number">3833</span>, <span class="number">3834</span>, <span class="number">3835</span>, <span class="number">3837</span>, <span class="number">3839</span>, <span class="number">3841</span>, <span class="number">3843</span>, <span class="number">3845</span>, <span class="number">3847</span>, <span class="number">3849</span>, <span class="number">3851</span>, <span class="number">3853</span>, <span class="number">3855</span>, <span class="number">3858</span>, <span class="number">3861</span>, <span class="number">3864</span>, <span class="number">3867</span>, <span class="number">3870</span>, <span class="number">3873</span>, <span class="number">3876</span>, <span class="number">3879</span>, <span class="number">3882</span>, <span class="number">3885</span>, <span class="number">3889</span>, <span class="number">3890</span>, <span class="number">3891</span>, <span class="number">3892</span>, <span class="number">3893</span>, <span class="number">3894</span>, <span class="number">3895</span>, <span class="number">3896</span>, <span class="number">3897</span>, <span class="number">3898</span>, <span class="number">3900</span>, <span class="number">3900</span>, <span class="number">3900</span>, <span class="number">3900</span>, <span class="number">3900</span>, <span class="number">3900</span>, <span class="number">3900</span>, <span class="number">3900</span>, <span class="number">3900</span>, <span class="number">3900</span>, <span class="number">3901</span>, <span class="number">3902</span>, <span class="number">3903</span>, <span class="number">3904</span>, <span class="number">3905</span>, <span class="number">3906</span>, <span class="number">3907</span>, <span class="number">3908</span>, <span class="number">3909</span>, <span class="number">3910</span>, <span class="number">3912</span>, <span class="number">3914</span>, <span class="number">3916</span>, <span class="number">3918</span>, <span class="number">3920</span>, <span class="number">3922</span>, <span class="number">3924</span>, <span class="number">3926</span>, <span class="number">3928</span>, <span class="number">3930</span>, <span class="number">3933</span>, <span class="number">3936</span>, <span class="number">3939</span>, <span class="number">3942</span>, <span class="number">3945</span>, <span class="number">3948</span>, <span class="number">3951</span>, <span class="number">3954</span>, <span class="number">3957</span>, <span class="number">3960</span>, <span class="number">3964</span>, <span class="number">3965</span>, <span class="number">3966</span>, <span class="number">3967</span>, <span class="number">3968</span>, <span class="number">3969</span>, <span class="number">3970</span>, <span class="number">3971</span>, <span class="number">3972</span>, <span class="number">3973</span>, <span class="number">3975</span>, <span class="number">3975</span>, <span class="number">3975</span>, <span class="number">3975</span>, <span class="number">3975</span>, <span class="number">3975</span>, <span class="number">3975</span>, <span class="number">3975</span>, <span class="number">3975</span>, <span class="number">3975</span>, <span class="number">3976</span>, <span class="number">3977</span>, <span class="number">3978</span>, <span class="number">3979</span>, <span class="number">3980</span>, <span class="number">3981</span>, <span class="number">3982</span>, <span class="number">3983</span>, <span class="number">3984</span>, <span class="number">3985</span>, <span class="number">3987</span>, <span class="number">3989</span>, <span class="number">3991</span>, <span class="number">3993</span>, <span class="number">3995</span>, <span class="number">3997</span>, <span class="number">3999</span>, <span class="number">4001</span>, <span class="number">4003</span>, <span class="number">4005</span>, <span class="number">4008</span>, <span class="number">4011</span>, <span class="number">4014</span>, <span class="number">4017</span>, <span class="number">4020</span>, <span class="number">4023</span>, <span class="number">4026</span>, <span class="number">4029</span>, <span class="number">4032</span>, <span class="number">4035</span>, <span class="number">4039</span>, <span class="number">4040</span>, <span class="number">4041</span>, <span class="number">4042</span>, <span class="number">4043</span>, <span class="number">4044</span>, <span class="number">4045</span>, <span class="number">4046</span>, <span class="number">4047</span>, <span class="number">4048</span>, <span class="number">4050</span>, <span class="number">4050</span>, <span class="number">4050</span>, <span class="number">4050</span>, <span class="number">4050</span>, <span class="number">4050</span>, <span class="number">4050</span>, <span class="number">4050</span>, <span class="number">4050</span>, <span class="number">4050</span>, <span class="number">4051</span>, <span class="number">4052</span>, <span class="number">4053</span>, <span class="number">4054</span>, <span class="number">4055</span>, <span class="number">4056</span>, <span class="number">4057</span>, <span class="number">4058</span>, <span class="number">4059</span>, <span class="number">4060</span>, <span class="number">4062</span>, <span class="number">4064</span>, <span class="number">4066</span>, <span class="number">4068</span>, <span class="number">4070</span>, <span class="number">4072</span>, <span class="number">4074</span>, <span class="number">4076</span>, <span class="number">4078</span>, <span class="number">4080</span>, <span class="number">4083</span>, <span class="number">4086</span>, <span class="number">4089</span>, <span class="number">4092</span>, <span class="number">4095</span>, <span class="number">4098</span>, <span class="number">4101</span>, <span class="number">4104</span>, <span class="number">4107</span>, <span class="number">4110</span>, <span class="number">4114</span>, <span class="number">4115</span>, <span class="number">4116</span>, <span class="number">4117</span>, <span class="number">4118</span>, <span class="number">4119</span>, <span class="number">4120</span>, <span class="number">4121</span>, <span class="number">4122</span>, <span class="number">4123</span>, <span class="number">4125</span>, <span class="number">4125</span>, <span class="number">4125</span>, <span class="number">4125</span>, <span class="number">4125</span>, <span class="number">4125</span>, <span class="number">4125</span>, <span class="number">4125</span>, <span class="number">4125</span>, <span class="number">4125</span>, <span class="number">4126</span>, <span class="number">4127</span>, <span class="number">4128</span>, <span class="number">4129</span>, <span class="number">4130</span>, <span class="number">4131</span>, <span class="number">4132</span>, <span class="number">4133</span>, <span class="number">4134</span>, <span class="number">4135</span>, <span class="number">4137</span>, <span class="number">4139</span>, <span class="number">4141</span>, <span class="number">4143</span>, <span class="number">4145</span>, <span class="number">4147</span>, <span class="number">4149</span>, <span class="number">4151</span>, <span class="number">4153</span>, <span class="number">4155</span>, <span class="number">4158</span>, <span class="number">4161</span>, <span class="number">4164</span>, <span class="number">4167</span>, <span class="number">4170</span>, <span class="number">4173</span>, <span class="number">4176</span>, <span class="number">4179</span>, <span class="number">4182</span>, <span class="number">4185</span>, <span class="number">4189</span>, <span class="number">4190</span>, <span class="number">4191</span>, <span class="number">4192</span>, <span class="number">4193</span>, <span class="number">4194</span>, <span class="number">4195</span>, <span class="number">4196</span>, <span class="number">4197</span>, <span class="number">4198</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4200</span>, <span class="number">4201</span>, <span class="number">4202</span>, <span class="number">4203</span>, <span class="number">4204</span>, <span class="number">4205</span>, <span class="number">4206</span>, <span class="number">4207</span>, <span class="number">4208</span>, <span class="number">4209</span>, <span class="number">4210</span>, <span class="number">4212</span>, <span class="number">4214</span>, <span class="number">4216</span>, <span class="number">4218</span>, <span class="number">4220</span>, <span class="number">4222</span>, <span class="number">4224</span>, <span class="number">4226</span>, <span class="number">4228</span>, <span class="number">4230</span>, <span class="number">4233</span>, <span class="number">4236</span>, <span class="number">4239</span>, <span class="number">4242</span>, <span class="number">4245</span>, <span class="number">4248</span>, <span class="number">4251</span>, <span class="number">4254</span>, <span class="number">4257</span>, <span class="number">4260</span>, <span class="number">4264</span>, <span class="number">4265</span>, <span class="number">4266</span>, <span class="number">4267</span>, <span class="number">4268</span>, <span class="number">4269</span>, <span class="number">4270</span>, <span class="number">4271</span>, <span class="number">4272</span>, <span class="number">4273</span>, <span class="number">4275</span>, <span class="number">4275</span>, <span class="number">4275</span>, <span class="number">4275</span>, <span class="number">4275</span>, <span class="number">4275</span>, <span class="number">4275</span>, <span class="number">4275</span>, <span class="number">4275</span>, <span class="number">4275</span>, <span class="number">4276</span>, <span class="number">4277</span>, <span class="number">4278</span>, <span class="number">4279</span>, <span class="number">4280</span>, <span class="number">4281</span>, <span class="number">4282</span>, <span class="number">4283</span>, <span class="number">4284</span>, <span class="number">4285</span>, <span class="number">4287</span>, <span class="number">4289</span>, <span class="number">4291</span>, <span class="number">4293</span>, <span class="number">4295</span>, <span class="number">4297</span>, <span class="number">4299</span>, <span class="number">4301</span>, <span class="number">4303</span>, <span class="number">4305</span>, <span class="number">4308</span>, <span class="number">4311</span>, <span class="number">4314</span>, <span class="number">4317</span>, <span class="number">4320</span>, <span class="number">4323</span>, <span class="number">4326</span>, <span class="number">4329</span>, <span class="number">4332</span>, <span class="number">4335</span>, <span class="number">4339</span>, <span class="number">4340</span>, <span class="number">4341</span>, <span class="number">4342</span>, <span class="number">4343</span>, <span class="number">4344</span>, <span class="number">4345</span>, <span class="number">4346</span>, <span class="number">4347</span>, <span class="number">4348</span>, <span class="number">4350</span>, <span class="number">4350</span>, <span class="number">4350</span>, <span class="number">4350</span>, <span class="number">4350</span>, <span class="number">4350</span>, <span class="number">4350</span>, <span class="number">4350</span>, <span class="number">4350</span>, <span class="number">4350</span>, <span class="number">4351</span>, <span class="number">4352</span>, <span class="number">4353</span>, <span class="number">4354</span>, <span class="number">4355</span>, <span class="number">4356</span>, <span class="number">4357</span>, <span class="number">4358</span>, <span class="number">4359</span>, <span class="number">4360</span>, <span class="number">4362</span>, <span class="number">4364</span>, <span class="number">4366</span>, <span class="number">4368</span>, <span class="number">4370</span>, <span class="number">4372</span>, <span class="number">4374</span>, <span class="number">4376</span>, <span class="number">4378</span>, <span class="number">4380</span>, <span class="number">4383</span>, <span class="number">4386</span>, <span class="number">4389</span>, <span class="number">4392</span>, <span class="number">4395</span>, <span class="number">4398</span>, <span class="number">4401</span>, <span class="number">4404</span>, <span class="number">4407</span>, <span class="number">4410</span>, <span class="number">4414</span>, <span class="number">4415</span>, <span class="number">4416</span>, <span class="number">4417</span>, <span class="number">4418</span>, <span class="number">4419</span>, <span class="number">4420</span>, <span class="number">4421</span>, <span class="number">4422</span>, <span class="number">4423</span>, <span class="number">4425</span>, <span class="number">4425</span>, <span class="number">4425</span>, <span class="number">4425</span>, <span class="number">4425</span>, <span class="number">4425</span>, <span class="number">4425</span>, <span class="number">4425</span>, <span class="number">4425</span>, <span class="number">4425</span>, <span class="number">4426</span>, <span class="number">4427</span>, <span class="number">4428</span>, <span class="number">4429</span>, <span class="number">4430</span>, <span class="number">4431</span>, <span class="number">4432</span>, <span class="number">4433</span>, <span class="number">4434</span>, <span class="number">4435</span>, <span class="number">4437</span>, <span class="number">4439</span>, <span class="number">4441</span>, <span class="number">4443</span>, <span class="number">4445</span>, <span class="number">4447</span>, <span class="number">4449</span>, <span class="number">4451</span>, <span class="number">4453</span>, <span class="number">4455</span>, <span class="number">4458</span>, <span class="number">4461</span>, <span class="number">4464</span>, <span class="number">4467</span>, <span class="number">4470</span>, <span class="number">4473</span>, <span class="number">4476</span>, <span class="number">4479</span>, <span class="number">4482</span>, <span class="number">4485</span>, <span class="number">4489</span>, <span class="number">4490</span>, <span class="number">4491</span>, <span class="number">4492</span>, <span class="number">4493</span>, <span class="number">4494</span>, <span class="number">4495</span>, <span class="number">4496</span>, <span class="number">4497</span>, <span class="number">4498</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4501</span>, <span class="number">4502</span>, <span class="number">4503</span>, <span class="number">4504</span>, <span class="number">4505</span>, <span class="number">4506</span>, <span class="number">4507</span>, <span class="number">4508</span>, <span class="number">4509</span>, <span class="number">4510</span>, <span class="number">4512</span>, <span class="number">4514</span>, <span class="number">4516</span>, <span class="number">4518</span>, <span class="number">4520</span>, <span class="number">4522</span>, <span class="number">4524</span>, <span class="number">4526</span>, <span class="number">4528</span>, <span class="number">4530</span>, <span class="number">4533</span>, <span class="number">4536</span>, <span class="number">4539</span>, <span class="number">4542</span>, <span class="number">4545</span>, <span class="number">4548</span>, <span class="number">4551</span>, <span class="number">4554</span>, <span class="number">4557</span>, <span class="number">4560</span>, <span class="number">4564</span>, <span class="number">4565</span>, <span class="number">4566</span>, <span class="number">4567</span>, <span class="number">4568</span>, <span class="number">4569</span>, <span class="number">4570</span>, <span class="number">4571</span>, <span class="number">4572</span>, <span class="number">4573</span>, <span class="number">4575</span>, <span class="number">4575</span>, <span class="number">4575</span>, <span class="number">4575</span>, <span class="number">4575</span>, <span class="number">4575</span>, <span class="number">4575</span>, <span class="number">4575</span>, <span class="number">4575</span>, <span class="number">4575</span>, <span class="number">4576</span>, <span class="number">4577</span>, <span class="number">4578</span>, <span class="number">4579</span>, <span class="number">4580</span>, <span class="number">4581</span>, <span class="number">4582</span>, <span class="number">4583</span>, <span class="number">4584</span>, <span class="number">4585</span>, <span class="number">4587</span>, <span class="number">4589</span>, <span class="number">4591</span>, <span class="number">4593</span>, <span class="number">4595</span>, <span class="number">4597</span>, <span class="number">4599</span>, <span class="number">4601</span>, <span class="number">4603</span>, <span class="number">4605</span>, <span class="number">4608</span>, <span class="number">4611</span>, <span class="number">4614</span>, <span class="number">4617</span>, <span class="number">4620</span>, <span class="number">4623</span>, <span class="number">4626</span>, <span class="number">4629</span>, <span class="number">4632</span>, <span class="number">4635</span>, <span class="number">4639</span>, <span class="number">4640</span>, <span class="number">4641</span>, <span class="number">4642</span>, <span class="number">4643</span>, <span class="number">4644</span>, <span class="number">4645</span>, <span class="number">4646</span>, <span class="number">4647</span>, <span class="number">4648</span>, <span class="number">4650</span>, <span class="number">4650</span>, <span class="number">4650</span>, <span class="number">4650</span>, <span class="number">4650</span>, <span class="number">4650</span>, <span class="number">4650</span>, <span class="number">4650</span>, <span class="number">4650</span>, <span class="number">4650</span>, <span class="number">4651</span>, <span class="number">4652</span>, <span class="number">4653</span>, <span class="number">4654</span>, <span class="number">4655</span>, <span class="number">4656</span>, <span class="number">4657</span>, <span class="number">4658</span>, <span class="number">4659</span>, <span class="number">4660</span>, <span class="number">4662</span>, <span class="number">4664</span>, <span class="number">4666</span>, <span class="number">4668</span>, <span class="number">4670</span>, <span class="number">4672</span>, <span class="number">4674</span>, <span class="number">4676</span>, <span class="number">4678</span>, <span class="number">4680</span>, <span class="number">4683</span>, <span class="number">4686</span>, <span class="number">4689</span>, <span class="number">4692</span>, <span class="number">4695</span>, <span class="number">4698</span>, <span class="number">4701</span>, <span class="number">4704</span>, <span class="number">4707</span>, <span class="number">4710</span>, <span class="number">4714</span>, <span class="number">4715</span>, <span class="number">4716</span>, <span class="number">4717</span>, <span class="number">4718</span>, <span class="number">4719</span>, <span class="number">4720</span>, <span class="number">4721</span>, <span class="number">4722</span>, <span class="number">4723</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4725</span>, <span class="number">4726</span>, <span class="number">4727</span>, <span class="number">4728</span>, <span class="number">4729</span>, <span class="number">4730</span>, <span class="number">4731</span>, <span class="number">4732</span>, <span class="number">4733</span>, <span class="number">4734</span>, <span class="number">4735</span>, <span class="number">4737</span>, <span class="number">4739</span>, <span class="number">4741</span>, <span class="number">4743</span>, <span class="number">4745</span>, <span class="number">4747</span>, <span class="number">4749</span>, <span class="number">4751</span>, <span class="number">4753</span>, <span class="number">4755</span>, <span class="number">4758</span>, <span class="number">4761</span>, <span class="number">4764</span>, <span class="number">4767</span>, <span class="number">4770</span>, <span class="number">4773</span>, <span class="number">4776</span>, <span class="number">4779</span>, <span class="number">4782</span>, <span class="number">4785</span>, <span class="number">4789</span>, <span class="number">4790</span>, <span class="number">4791</span>, <span class="number">4792</span>, <span class="number">4793</span>, <span class="number">4794</span>, <span class="number">4795</span>, <span class="number">4796</span>, <span class="number">4797</span>, <span class="number">4798</span>, <span class="number">4800</span>, <span class="number">4800</span>, <span class="number">4800</span>, <span class="number">4800</span>, <span class="number">4800</span>, <span class="number">4800</span>, <span class="number">4800</span>, <span class="number">4800</span>, <span class="number">4800</span>, <span class="number">4800</span>, <span class="number">4801</span>, <span class="number">4802</span>, <span class="number">4803</span>, <span class="number">4804</span>, <span class="number">4805</span>, <span class="number">4806</span>, <span class="number">4807</span>, <span class="number">4808</span>, <span class="number">4809</span>, <span class="number">4810</span>, <span class="number">4812</span>, <span class="number">4814</span>, <span class="number">4816</span>, <span class="number">4818</span>, <span class="number">4820</span>, <span class="number">4822</span>, <span class="number">4824</span>, <span class="number">4826</span>, <span class="number">4828</span>, <span class="number">4830</span>, <span class="number">4833</span>, <span class="number">4836</span>, <span class="number">4839</span>, <span class="number">4842</span>, <span class="number">4845</span>, <span class="number">4848</span>, <span class="number">4851</span>, <span class="number">4854</span>, <span class="number">4857</span>, <span class="number">4860</span>, <span class="number">4864</span>, <span class="number">4865</span>, <span class="number">4866</span>, <span class="number">4867</span>, <span class="number">4868</span>, <span class="number">4869</span>, <span class="number">4870</span>, <span class="number">4871</span>, <span class="number">4872</span>, <span class="number">4873</span>, <span class="number">4875</span>, <span class="number">4875</span>, <span class="number">4875</span>, <span class="number">4875</span>, <span class="number">4875</span>, <span class="number">4875</span>, <span class="number">4875</span>, <span class="number">4875</span>, <span class="number">4875</span>, <span class="number">4875</span>, <span class="number">4876</span>, <span class="number">4877</span>, <span class="number">4878</span>, <span class="number">4879</span>, <span class="number">4880</span>, <span class="number">4881</span>, <span class="number">4882</span>, <span class="number">4883</span>, <span class="number">4884</span>, <span class="number">4885</span>, <span class="number">4887</span>, <span class="number">4889</span>, <span class="number">4891</span>, <span class="number">4893</span>, <span class="number">4895</span>, <span class="number">4897</span>, <span class="number">4899</span>, <span class="number">4901</span>, <span class="number">4903</span>, <span class="number">4905</span>, <span class="number">4908</span>, <span class="number">4911</span>, <span class="number">4914</span>, <span class="number">4917</span>, <span class="number">4920</span>, <span class="number">4923</span>, <span class="number">4926</span>, <span class="number">4929</span>, <span class="number">4932</span>, <span class="number">4935</span>, <span class="number">4939</span>, <span class="number">4940</span>, <span class="number">4941</span>, <span class="number">4942</span>, <span class="number">4943</span>, <span class="number">4944</span>, <span class="number">4945</span>, <span class="number">4946</span>, <span class="number">4947</span>, <span class="number">4948</span>, <span class="number">4950</span>, <span class="number">4950</span>, <span class="number">4950</span>, <span class="number">4950</span>, <span class="number">4950</span>, <span class="number">4950</span>, <span class="number">4950</span>, <span class="number">4950</span>, <span class="number">4950</span>, <span class="number">4950</span>, <span class="number">4951</span>, <span class="number">4952</span>, <span class="number">4953</span>, <span class="number">4954</span>, <span class="number">4955</span>, <span class="number">4956</span>, <span class="number">4957</span>, <span class="number">4958</span>, <span class="number">4959</span>, <span class="number">4960</span>, <span class="number">4962</span>, <span class="number">4964</span>, <span class="number">4966</span>, <span class="number">4968</span>, <span class="number">4970</span>, <span class="number">4972</span>, <span class="number">4974</span>, <span class="number">4976</span>, <span class="number">4978</span>, <span class="number">4980</span>, <span class="number">4983</span>, <span class="number">4986</span>, <span class="number">4989</span>, <span class="number">4992</span>, <span class="number">4995</span>, <span class="number">4998</span>, <span class="number">5001</span>, <span class="number">5004</span>, <span class="number">5007</span>, <span class="number">5010</span>, <span class="number">5014</span>, <span class="number">5015</span>, <span class="number">5016</span>, <span class="number">5017</span>, <span class="number">5018</span>, <span class="number">5019</span>, <span class="number">5020</span>, <span class="number">5021</span>, <span class="number">5022</span>, <span class="number">5023</span>, <span class="number">5025</span>, <span class="number">5025</span>, <span class="number">5025</span>, <span class="number">5025</span>, <span class="number">5025</span>, <span class="number">5025</span>, <span class="number">5025</span>, <span class="number">5025</span>, <span class="number">5025</span>, <span class="number">5025</span>, <span class="number">5026</span>, <span class="number">5027</span>, <span class="number">5028</span>, <span class="number">5029</span>, <span class="number">5030</span>, <span class="number">5031</span>, <span class="number">5032</span>, <span class="number">5033</span>, <span class="number">5034</span>, <span class="number">5035</span>, <span class="number">5037</span>, <span class="number">5039</span>, <span class="number">5041</span>, <span class="number">5043</span>, <span class="number">5045</span>, <span class="number">5047</span>, <span class="number">5049</span>, <span class="number">5051</span>, <span class="number">5053</span>, <span class="number">5055</span>, <span class="number">5058</span>, <span class="number">5061</span>, <span class="number">5064</span>, <span class="number">5067</span>, <span class="number">5070</span>, <span class="number">5073</span>, <span class="number">5076</span>, <span class="number">5079</span>, <span class="number">5082</span>, <span class="number">5085</span>, <span class="number">5089</span>, <span class="number">5090</span>, <span class="number">5091</span>, <span class="number">5092</span>, <span class="number">5093</span>, <span class="number">5094</span>, <span class="number">5095</span>, <span class="number">5096</span>, <span class="number">5097</span>, <span class="number">5098</span>, <span class="number">5100</span>, <span class="number">5100</span>, <span class="number">5100</span>, <span class="number">5100</span>, <span class="number">5100</span>, <span class="number">5100</span>, <span class="number">5100</span>, <span class="number">5100</span>, <span class="number">5100</span>, <span class="number">5100</span>, <span class="number">5101</span>, <span class="number">5102</span>, <span class="number">5103</span>, <span class="number">5104</span>, <span class="number">5105</span>, <span class="number">5106</span>, <span class="number">5107</span>, <span class="number">5108</span>, <span class="number">5109</span>, <span class="number">5110</span>, <span class="number">5112</span>, <span class="number">5114</span>, <span class="number">5116</span>, <span class="number">5118</span>, <span class="number">5120</span>, <span class="number">5122</span>, <span class="number">5124</span>, <span class="number">5126</span>, <span class="number">5128</span>, <span class="number">5130</span>, <span class="number">5133</span>, <span class="number">5136</span>, <span class="number">5139</span>, <span class="number">5142</span>, <span class="number">5145</span>, <span class="number">5148</span>, <span class="number">5151</span>, <span class="number">5154</span>, <span class="number">5157</span>, <span class="number">5160</span>, <span class="number">5164</span>, <span class="number">5165</span>, <span class="number">5166</span>, <span class="number">5167</span>, <span class="number">5168</span>, <span class="number">5169</span>, <span class="number">5170</span>, <span class="number">5171</span>, <span class="number">5172</span>, <span class="number">5173</span>, <span class="number">5175</span>, <span class="number">5175</span>, <span class="number">5175</span>, <span class="number">5175</span>, <span class="number">5175</span>, <span class="number">5175</span>, <span class="number">5175</span>, <span class="number">5175</span>, <span class="number">5175</span>, <span class="number">5175</span>, <span class="number">5176</span>, <span class="number">5177</span>, <span class="number">5178</span>, <span class="number">5179</span>, <span class="number">5180</span>, <span class="number">5181</span>, <span class="number">5182</span>, <span class="number">5183</span>, <span class="number">5184</span>, <span class="number">5185</span>, <span class="number">5187</span>, <span class="number">5189</span>, <span class="number">5191</span>, <span class="number">5193</span>, <span class="number">5195</span>, <span class="number">5197</span>, <span class="number">5199</span>, <span class="number">5201</span>, <span class="number">5203</span>, <span class="number">5205</span>, <span class="number">5208</span>, <span class="number">5211</span>, <span class="number">5214</span>, <span class="number">5217</span>, <span class="number">5220</span>, <span class="number">5223</span>, <span class="number">5226</span>, <span class="number">5229</span>, <span class="number">5232</span>, <span class="number">5235</span>, <span class="number">5239</span>, <span class="number">5240</span>, <span class="number">5241</span>, <span class="number">5242</span>, <span class="number">5243</span>, <span class="number">5244</span>, <span class="number">5245</span>, <span class="number">5246</span>, <span class="number">5247</span>, <span class="number">5248</span>, <span class="number">5250</span>, <span class="number">5250</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> t4[<span class="number">3510</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">256</span>, <span class="number">257</span>, <span class="number">258</span>, <span class="number">259</span>, <span class="number">260</span>, <span class="number">261</span>, <span class="number">262</span>, <span class="number">263</span>, <span class="number">264</span>, <span class="number">265</span>, <span class="number">266</span>, <span class="number">267</span>, <span class="number">268</span>, <span class="number">269</span>, <span class="number">270</span>, <span class="number">271</span>, <span class="number">272</span>, <span class="number">273</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">287</span>, <span class="number">288</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">296</span>, <span class="number">297</span>, <span class="number">298</span>, <span class="number">299</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>, <span class="number">306</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">310</span>, <span class="number">311</span>, <span class="number">312</span>, <span class="number">313</span>, <span class="number">314</span>, <span class="number">315</span>, <span class="number">316</span>, <span class="number">317</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">321</span>, <span class="number">322</span>, <span class="number">323</span>, <span class="number">324</span>, <span class="number">325</span>, <span class="number">326</span>, <span class="number">327</span>, <span class="number">328</span>, <span class="number">329</span>, <span class="number">330</span>, <span class="number">331</span>, <span class="number">332</span>, <span class="number">333</span>, <span class="number">334</span>, <span class="number">335</span>, <span class="number">336</span>, <span class="number">337</span>, <span class="number">338</span>, <span class="number">339</span>, <span class="number">340</span>, <span class="number">341</span>, <span class="number">342</span>, <span class="number">343</span>, <span class="number">344</span>, <span class="number">345</span>, <span class="number">346</span>, <span class="number">347</span>, <span class="number">348</span>, <span class="number">349</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">351</span>, <span class="number">352</span>, <span class="number">353</span>, <span class="number">354</span>, <span class="number">355</span>, <span class="number">356</span>, <span class="number">357</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">361</span>, <span class="number">362</span>, <span class="number">363</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">375</span>, <span class="number">376</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">380</span>, <span class="number">381</span>, <span class="number">382</span>, <span class="number">383</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">386</span>, <span class="number">387</span>, <span class="number">388</span>, <span class="number">389</span>, <span class="number">390</span>, <span class="number">391</span>, <span class="number">392</span>, <span class="number">393</span>, <span class="number">394</span>, <span class="number">395</span>, <span class="number">396</span>, <span class="number">397</span>, <span class="number">398</span>, <span class="number">399</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="number">402</span>, <span class="number">403</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">407</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">411</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">415</span>, <span class="number">416</span>, <span class="number">417</span>, <span class="number">418</span>, <span class="number">419</span>, <span class="number">420</span>, <span class="number">421</span>, <span class="number">422</span>, <span class="number">423</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">426</span>, <span class="number">427</span>, <span class="number">428</span>, <span class="number">429</span>, <span class="number">430</span>, <span class="number">431</span>, <span class="number">432</span>, <span class="number">433</span>, <span class="number">434</span>, <span class="number">435</span>, <span class="number">436</span>, <span class="number">437</span>, <span class="number">438</span>, <span class="number">439</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">443</span>, <span class="number">444</span>, <span class="number">445</span>, <span class="number">446</span>, <span class="number">447</span>, <span class="number">448</span>, <span class="number">449</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">450</span>, <span class="number">451</span>, <span class="number">452</span>, <span class="number">453</span>, <span class="number">454</span>, <span class="number">455</span>, <span class="number">456</span>, <span class="number">457</span>, <span class="number">458</span>, <span class="number">459</span>, <span class="number">460</span>, <span class="number">461</span>, <span class="number">462</span>, <span class="number">463</span>, <span class="number">464</span>, <span class="number">465</span>, <span class="number">466</span>, <span class="number">467</span>, <span class="number">468</span>, <span class="number">469</span>, <span class="number">470</span>, <span class="number">471</span>, <span class="number">472</span>, <span class="number">473</span>, <span class="number">474</span>, <span class="number">475</span>, <span class="number">476</span>, <span class="number">477</span>, <span class="number">478</span>, <span class="number">479</span>, <span class="number">480</span>, <span class="number">481</span>, <span class="number">482</span>, <span class="number">483</span>, <span class="number">484</span>, <span class="number">485</span>, <span class="number">486</span>, <span class="number">487</span>, <span class="number">488</span>, <span class="number">489</span>, <span class="number">490</span>, <span class="number">491</span>, <span class="number">492</span>, <span class="number">493</span>, <span class="number">494</span>, <span class="number">495</span>, <span class="number">496</span>, <span class="number">497</span>, <span class="number">498</span>, <span class="number">499</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">501</span>, <span class="number">502</span>, <span class="number">503</span>, <span class="number">504</span>, <span class="number">505</span>, <span class="number">506</span>, <span class="number">507</span>, <span class="number">508</span>, <span class="number">509</span>, <span class="number">510</span>, <span class="number">511</span>, <span class="number">512</span>, <span class="number">513</span>, <span class="number">514</span>, <span class="number">515</span>, <span class="number">516</span>, <span class="number">517</span>, <span class="number">518</span>, <span class="number">519</span>, <span class="number">520</span>, <span class="number">521</span>, <span class="number">522</span>, <span class="number">523</span>, <span class="number">524</span>, <span class="number">525</span>, <span class="number">526</span>, <span class="number">527</span>, <span class="number">528</span>, <span class="number">529</span>, <span class="number">530</span>, <span class="number">531</span>, <span class="number">532</span>, <span class="number">533</span>, <span class="number">534</span>, <span class="number">535</span>, <span class="number">536</span>, <span class="number">537</span>, <span class="number">538</span>, <span class="number">539</span>, <span class="number">540</span>, <span class="number">541</span>, <span class="number">542</span>, <span class="number">543</span>, <span class="number">544</span>, <span class="number">545</span>, <span class="number">546</span>, <span class="number">547</span>, <span class="number">548</span>, <span class="number">549</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">550</span>, <span class="number">551</span>, <span class="number">552</span>, <span class="number">553</span>, <span class="number">554</span>, <span class="number">555</span>, <span class="number">556</span>, <span class="number">557</span>, <span class="number">558</span>, <span class="number">559</span>, <span class="number">560</span>, <span class="number">561</span>, <span class="number">562</span>, <span class="number">563</span>, <span class="number">564</span>, <span class="number">565</span>, <span class="number">566</span>, <span class="number">567</span>, <span class="number">568</span>, <span class="number">569</span>, <span class="number">570</span>, <span class="number">571</span>, <span class="number">572</span>, <span class="number">573</span>, <span class="number">574</span>, <span class="number">575</span>, <span class="number">576</span>, <span class="number">577</span>, <span class="number">578</span>, <span class="number">579</span>, <span class="number">580</span>, <span class="number">581</span>, <span class="number">582</span>, <span class="number">583</span>, <span class="number">584</span>, <span class="number">585</span>, <span class="number">586</span>, <span class="number">587</span>, <span class="number">588</span>, <span class="number">589</span>, <span class="number">590</span>, <span class="number">591</span>, <span class="number">592</span>, <span class="number">593</span>, <span class="number">594</span>, <span class="number">595</span>, <span class="number">596</span>, <span class="number">597</span>, <span class="number">598</span>, <span class="number">599</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">601</span>, <span class="number">602</span>, <span class="number">603</span>, <span class="number">604</span>, <span class="number">605</span>, <span class="number">606</span>, <span class="number">607</span>, <span class="number">608</span>, <span class="number">609</span>, <span class="number">610</span>, <span class="number">611</span>, <span class="number">612</span>, <span class="number">613</span>, <span class="number">614</span>, <span class="number">615</span>, <span class="number">616</span>, <span class="number">617</span>, <span class="number">618</span>, <span class="number">619</span>, <span class="number">620</span>, <span class="number">621</span>, <span class="number">622</span>, <span class="number">623</span>, <span class="number">624</span>, <span class="number">625</span>, <span class="number">626</span>, <span class="number">627</span>, <span class="number">628</span>, <span class="number">629</span>, <span class="number">630</span>, <span class="number">631</span>, <span class="number">632</span>, <span class="number">633</span>, <span class="number">634</span>, <span class="number">635</span>, <span class="number">636</span>, <span class="number">637</span>, <span class="number">638</span>, <span class="number">639</span>, <span class="number">640</span>, <span class="number">641</span>, <span class="number">642</span>, <span class="number">643</span>, <span class="number">644</span>, <span class="number">645</span>, <span class="number">646</span>, <span class="number">647</span>, <span class="number">648</span>, <span class="number">649</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">650</span>, <span class="number">651</span>, <span class="number">652</span>, <span class="number">653</span>, <span class="number">654</span>, <span class="number">655</span>, <span class="number">656</span>, <span class="number">657</span>, <span class="number">658</span>, <span class="number">659</span>, <span class="number">660</span>, <span class="number">661</span>, <span class="number">662</span>, <span class="number">663</span>, <span class="number">664</span>, <span class="number">665</span>, <span class="number">666</span>, <span class="number">667</span>, <span class="number">668</span>, <span class="number">669</span>, <span class="number">670</span>, <span class="number">671</span>, <span class="number">672</span>, <span class="number">673</span>, <span class="number">674</span>, <span class="number">675</span>, <span class="number">676</span>, <span class="number">677</span>, <span class="number">678</span>, <span class="number">679</span>, <span class="number">680</span>, <span class="number">681</span>, <span class="number">682</span>, <span class="number">683</span>, <span class="number">684</span>, <span class="number">685</span>, <span class="number">686</span>, <span class="number">687</span>, <span class="number">688</span>, <span class="number">689</span>, <span class="number">690</span>, <span class="number">691</span>, <span class="number">692</span>, <span class="number">693</span>, <span class="number">694</span>, <span class="number">695</span>, <span class="number">696</span>, <span class="number">697</span>, <span class="number">698</span>, <span class="number">699</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">701</span>, <span class="number">702</span>, <span class="number">703</span>, <span class="number">704</span>, <span class="number">705</span>, <span class="number">706</span>, <span class="number">707</span>, <span class="number">708</span>, <span class="number">709</span>, <span class="number">710</span>, <span class="number">711</span>, <span class="number">712</span>, <span class="number">713</span>, <span class="number">714</span>, <span class="number">715</span>, <span class="number">716</span>, <span class="number">717</span>, <span class="number">718</span>, <span class="number">719</span>, <span class="number">720</span>, <span class="number">721</span>, <span class="number">722</span>, <span class="number">723</span>, <span class="number">724</span>, <span class="number">725</span>, <span class="number">726</span>, <span class="number">727</span>, <span class="number">728</span>, <span class="number">729</span>, <span class="number">730</span>, <span class="number">731</span>, <span class="number">732</span>, <span class="number">733</span>, <span class="number">734</span>, <span class="number">735</span>, <span class="number">736</span>, <span class="number">737</span>, <span class="number">738</span>, <span class="number">739</span>, <span class="number">740</span>, <span class="number">741</span>, <span class="number">742</span>, <span class="number">743</span>, <span class="number">744</span>, <span class="number">745</span>, <span class="number">746</span>, <span class="number">747</span>, <span class="number">748</span>, <span class="number">749</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">751</span>, <span class="number">752</span>, <span class="number">753</span>, <span class="number">754</span>, <span class="number">755</span>, <span class="number">756</span>, <span class="number">757</span>, <span class="number">758</span>, <span class="number">759</span>, <span class="number">760</span>, <span class="number">761</span>, <span class="number">762</span>, <span class="number">763</span>, <span class="number">764</span>, <span class="number">765</span>, <span class="number">766</span>, <span class="number">767</span>, <span class="number">768</span>, <span class="number">769</span>, <span class="number">770</span>, <span class="number">771</span>, <span class="number">772</span>, <span class="number">773</span>, <span class="number">774</span>, <span class="number">775</span>, <span class="number">776</span>, <span class="number">777</span>, <span class="number">778</span>, <span class="number">779</span>, <span class="number">780</span>, <span class="number">781</span>, <span class="number">782</span>, <span class="number">783</span>, <span class="number">784</span>, <span class="number">785</span>, <span class="number">786</span>, <span class="number">787</span>, <span class="number">788</span>, <span class="number">789</span>, <span class="number">790</span>, <span class="number">791</span>, <span class="number">792</span>, <span class="number">793</span>, <span class="number">794</span>, <span class="number">795</span>, <span class="number">796</span>, <span class="number">797</span>, <span class="number">798</span>, <span class="number">799</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">801</span>, <span class="number">802</span>, <span class="number">803</span>, <span class="number">804</span>, <span class="number">805</span>, <span class="number">806</span>, <span class="number">807</span>, <span class="number">808</span>, <span class="number">809</span>, <span class="number">810</span>, <span class="number">811</span>, <span class="number">812</span>, <span class="number">813</span>, <span class="number">814</span>, <span class="number">815</span>, <span class="number">816</span>, <span class="number">817</span>, <span class="number">818</span>, <span class="number">819</span>, <span class="number">820</span>, <span class="number">821</span>, <span class="number">822</span>, <span class="number">823</span>, <span class="number">824</span>, <span class="number">825</span>, <span class="number">826</span>, <span class="number">827</span>, <span class="number">828</span>, <span class="number">829</span>, <span class="number">830</span>, <span class="number">831</span>, <span class="number">832</span>, <span class="number">833</span>, <span class="number">834</span>, <span class="number">835</span>, <span class="number">836</span>, <span class="number">837</span>, <span class="number">838</span>, <span class="number">839</span>, <span class="number">840</span>, <span class="number">841</span>, <span class="number">842</span>, <span class="number">843</span>, <span class="number">844</span>, <span class="number">845</span>, <span class="number">846</span>, <span class="number">847</span>, <span class="number">848</span>, <span class="number">849</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">850</span>, <span class="number">851</span>, <span class="number">852</span>, <span class="number">853</span>, <span class="number">854</span>, <span class="number">855</span>, <span class="number">856</span>, <span class="number">857</span>, <span class="number">858</span>, <span class="number">859</span>, <span class="number">860</span>, <span class="number">861</span>, <span class="number">862</span>, <span class="number">863</span>, <span class="number">864</span>, <span class="number">865</span>, <span class="number">866</span>, <span class="number">867</span>, <span class="number">868</span>, <span class="number">869</span>, <span class="number">870</span>, <span class="number">871</span>, <span class="number">872</span>, <span class="number">873</span>, <span class="number">874</span>, <span class="number">875</span>, <span class="number">876</span>, <span class="number">877</span>, <span class="number">878</span>, <span class="number">879</span>, <span class="number">880</span>, <span class="number">881</span>, <span class="number">882</span>, <span class="number">883</span>, <span class="number">884</span>, <span class="number">885</span>, <span class="number">886</span>, <span class="number">887</span>, <span class="number">888</span>, <span class="number">889</span>, <span class="number">890</span>, <span class="number">891</span>, <span class="number">892</span>, <span class="number">893</span>, <span class="number">894</span>, <span class="number">895</span>, <span class="number">896</span>, <span class="number">897</span>, <span class="number">898</span>, <span class="number">899</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">900</span>, <span class="number">901</span>, <span class="number">902</span>, <span class="number">903</span>, <span class="number">904</span>, <span class="number">905</span>, <span class="number">906</span>, <span class="number">907</span>, <span class="number">908</span>, <span class="number">909</span>, <span class="number">910</span>, <span class="number">911</span>, <span class="number">912</span>, <span class="number">913</span>, <span class="number">914</span>, <span class="number">915</span>, <span class="number">916</span>, <span class="number">917</span>, <span class="number">918</span>, <span class="number">919</span>, <span class="number">920</span>, <span class="number">921</span>, <span class="number">922</span>, <span class="number">923</span>, <span class="number">924</span>, <span class="number">925</span>, <span class="number">926</span>, <span class="number">927</span>, <span class="number">928</span>, <span class="number">929</span>, <span class="number">930</span>, <span class="number">931</span>, <span class="number">932</span>, <span class="number">933</span>, <span class="number">934</span>, <span class="number">935</span>, <span class="number">936</span>, <span class="number">937</span>, <span class="number">938</span>, <span class="number">939</span>, <span class="number">940</span>, <span class="number">941</span>, <span class="number">942</span>, <span class="number">943</span>, <span class="number">944</span>, <span class="number">945</span>, <span class="number">946</span>, <span class="number">947</span>, <span class="number">948</span>, <span class="number">949</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">950</span>, <span class="number">951</span>, <span class="number">952</span>, <span class="number">953</span>, <span class="number">954</span>, <span class="number">955</span>, <span class="number">956</span>, <span class="number">957</span>, <span class="number">958</span>, <span class="number">959</span>, <span class="number">960</span>, <span class="number">961</span>, <span class="number">962</span>, <span class="number">963</span>, <span class="number">964</span>, <span class="number">965</span>, <span class="number">966</span>, <span class="number">967</span>, <span class="number">968</span>, <span class="number">969</span>, <span class="number">970</span>, <span class="number">971</span>, <span class="number">972</span>, <span class="number">973</span>, <span class="number">974</span>, <span class="number">975</span>, <span class="number">976</span>, <span class="number">977</span>, <span class="number">978</span>, <span class="number">979</span>, <span class="number">980</span>, <span class="number">981</span>, <span class="number">982</span>, <span class="number">983</span>, <span class="number">984</span>, <span class="number">985</span>, <span class="number">986</span>, <span class="number">987</span>, <span class="number">988</span>, <span class="number">989</span>, <span class="number">990</span>, <span class="number">991</span>, <span class="number">992</span>, <span class="number">993</span>, <span class="number">994</span>, <span class="number">995</span>, <span class="number">996</span>, <span class="number">997</span>, <span class="number">998</span>, <span class="number">999</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1003</span>, <span class="number">1004</span>, <span class="number">1005</span>, <span class="number">1006</span>, <span class="number">1007</span>, <span class="number">1008</span>, <span class="number">1009</span>, <span class="number">1010</span>, <span class="number">1011</span>, <span class="number">1012</span>, <span class="number">1013</span>, <span class="number">1014</span>, <span class="number">1015</span>, <span class="number">1016</span>, <span class="number">1017</span>, <span class="number">1018</span>, <span class="number">1019</span>, <span class="number">1020</span>, <span class="number">1021</span>, <span class="number">1022</span>, <span class="number">1023</span>, <span class="number">1024</span>, <span class="number">1025</span>, <span class="number">1026</span>, <span class="number">1027</span>, <span class="number">1028</span>, <span class="number">1029</span>, <span class="number">1030</span>, <span class="number">1031</span>, <span class="number">1032</span>, <span class="number">1033</span>, <span class="number">1034</span>, <span class="number">1035</span>, <span class="number">1036</span>, <span class="number">1037</span>, <span class="number">1038</span>, <span class="number">1039</span>, <span class="number">1040</span>, <span class="number">1041</span>, <span class="number">1042</span>, <span class="number">1043</span>, <span class="number">1044</span>, <span class="number">1045</span>, <span class="number">1046</span>, <span class="number">1047</span>, <span class="number">1048</span>, <span class="number">1049</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1050</span>, <span class="number">1051</span>, <span class="number">1052</span>, <span class="number">1053</span>, <span class="number">1054</span>, <span class="number">1055</span>, <span class="number">1056</span>, <span class="number">1057</span>, <span class="number">1058</span>, <span class="number">1059</span>, <span class="number">1060</span>, <span class="number">1061</span>, <span class="number">1062</span>, <span class="number">1063</span>, <span class="number">1064</span>, <span class="number">1065</span>, <span class="number">1066</span>, <span class="number">1067</span>, <span class="number">1068</span>, <span class="number">1069</span>, <span class="number">1070</span>, <span class="number">1071</span>, <span class="number">1072</span>, <span class="number">1073</span>, <span class="number">1074</span>, <span class="number">1075</span>, <span class="number">1076</span>, <span class="number">1077</span>, <span class="number">1078</span>, <span class="number">1079</span>, <span class="number">1080</span>, <span class="number">1081</span>, <span class="number">1082</span>, <span class="number">1083</span>, <span class="number">1084</span>, <span class="number">1085</span>, <span class="number">1086</span>, <span class="number">1087</span>, <span class="number">1088</span>, <span class="number">1089</span>, <span class="number">1090</span>, <span class="number">1091</span>, <span class="number">1092</span>, <span class="number">1093</span>, <span class="number">1094</span>, <span class="number">1095</span>, <span class="number">1096</span>, <span class="number">1097</span>, <span class="number">1098</span>, <span class="number">1099</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1100</span>, <span class="number">1101</span>, <span class="number">1102</span>, <span class="number">1103</span>, <span class="number">1104</span>, <span class="number">1105</span>, <span class="number">1106</span>, <span class="number">1107</span>, <span class="number">1108</span>, <span class="number">1109</span>, <span class="number">1110</span>, <span class="number">1111</span>, <span class="number">1112</span>, <span class="number">1113</span>, <span class="number">1114</span>, <span class="number">1115</span>, <span class="number">1116</span>, <span class="number">1117</span>, <span class="number">1118</span>, <span class="number">1119</span>, <span class="number">1120</span>, <span class="number">1121</span>, <span class="number">1122</span>, <span class="number">1123</span>, <span class="number">1124</span>, <span class="number">1125</span>, <span class="number">1126</span>, <span class="number">1127</span>, <span class="number">1128</span>, <span class="number">1129</span>, <span class="number">1130</span>, <span class="number">1131</span>, <span class="number">1132</span>, <span class="number">1133</span>, <span class="number">1134</span>, <span class="number">1135</span>, <span class="number">1136</span>, <span class="number">1137</span>, <span class="number">1138</span>, <span class="number">1139</span>, <span class="number">1140</span>, <span class="number">1141</span>, <span class="number">1142</span>, <span class="number">1143</span>, <span class="number">1144</span>, <span class="number">1145</span>, <span class="number">1146</span>, <span class="number">1147</span>, <span class="number">1148</span>, <span class="number">1149</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1150</span>, <span class="number">1151</span>, <span class="number">1152</span>, <span class="number">1153</span>, <span class="number">1154</span>, <span class="number">1155</span>, <span class="number">1156</span>, <span class="number">1157</span>, <span class="number">1158</span>, <span class="number">1159</span>, <span class="number">1160</span>, <span class="number">1161</span>, <span class="number">1162</span>, <span class="number">1163</span>, <span class="number">1164</span>, <span class="number">1165</span>, <span class="number">1166</span>, <span class="number">1167</span>, <span class="number">1168</span>, <span class="number">1169</span>, <span class="number">1170</span>, <span class="number">1171</span>, <span class="number">1172</span>, <span class="number">1173</span>, <span class="number">1174</span>, <span class="number">1175</span>, <span class="number">1176</span>, <span class="number">1177</span>, <span class="number">1178</span>, <span class="number">1179</span>, <span class="number">1180</span>, <span class="number">1181</span>, <span class="number">1182</span>, <span class="number">1183</span>, <span class="number">1184</span>, <span class="number">1185</span>, <span class="number">1186</span>, <span class="number">1187</span>, <span class="number">1188</span>, <span class="number">1189</span>, <span class="number">1190</span>, <span class="number">1191</span>, <span class="number">1192</span>, <span class="number">1193</span>, <span class="number">1194</span>, <span class="number">1195</span>, <span class="number">1196</span>, <span class="number">1197</span>, <span class="number">1198</span>, <span class="number">1199</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1200</span>, <span class="number">1201</span>, <span class="number">1202</span>, <span class="number">1203</span>, <span class="number">1204</span>, <span class="number">1205</span>, <span class="number">1206</span>, <span class="number">1207</span>, <span class="number">1208</span>, <span class="number">1209</span>, <span class="number">1210</span>, <span class="number">1211</span>, <span class="number">1212</span>, <span class="number">1213</span>, <span class="number">1214</span>, <span class="number">1215</span>, <span class="number">1216</span>, <span class="number">1217</span>, <span class="number">1218</span>, <span class="number">1219</span>, <span class="number">1220</span>, <span class="number">1221</span>, <span class="number">1222</span>, <span class="number">1223</span>, <span class="number">1224</span>, <span class="number">1225</span>, <span class="number">1226</span>, <span class="number">1227</span>, <span class="number">1228</span>, <span class="number">1229</span>, <span class="number">1230</span>, <span class="number">1231</span>, <span class="number">1232</span>, <span class="number">1233</span>, <span class="number">1234</span>, <span class="number">1235</span>, <span class="number">1236</span>, <span class="number">1237</span>, <span class="number">1238</span>, <span class="number">1239</span>, <span class="number">1240</span>, <span class="number">1241</span>, <span class="number">1242</span>, <span class="number">1243</span>, <span class="number">1244</span>, <span class="number">1245</span>, <span class="number">1246</span>, <span class="number">1247</span>, <span class="number">1248</span>, <span class="number">1249</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1250</span>, <span class="number">1251</span>, <span class="number">1252</span>, <span class="number">1253</span>, <span class="number">1254</span>, <span class="number">1255</span>, <span class="number">1256</span>, <span class="number">1257</span>, <span class="number">1258</span>, <span class="number">1259</span>, <span class="number">1260</span>, <span class="number">1261</span>, <span class="number">1262</span>, <span class="number">1263</span>, <span class="number">1264</span>, <span class="number">1265</span>, <span class="number">1266</span>, <span class="number">1267</span>, <span class="number">1268</span>, <span class="number">1269</span>, <span class="number">1270</span>, <span class="number">1271</span>, <span class="number">1272</span>, <span class="number">1273</span>, <span class="number">1274</span>, <span class="number">1275</span>, <span class="number">1276</span>, <span class="number">1277</span>, <span class="number">1278</span>, <span class="number">1279</span>, <span class="number">1280</span>, <span class="number">1281</span>, <span class="number">1282</span>, <span class="number">1283</span>, <span class="number">1284</span>, <span class="number">1285</span>, <span class="number">1286</span>, <span class="number">1287</span>, <span class="number">1288</span>, <span class="number">1289</span>, <span class="number">1290</span>, <span class="number">1291</span>, <span class="number">1292</span>, <span class="number">1293</span>, <span class="number">1294</span>, <span class="number">1295</span>, <span class="number">1296</span>, <span class="number">1297</span>, <span class="number">1298</span>, <span class="number">1299</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1300</span>, <span class="number">1301</span>, <span class="number">1302</span>, <span class="number">1303</span>, <span class="number">1304</span>, <span class="number">1305</span>, <span class="number">1306</span>, <span class="number">1307</span>, <span class="number">1308</span>, <span class="number">1309</span>, <span class="number">1310</span>, <span class="number">1311</span>, <span class="number">1312</span>, <span class="number">1313</span>, <span class="number">1314</span>, <span class="number">1315</span>, <span class="number">1316</span>, <span class="number">1317</span>, <span class="number">1318</span>, <span class="number">1319</span>, <span class="number">1320</span>, <span class="number">1321</span>, <span class="number">1322</span>, <span class="number">1323</span>, <span class="number">1324</span>, <span class="number">1325</span>, <span class="number">1326</span>, <span class="number">1327</span>, <span class="number">1328</span>, <span class="number">1329</span>, <span class="number">1330</span>, <span class="number">1331</span>, <span class="number">1332</span>, <span class="number">1333</span>, <span class="number">1334</span>, <span class="number">1335</span>, <span class="number">1336</span>, <span class="number">1337</span>, <span class="number">1338</span>, <span class="number">1339</span>, <span class="number">1340</span>, <span class="number">1341</span>, <span class="number">1342</span>, <span class="number">1343</span>, <span class="number">1344</span>, <span class="number">1345</span>, <span class="number">1346</span>, <span class="number">1347</span>, <span class="number">1348</span>, <span class="number">1349</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1350</span>, <span class="number">1351</span>, <span class="number">1352</span>, <span class="number">1353</span>, <span class="number">1354</span>, <span class="number">1355</span>, <span class="number">1356</span>, <span class="number">1357</span>, <span class="number">1358</span>, <span class="number">1359</span>, <span class="number">1360</span>, <span class="number">1361</span>, <span class="number">1362</span>, <span class="number">1363</span>, <span class="number">1364</span>, <span class="number">1365</span>, <span class="number">1366</span>, <span class="number">1367</span>, <span class="number">1368</span>, <span class="number">1369</span>, <span class="number">1370</span>, <span class="number">1371</span>, <span class="number">1372</span>, <span class="number">1373</span>, <span class="number">1374</span>, <span class="number">1375</span>, <span class="number">1376</span>, <span class="number">1377</span>, <span class="number">1378</span>, <span class="number">1379</span>, <span class="number">1380</span>, <span class="number">1381</span>, <span class="number">1382</span>, <span class="number">1383</span>, <span class="number">1384</span>, <span class="number">1385</span>, <span class="number">1386</span>, <span class="number">1387</span>, <span class="number">1388</span>, <span class="number">1389</span>, <span class="number">1390</span>, <span class="number">1391</span>, <span class="number">1392</span>, <span class="number">1393</span>, <span class="number">1394</span>, <span class="number">1395</span>, <span class="number">1396</span>, <span class="number">1397</span>, <span class="number">1398</span>, <span class="number">1399</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1400</span>, <span class="number">1401</span>, <span class="number">1402</span>, <span class="number">1403</span>, <span class="number">1404</span>, <span class="number">1405</span>, <span class="number">1406</span>, <span class="number">1407</span>, <span class="number">1408</span>, <span class="number">1409</span>, <span class="number">1410</span>, <span class="number">1411</span>, <span class="number">1412</span>, <span class="number">1413</span>, <span class="number">1414</span>, <span class="number">1415</span>, <span class="number">1416</span>, <span class="number">1417</span>, <span class="number">1418</span>, <span class="number">1419</span>, <span class="number">1420</span>, <span class="number">1421</span>, <span class="number">1422</span>, <span class="number">1423</span>, <span class="number">1424</span>, <span class="number">1425</span>, <span class="number">1426</span>, <span class="number">1427</span>, <span class="number">1428</span>, <span class="number">1429</span>, <span class="number">1430</span>, <span class="number">1431</span>, <span class="number">1432</span>, <span class="number">1433</span>, <span class="number">1434</span>, <span class="number">1435</span>, <span class="number">1436</span>, <span class="number">1437</span>, <span class="number">1438</span>, <span class="number">1439</span>, <span class="number">1440</span>, <span class="number">1441</span>, <span class="number">1442</span>, <span class="number">1443</span>, <span class="number">1444</span>, <span class="number">1445</span>, <span class="number">1446</span>, <span class="number">1447</span>, <span class="number">1448</span>, <span class="number">1449</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1450</span>, <span class="number">1451</span>, <span class="number">1452</span>, <span class="number">1453</span>, <span class="number">1454</span>, <span class="number">1455</span>, <span class="number">1456</span>, <span class="number">1457</span>, <span class="number">1458</span>, <span class="number">1459</span>, <span class="number">1460</span>, <span class="number">1461</span>, <span class="number">1462</span>, <span class="number">1463</span>, <span class="number">1464</span>, <span class="number">1465</span>, <span class="number">1466</span>, <span class="number">1467</span>, <span class="number">1468</span>, <span class="number">1469</span>, <span class="number">1470</span>, <span class="number">1471</span>, <span class="number">1472</span>, <span class="number">1473</span>, <span class="number">1474</span>, <span class="number">1475</span>, <span class="number">1476</span>, <span class="number">1477</span>, <span class="number">1478</span>, <span class="number">1479</span>, <span class="number">1480</span>, <span class="number">1481</span>, <span class="number">1482</span>, <span class="number">1483</span>, <span class="number">1484</span>, <span class="number">1485</span>, <span class="number">1486</span>, <span class="number">1487</span>, <span class="number">1488</span>, <span class="number">1489</span>, <span class="number">1490</span>, <span class="number">1491</span>, <span class="number">1492</span>, <span class="number">1493</span>, <span class="number">1494</span>, <span class="number">1495</span>, <span class="number">1496</span>, <span class="number">1497</span>, <span class="number">1498</span>, <span class="number">1499</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1501</span>, <span class="number">1502</span>, <span class="number">1503</span>, <span class="number">1504</span>, <span class="number">1505</span>, <span class="number">1506</span>, <span class="number">1507</span>, <span class="number">1508</span>, <span class="number">1509</span>, <span class="number">1510</span>, <span class="number">1511</span>, <span class="number">1512</span>, <span class="number">1513</span>, <span class="number">1514</span>, <span class="number">1515</span>, <span class="number">1516</span>, <span class="number">1517</span>, <span class="number">1518</span>, <span class="number">1519</span>, <span class="number">1520</span>, <span class="number">1521</span>, <span class="number">1522</span>, <span class="number">1523</span>, <span class="number">1524</span>, <span class="number">1525</span>, <span class="number">1526</span>, <span class="number">1527</span>, <span class="number">1528</span>, <span class="number">1529</span>, <span class="number">1530</span>, <span class="number">1531</span>, <span class="number">1532</span>, <span class="number">1533</span>, <span class="number">1534</span>, <span class="number">1535</span>, <span class="number">1536</span>, <span class="number">1537</span>, <span class="number">1538</span>, <span class="number">1539</span>, <span class="number">1540</span>, <span class="number">1541</span>, <span class="number">1542</span>, <span class="number">1543</span>, <span class="number">1544</span>, <span class="number">1545</span>, <span class="number">1546</span>, <span class="number">1547</span>, <span class="number">1548</span>, <span class="number">1549</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1550</span>, <span class="number">1551</span>, <span class="number">1552</span>, <span class="number">1553</span>, <span class="number">1554</span>, <span class="number">1555</span>, <span class="number">1556</span>, <span class="number">1557</span>, <span class="number">1558</span>, <span class="number">1559</span>, <span class="number">1560</span>, <span class="number">1561</span>, <span class="number">1562</span>, <span class="number">1563</span>, <span class="number">1564</span>, <span class="number">1565</span>, <span class="number">1566</span>, <span class="number">1567</span>, <span class="number">1568</span>, <span class="number">1569</span>, <span class="number">1570</span>, <span class="number">1571</span>, <span class="number">1572</span>, <span class="number">1573</span>, <span class="number">1574</span>, <span class="number">1575</span>, <span class="number">1576</span>, <span class="number">1577</span>, <span class="number">1578</span>, <span class="number">1579</span>, <span class="number">1580</span>, <span class="number">1581</span>, <span class="number">1582</span>, <span class="number">1583</span>, <span class="number">1584</span>, <span class="number">1585</span>, <span class="number">1586</span>, <span class="number">1587</span>, <span class="number">1588</span>, <span class="number">1589</span>, <span class="number">1590</span>, <span class="number">1591</span>, <span class="number">1592</span>, <span class="number">1593</span>, <span class="number">1594</span>, <span class="number">1595</span>, <span class="number">1596</span>, <span class="number">1597</span>, <span class="number">1598</span>, <span class="number">1599</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1600</span>, <span class="number">1601</span>, <span class="number">1602</span>, <span class="number">1603</span>, <span class="number">1604</span>, <span class="number">1605</span>, <span class="number">1606</span>, <span class="number">1607</span>, <span class="number">1608</span>, <span class="number">1609</span>, <span class="number">1610</span>, <span class="number">1611</span>, <span class="number">1612</span>, <span class="number">1613</span>, <span class="number">1614</span>, <span class="number">1615</span>, <span class="number">1616</span>, <span class="number">1617</span>, <span class="number">1618</span>, <span class="number">1619</span>, <span class="number">1620</span>, <span class="number">1621</span>, <span class="number">1622</span>, <span class="number">1623</span>, <span class="number">1624</span>, <span class="number">1625</span>, <span class="number">1626</span>, <span class="number">1627</span>, <span class="number">1628</span>, <span class="number">1629</span>, <span class="number">1630</span>, <span class="number">1631</span>, <span class="number">1632</span>, <span class="number">1633</span>, <span class="number">1634</span>, <span class="number">1635</span>, <span class="number">1636</span>, <span class="number">1637</span>, <span class="number">1638</span>, <span class="number">1639</span>, <span class="number">1640</span>, <span class="number">1641</span>, <span class="number">1642</span>, <span class="number">1643</span>, <span class="number">1644</span>, <span class="number">1645</span>, <span class="number">1646</span>, <span class="number">1647</span>, <span class="number">1648</span>, <span class="number">1649</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1650</span>, <span class="number">1651</span>, <span class="number">1652</span>, <span class="number">1653</span>, <span class="number">1654</span>, <span class="number">1655</span>, <span class="number">1656</span>, <span class="number">1657</span>, <span class="number">1658</span>, <span class="number">1659</span>, <span class="number">1660</span>, <span class="number">1661</span>, <span class="number">1662</span>, <span class="number">1663</span>, <span class="number">1664</span>, <span class="number">1665</span>, <span class="number">1666</span>, <span class="number">1667</span>, <span class="number">1668</span>, <span class="number">1669</span>, <span class="number">1670</span>, <span class="number">1671</span>, <span class="number">1672</span>, <span class="number">1673</span>, <span class="number">1674</span>, <span class="number">1675</span>, <span class="number">1676</span>, <span class="number">1677</span>, <span class="number">1678</span>, <span class="number">1679</span>, <span class="number">1680</span>, <span class="number">1681</span>, <span class="number">1682</span>, <span class="number">1683</span>, <span class="number">1684</span>, <span class="number">1685</span>, <span class="number">1686</span>, <span class="number">1687</span>, <span class="number">1688</span>, <span class="number">1689</span>, <span class="number">1690</span>, <span class="number">1691</span>, <span class="number">1692</span>, <span class="number">1693</span>, <span class="number">1694</span>, <span class="number">1695</span>, <span class="number">1696</span>, <span class="number">1697</span>, <span class="number">1698</span>, <span class="number">1699</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1700</span>, <span class="number">1701</span>, <span class="number">1702</span>, <span class="number">1703</span>, <span class="number">1704</span>, <span class="number">1705</span>, <span class="number">1706</span>, <span class="number">1707</span>, <span class="number">1708</span>, <span class="number">1709</span>, <span class="number">1710</span>, <span class="number">1711</span>, <span class="number">1712</span>, <span class="number">1713</span>, <span class="number">1714</span>, <span class="number">1715</span>, <span class="number">1716</span>, <span class="number">1717</span>, <span class="number">1718</span>, <span class="number">1719</span>, <span class="number">1720</span>, <span class="number">1721</span>, <span class="number">1722</span>, <span class="number">1723</span>, <span class="number">1724</span>, <span class="number">1725</span>, <span class="number">1726</span>, <span class="number">1727</span>, <span class="number">1728</span>, <span class="number">1729</span>, <span class="number">1730</span>, <span class="number">1731</span>, <span class="number">1732</span>, <span class="number">1733</span>, <span class="number">1734</span>, <span class="number">1735</span>, <span class="number">1736</span>, <span class="number">1737</span>, <span class="number">1738</span>, <span class="number">1739</span>, <span class="number">1740</span>, <span class="number">1741</span>, <span class="number">1742</span>, <span class="number">1743</span>, <span class="number">1744</span>, <span class="number">1745</span>, <span class="number">1746</span>, <span class="number">1747</span>, <span class="number">1748</span>, <span class="number">1749</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>, <span class="number">1750</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> t5[<span class="number">3510</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">102</span>, <span class="number">104</span>, <span class="number">106</span>, <span class="number">108</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">116</span>, <span class="number">118</span>, <span class="number">120</span>, <span class="number">122</span>, <span class="number">124</span>, <span class="number">126</span>, <span class="number">128</span>, <span class="number">130</span>, <span class="number">132</span>, <span class="number">134</span>, <span class="number">136</span>, <span class="number">138</span>, <span class="number">140</span>, <span class="number">142</span>, <span class="number">144</span>, <span class="number">146</span>, <span class="number">148</span>, <span class="number">150</span>, <span class="number">152</span>, <span class="number">154</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">160</span>, <span class="number">162</span>, <span class="number">164</span>, <span class="number">166</span>, <span class="number">168</span>, <span class="number">170</span>, <span class="number">172</span>, <span class="number">174</span>, <span class="number">176</span>, <span class="number">178</span>, <span class="number">180</span>, <span class="number">182</span>, <span class="number">184</span>, <span class="number">186</span>, <span class="number">188</span>, <span class="number">190</span>, <span class="number">192</span>, <span class="number">194</span>, <span class="number">196</span>, <span class="number">198</span>, <span class="number">200</span>, <span class="number">202</span>, <span class="number">204</span>, <span class="number">206</span>, <span class="number">208</span>, <span class="number">210</span>, <span class="number">212</span>, <span class="number">214</span>, <span class="number">216</span>, <span class="number">218</span>, <span class="number">220</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">226</span>, <span class="number">228</span>, <span class="number">230</span>, <span class="number">232</span>, <span class="number">234</span>, <span class="number">236</span>, <span class="number">238</span>, <span class="number">240</span>, <span class="number">242</span>, <span class="number">244</span>, <span class="number">246</span>, <span class="number">248</span>, <span class="number">250</span>, <span class="number">252</span>, <span class="number">254</span>, <span class="number">256</span>, <span class="number">258</span>, <span class="number">260</span>, <span class="number">262</span>, <span class="number">264</span>, <span class="number">266</span>, <span class="number">268</span>, <span class="number">270</span>, <span class="number">272</span>, <span class="number">274</span>, <span class="number">276</span>, <span class="number">278</span>, <span class="number">280</span>, <span class="number">282</span>, <span class="number">284</span>, <span class="number">286</span>, <span class="number">288</span>, <span class="number">290</span>, <span class="number">292</span>, <span class="number">294</span>, <span class="number">296</span>, <span class="number">298</span>, <span class="number">300</span>, <span class="number">303</span>, <span class="number">306</span>, <span class="number">309</span>, <span class="number">312</span>, <span class="number">315</span>, <span class="number">318</span>, <span class="number">321</span>, <span class="number">324</span>, <span class="number">327</span>, <span class="number">330</span>, <span class="number">333</span>, <span class="number">336</span>, <span class="number">339</span>, <span class="number">342</span>, <span class="number">345</span>, <span class="number">348</span>, <span class="number">351</span>, <span class="number">354</span>, <span class="number">357</span>, <span class="number">360</span>, <span class="number">363</span>, <span class="number">366</span>, <span class="number">369</span>, <span class="number">372</span>, <span class="number">375</span>, <span class="number">378</span>, <span class="number">381</span>, <span class="number">384</span>, <span class="number">387</span>, <span class="number">390</span>, <span class="number">393</span>, <span class="number">396</span>, <span class="number">399</span>, <span class="number">402</span>, <span class="number">405</span>, <span class="number">408</span>, <span class="number">411</span>, <span class="number">414</span>, <span class="number">417</span>, <span class="number">420</span>, <span class="number">423</span>, <span class="number">426</span>, <span class="number">429</span>, <span class="number">432</span>, <span class="number">435</span>, <span class="number">438</span>, <span class="number">441</span>, <span class="number">444</span>, <span class="number">447</span>, <span class="number">450</span>, <span class="number">453</span>, <span class="number">456</span>, <span class="number">459</span>, <span class="number">462</span>, <span class="number">465</span>, <span class="number">468</span>, <span class="number">471</span>, <span class="number">474</span>, <span class="number">477</span>, <span class="number">480</span>, <span class="number">483</span>, <span class="number">486</span>, <span class="number">489</span>, <span class="number">492</span>, <span class="number">495</span>, <span class="number">498</span>, <span class="number">501</span>, <span class="number">504</span>, <span class="number">507</span>, <span class="number">510</span>, <span class="number">513</span>, <span class="number">516</span>, <span class="number">519</span>, <span class="number">522</span>, <span class="number">525</span>, <span class="number">528</span>, <span class="number">531</span>, <span class="number">534</span>, <span class="number">537</span>, <span class="number">540</span>, <span class="number">543</span>, <span class="number">546</span>, <span class="number">549</span>, <span class="number">552</span>, <span class="number">555</span>, <span class="number">558</span>, <span class="number">561</span>, <span class="number">564</span>, <span class="number">567</span>, <span class="number">570</span>, <span class="number">573</span>, <span class="number">576</span>, <span class="number">579</span>, <span class="number">582</span>, <span class="number">585</span>, <span class="number">588</span>, <span class="number">591</span>, <span class="number">594</span>, <span class="number">597</span>, <span class="number">600</span>, <span class="number">604</span>, <span class="number">608</span>, <span class="number">612</span>, <span class="number">616</span>, <span class="number">620</span>, <span class="number">624</span>, <span class="number">628</span>, <span class="number">632</span>, <span class="number">636</span>, <span class="number">640</span>, <span class="number">641</span>, <span class="number">642</span>, <span class="number">643</span>, <span class="number">644</span>, <span class="number">645</span>, <span class="number">646</span>, <span class="number">647</span>, <span class="number">648</span>, <span class="number">649</span>, <span class="number">650</span>, <span class="number">651</span>, <span class="number">652</span>, <span class="number">653</span>, <span class="number">654</span>, <span class="number">655</span>, <span class="number">656</span>, <span class="number">657</span>, <span class="number">658</span>, <span class="number">659</span>, <span class="number">660</span>, <span class="number">661</span>, <span class="number">662</span>, <span class="number">663</span>, <span class="number">664</span>, <span class="number">665</span>, <span class="number">666</span>, <span class="number">667</span>, <span class="number">668</span>, <span class="number">669</span>, <span class="number">670</span>, <span class="number">671</span>, <span class="number">672</span>, <span class="number">673</span>, <span class="number">674</span>, <span class="number">675</span>, <span class="number">676</span>, <span class="number">677</span>, <span class="number">678</span>, <span class="number">679</span>, <span class="number">680</span>, <span class="number">681</span>, <span class="number">682</span>, <span class="number">683</span>, <span class="number">684</span>, <span class="number">685</span>, <span class="number">686</span>, <span class="number">687</span>, <span class="number">688</span>, <span class="number">689</span>, <span class="number">690</span>, <span class="number">691</span>, <span class="number">692</span>, <span class="number">693</span>, <span class="number">694</span>, <span class="number">695</span>, <span class="number">696</span>, <span class="number">697</span>, <span class="number">698</span>, <span class="number">699</span>, <span class="number">700</span>, <span class="number">701</span>, <span class="number">702</span>, <span class="number">703</span>, <span class="number">704</span>, <span class="number">705</span>, <span class="number">706</span>, <span class="number">707</span>, <span class="number">708</span>, <span class="number">709</span>, <span class="number">710</span>, <span class="number">711</span>, <span class="number">712</span>, <span class="number">713</span>, <span class="number">714</span>, <span class="number">715</span>, <span class="number">716</span>, <span class="number">717</span>, <span class="number">718</span>, <span class="number">719</span>, <span class="number">720</span>, <span class="number">721</span>, <span class="number">722</span>, <span class="number">723</span>, <span class="number">724</span>, <span class="number">725</span>, <span class="number">726</span>, <span class="number">727</span>, <span class="number">728</span>, <span class="number">729</span>, <span class="number">730</span>, <span class="number">732</span>, <span class="number">734</span>, <span class="number">736</span>, <span class="number">738</span>, <span class="number">740</span>, <span class="number">742</span>, <span class="number">744</span>, <span class="number">746</span>, <span class="number">748</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">751</span>, <span class="number">752</span>, <span class="number">753</span>, <span class="number">754</span>, <span class="number">755</span>, <span class="number">756</span>, <span class="number">757</span>, <span class="number">758</span>, <span class="number">759</span>, <span class="number">760</span>, <span class="number">761</span>, <span class="number">762</span>, <span class="number">763</span>, <span class="number">764</span>, <span class="number">765</span>, <span class="number">766</span>, <span class="number">767</span>, <span class="number">768</span>, <span class="number">769</span>, <span class="number">770</span>, <span class="number">771</span>, <span class="number">772</span>, <span class="number">773</span>, <span class="number">774</span>, <span class="number">775</span>, <span class="number">776</span>, <span class="number">777</span>, <span class="number">778</span>, <span class="number">779</span>, <span class="number">780</span>, <span class="number">781</span>, <span class="number">782</span>, <span class="number">783</span>, <span class="number">784</span>, <span class="number">785</span>, <span class="number">786</span>, <span class="number">787</span>, <span class="number">788</span>, <span class="number">789</span>, <span class="number">790</span>, <span class="number">791</span>, <span class="number">792</span>, <span class="number">793</span>, <span class="number">794</span>, <span class="number">795</span>, <span class="number">796</span>, <span class="number">797</span>, <span class="number">798</span>, <span class="number">799</span>, <span class="number">800</span>, <span class="number">801</span>, <span class="number">802</span>, <span class="number">803</span>, <span class="number">804</span>, <span class="number">805</span>, <span class="number">806</span>, <span class="number">807</span>, <span class="number">808</span>, <span class="number">809</span>, <span class="number">810</span>, <span class="number">811</span>, <span class="number">812</span>, <span class="number">813</span>, <span class="number">814</span>, <span class="number">815</span>, <span class="number">816</span>, <span class="number">817</span>, <span class="number">818</span>, <span class="number">819</span>, <span class="number">820</span>, <span class="number">821</span>, <span class="number">822</span>, <span class="number">823</span>, <span class="number">824</span>, <span class="number">825</span>, <span class="number">826</span>, <span class="number">827</span>, <span class="number">828</span>, <span class="number">829</span>, <span class="number">830</span>, <span class="number">831</span>, <span class="number">832</span>, <span class="number">833</span>, <span class="number">834</span>, <span class="number">835</span>, <span class="number">836</span>, <span class="number">837</span>, <span class="number">838</span>, <span class="number">839</span>, <span class="number">840</span>, <span class="number">841</span>, <span class="number">842</span>, <span class="number">843</span>, <span class="number">844</span>, <span class="number">845</span>, <span class="number">846</span>, <span class="number">847</span>, <span class="number">848</span>, <span class="number">849</span>, <span class="number">850</span>, <span class="number">852</span>, <span class="number">854</span>, <span class="number">856</span>, <span class="number">858</span>, <span class="number">860</span>, <span class="number">862</span>, <span class="number">864</span>, <span class="number">866</span>, <span class="number">868</span>, <span class="number">870</span>, <span class="number">872</span>, <span class="number">874</span>, <span class="number">876</span>, <span class="number">878</span>, <span class="number">880</span>, <span class="number">882</span>, <span class="number">884</span>, <span class="number">886</span>, <span class="number">888</span>, <span class="number">890</span>, <span class="number">892</span>, <span class="number">894</span>, <span class="number">896</span>, <span class="number">898</span>, <span class="number">900</span>, <span class="number">902</span>, <span class="number">904</span>, <span class="number">906</span>, <span class="number">908</span>, <span class="number">910</span>, <span class="number">912</span>, <span class="number">914</span>, <span class="number">916</span>, <span class="number">918</span>, <span class="number">920</span>, <span class="number">922</span>, <span class="number">924</span>, <span class="number">926</span>, <span class="number">928</span>, <span class="number">930</span>, <span class="number">932</span>, <span class="number">934</span>, <span class="number">936</span>, <span class="number">938</span>, <span class="number">940</span>, <span class="number">942</span>, <span class="number">944</span>, <span class="number">946</span>, <span class="number">948</span>, <span class="number">950</span>, <span class="number">952</span>, <span class="number">954</span>, <span class="number">956</span>, <span class="number">958</span>, <span class="number">960</span>, <span class="number">962</span>, <span class="number">964</span>, <span class="number">966</span>, <span class="number">968</span>, <span class="number">970</span>, <span class="number">972</span>, <span class="number">974</span>, <span class="number">976</span>, <span class="number">978</span>, <span class="number">980</span>, <span class="number">982</span>, <span class="number">984</span>, <span class="number">986</span>, <span class="number">988</span>, <span class="number">990</span>, <span class="number">992</span>, <span class="number">994</span>, <span class="number">996</span>, <span class="number">998</span>, <span class="number">1000</span>, <span class="number">1002</span>, <span class="number">1004</span>, <span class="number">1006</span>, <span class="number">1008</span>, <span class="number">1010</span>, <span class="number">1012</span>, <span class="number">1014</span>, <span class="number">1016</span>, <span class="number">1018</span>, <span class="number">1020</span>, <span class="number">1022</span>, <span class="number">1024</span>, <span class="number">1026</span>, <span class="number">1028</span>, <span class="number">1030</span>, <span class="number">1032</span>, <span class="number">1034</span>, <span class="number">1036</span>, <span class="number">1038</span>, <span class="number">1040</span>, <span class="number">1042</span>, <span class="number">1044</span>, <span class="number">1046</span>, <span class="number">1048</span>, <span class="number">1050</span>, <span class="number">1053</span>, <span class="number">1056</span>, <span class="number">1059</span>, <span class="number">1062</span>, <span class="number">1065</span>, <span class="number">1068</span>, <span class="number">1071</span>, <span class="number">1074</span>, <span class="number">1077</span>, <span class="number">1080</span>, <span class="number">1083</span>, <span class="number">1086</span>, <span class="number">1089</span>, <span class="number">1092</span>, <span class="number">1095</span>, <span class="number">1098</span>, <span class="number">1101</span>, <span class="number">1104</span>, <span class="number">1107</span>, <span class="number">1110</span>, <span class="number">1113</span>, <span class="number">1116</span>, <span class="number">1119</span>, <span class="number">1122</span>, <span class="number">1125</span>, <span class="number">1128</span>, <span class="number">1131</span>, <span class="number">1134</span>, <span class="number">1137</span>, <span class="number">1140</span>, <span class="number">1143</span>, <span class="number">1146</span>, <span class="number">1149</span>, <span class="number">1152</span>, <span class="number">1155</span>, <span class="number">1158</span>, <span class="number">1161</span>, <span class="number">1164</span>, <span class="number">1167</span>, <span class="number">1170</span>, <span class="number">1173</span>, <span class="number">1176</span>, <span class="number">1179</span>, <span class="number">1182</span>, <span class="number">1185</span>, <span class="number">1188</span>, <span class="number">1191</span>, <span class="number">1194</span>, <span class="number">1197</span>, <span class="number">1200</span>, <span class="number">1203</span>, <span class="number">1206</span>, <span class="number">1209</span>, <span class="number">1212</span>, <span class="number">1215</span>, <span class="number">1218</span>, <span class="number">1221</span>, <span class="number">1224</span>, <span class="number">1227</span>, <span class="number">1230</span>, <span class="number">1233</span>, <span class="number">1236</span>, <span class="number">1239</span>, <span class="number">1242</span>, <span class="number">1245</span>, <span class="number">1248</span>, <span class="number">1251</span>, <span class="number">1254</span>, <span class="number">1257</span>, <span class="number">1260</span>, <span class="number">1263</span>, <span class="number">1266</span>, <span class="number">1269</span>, <span class="number">1272</span>, <span class="number">1275</span>, <span class="number">1278</span>, <span class="number">1281</span>, <span class="number">1284</span>, <span class="number">1287</span>, <span class="number">1290</span>, <span class="number">1293</span>, <span class="number">1296</span>, <span class="number">1299</span>, <span class="number">1302</span>, <span class="number">1305</span>, <span class="number">1308</span>, <span class="number">1311</span>, <span class="number">1314</span>, <span class="number">1317</span>, <span class="number">1320</span>, <span class="number">1323</span>, <span class="number">1326</span>, <span class="number">1329</span>, <span class="number">1332</span>, <span class="number">1335</span>, <span class="number">1338</span>, <span class="number">1341</span>, <span class="number">1344</span>, <span class="number">1347</span>, <span class="number">1350</span>, <span class="number">1354</span>, <span class="number">1358</span>, <span class="number">1362</span>, <span class="number">1366</span>, <span class="number">1370</span>, <span class="number">1374</span>, <span class="number">1378</span>, <span class="number">1382</span>, <span class="number">1386</span>, <span class="number">1390</span>, <span class="number">1391</span>, <span class="number">1392</span>, <span class="number">1393</span>, <span class="number">1394</span>, <span class="number">1395</span>, <span class="number">1396</span>, <span class="number">1397</span>, <span class="number">1398</span>, <span class="number">1399</span>, <span class="number">1400</span>, <span class="number">1401</span>, <span class="number">1402</span>, <span class="number">1403</span>, <span class="number">1404</span>, <span class="number">1405</span>, <span class="number">1406</span>, <span class="number">1407</span>, <span class="number">1408</span>, <span class="number">1409</span>, <span class="number">1410</span>, <span class="number">1411</span>, <span class="number">1412</span>, <span class="number">1413</span>, <span class="number">1414</span>, <span class="number">1415</span>, <span class="number">1416</span>, <span class="number">1417</span>, <span class="number">1418</span>, <span class="number">1419</span>, <span class="number">1420</span>, <span class="number">1421</span>, <span class="number">1422</span>, <span class="number">1423</span>, <span class="number">1424</span>, <span class="number">1425</span>, <span class="number">1426</span>, <span class="number">1427</span>, <span class="number">1428</span>, <span class="number">1429</span>, <span class="number">1430</span>, <span class="number">1431</span>, <span class="number">1432</span>, <span class="number">1433</span>, <span class="number">1434</span>, <span class="number">1435</span>, <span class="number">1436</span>, <span class="number">1437</span>, <span class="number">1438</span>, <span class="number">1439</span>, <span class="number">1440</span>, <span class="number">1441</span>, <span class="number">1442</span>, <span class="number">1443</span>, <span class="number">1444</span>, <span class="number">1445</span>, <span class="number">1446</span>, <span class="number">1447</span>, <span class="number">1448</span>, <span class="number">1449</span>, <span class="number">1450</span>, <span class="number">1451</span>, <span class="number">1452</span>, <span class="number">1453</span>, <span class="number">1454</span>, <span class="number">1455</span>, <span class="number">1456</span>, <span class="number">1457</span>, <span class="number">1458</span>, <span class="number">1459</span>, <span class="number">1460</span>, <span class="number">1461</span>, <span class="number">1462</span>, <span class="number">1463</span>, <span class="number">1464</span>, <span class="number">1465</span>, <span class="number">1466</span>, <span class="number">1467</span>, <span class="number">1468</span>, <span class="number">1469</span>, <span class="number">1470</span>, <span class="number">1471</span>, <span class="number">1472</span>, <span class="number">1473</span>, <span class="number">1474</span>, <span class="number">1475</span>, <span class="number">1476</span>, <span class="number">1477</span>, <span class="number">1478</span>, <span class="number">1479</span>, <span class="number">1480</span>, <span class="number">1482</span>, <span class="number">1484</span>, <span class="number">1486</span>, <span class="number">1488</span>, <span class="number">1490</span>, <span class="number">1492</span>, <span class="number">1494</span>, <span class="number">1496</span>, <span class="number">1498</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1501</span>, <span class="number">1502</span>, <span class="number">1503</span>, <span class="number">1504</span>, <span class="number">1505</span>, <span class="number">1506</span>, <span class="number">1507</span>, <span class="number">1508</span>, <span class="number">1509</span>, <span class="number">1510</span>, <span class="number">1511</span>, <span class="number">1512</span>, <span class="number">1513</span>, <span class="number">1514</span>, <span class="number">1515</span>, <span class="number">1516</span>, <span class="number">1517</span>, <span class="number">1518</span>, <span class="number">1519</span>, <span class="number">1520</span>, <span class="number">1521</span>, <span class="number">1522</span>, <span class="number">1523</span>, <span class="number">1524</span>, <span class="number">1525</span>, <span class="number">1526</span>, <span class="number">1527</span>, <span class="number">1528</span>, <span class="number">1529</span>, <span class="number">1530</span>, <span class="number">1531</span>, <span class="number">1532</span>, <span class="number">1533</span>, <span class="number">1534</span>, <span class="number">1535</span>, <span class="number">1536</span>, <span class="number">1537</span>, <span class="number">1538</span>, <span class="number">1539</span>, <span class="number">1540</span>, <span class="number">1541</span>, <span class="number">1542</span>, <span class="number">1543</span>, <span class="number">1544</span>, <span class="number">1545</span>, <span class="number">1546</span>, <span class="number">1547</span>, <span class="number">1548</span>, <span class="number">1549</span>, <span class="number">1550</span>, <span class="number">1551</span>, <span class="number">1552</span>, <span class="number">1553</span>, <span class="number">1554</span>, <span class="number">1555</span>, <span class="number">1556</span>, <span class="number">1557</span>, <span class="number">1558</span>, <span class="number">1559</span>, <span class="number">1560</span>, <span class="number">1561</span>, <span class="number">1562</span>, <span class="number">1563</span>, <span class="number">1564</span>, <span class="number">1565</span>, <span class="number">1566</span>, <span class="number">1567</span>, <span class="number">1568</span>, <span class="number">1569</span>, <span class="number">1570</span>, <span class="number">1571</span>, <span class="number">1572</span>, <span class="number">1573</span>, <span class="number">1574</span>, <span class="number">1575</span>, <span class="number">1576</span>, <span class="number">1577</span>, <span class="number">1578</span>, <span class="number">1579</span>, <span class="number">1580</span>, <span class="number">1581</span>, <span class="number">1582</span>, <span class="number">1583</span>, <span class="number">1584</span>, <span class="number">1585</span>, <span class="number">1586</span>, <span class="number">1587</span>, <span class="number">1588</span>, <span class="number">1589</span>, <span class="number">1590</span>, <span class="number">1591</span>, <span class="number">1592</span>, <span class="number">1593</span>, <span class="number">1594</span>, <span class="number">1595</span>, <span class="number">1596</span>, <span class="number">1597</span>, <span class="number">1598</span>, <span class="number">1599</span>, <span class="number">1600</span>, <span class="number">1602</span>, <span class="number">1604</span>, <span class="number">1606</span>, <span class="number">1608</span>, <span class="number">1610</span>, <span class="number">1612</span>, <span class="number">1614</span>, <span class="number">1616</span>, <span class="number">1618</span>, <span class="number">1620</span>, <span class="number">1622</span>, <span class="number">1624</span>, <span class="number">1626</span>, <span class="number">1628</span>, <span class="number">1630</span>, <span class="number">1632</span>, <span class="number">1634</span>, <span class="number">1636</span>, <span class="number">1638</span>, <span class="number">1640</span>, <span class="number">1642</span>, <span class="number">1644</span>, <span class="number">1646</span>, <span class="number">1648</span>, <span class="number">1650</span>, <span class="number">1652</span>, <span class="number">1654</span>, <span class="number">1656</span>, <span class="number">1658</span>, <span class="number">1660</span>, <span class="number">1662</span>, <span class="number">1664</span>, <span class="number">1666</span>, <span class="number">1668</span>, <span class="number">1670</span>, <span class="number">1672</span>, <span class="number">1674</span>, <span class="number">1676</span>, <span class="number">1678</span>, <span class="number">1680</span>, <span class="number">1682</span>, <span class="number">1684</span>, <span class="number">1686</span>, <span class="number">1688</span>, <span class="number">1690</span>, <span class="number">1692</span>, <span class="number">1694</span>, <span class="number">1696</span>, <span class="number">1698</span>, <span class="number">1700</span>, <span class="number">1702</span>, <span class="number">1704</span>, <span class="number">1706</span>, <span class="number">1708</span>, <span class="number">1710</span>, <span class="number">1712</span>, <span class="number">1714</span>, <span class="number">1716</span>, <span class="number">1718</span>, <span class="number">1720</span>, <span class="number">1722</span>, <span class="number">1724</span>, <span class="number">1726</span>, <span class="number">1728</span>, <span class="number">1730</span>, <span class="number">1732</span>, <span class="number">1734</span>, <span class="number">1736</span>, <span class="number">1738</span>, <span class="number">1740</span>, <span class="number">1742</span>, <span class="number">1744</span>, <span class="number">1746</span>, <span class="number">1748</span>, <span class="number">1750</span>, <span class="number">1752</span>, <span class="number">1754</span>, <span class="number">1756</span>, <span class="number">1758</span>, <span class="number">1760</span>, <span class="number">1762</span>, <span class="number">1764</span>, <span class="number">1766</span>, <span class="number">1768</span>, <span class="number">1770</span>, <span class="number">1772</span>, <span class="number">1774</span>, <span class="number">1776</span>, <span class="number">1778</span>, <span class="number">1780</span>, <span class="number">1782</span>, <span class="number">1784</span>, <span class="number">1786</span>, <span class="number">1788</span>, <span class="number">1790</span>, <span class="number">1792</span>, <span class="number">1794</span>, <span class="number">1796</span>, <span class="number">1798</span>, <span class="number">1800</span>, <span class="number">1803</span>, <span class="number">1806</span>, <span class="number">1809</span>, <span class="number">1812</span>, <span class="number">1815</span>, <span class="number">1818</span>, <span class="number">1821</span>, <span class="number">1824</span>, <span class="number">1827</span>, <span class="number">1830</span>, <span class="number">1833</span>, <span class="number">1836</span>, <span class="number">1839</span>, <span class="number">1842</span>, <span class="number">1845</span>, <span class="number">1848</span>, <span class="number">1851</span>, <span class="number">1854</span>, <span class="number">1857</span>, <span class="number">1860</span>, <span class="number">1863</span>, <span class="number">1866</span>, <span class="number">1869</span>, <span class="number">1872</span>, <span class="number">1875</span>, <span class="number">1878</span>, <span class="number">1881</span>, <span class="number">1884</span>, <span class="number">1887</span>, <span class="number">1890</span>, <span class="number">1893</span>, <span class="number">1896</span>, <span class="number">1899</span>, <span class="number">1902</span>, <span class="number">1905</span>, <span class="number">1908</span>, <span class="number">1911</span>, <span class="number">1914</span>, <span class="number">1917</span>, <span class="number">1920</span>, <span class="number">1923</span>, <span class="number">1926</span>, <span class="number">1929</span>, <span class="number">1932</span>, <span class="number">1935</span>, <span class="number">1938</span>, <span class="number">1941</span>, <span class="number">1944</span>, <span class="number">1947</span>, <span class="number">1950</span>, <span class="number">1953</span>, <span class="number">1956</span>, <span class="number">1959</span>, <span class="number">1962</span>, <span class="number">1965</span>, <span class="number">1968</span>, <span class="number">1971</span>, <span class="number">1974</span>, <span class="number">1977</span>, <span class="number">1980</span>, <span class="number">1983</span>, <span class="number">1986</span>, <span class="number">1989</span>, <span class="number">1992</span>, <span class="number">1995</span>, <span class="number">1998</span>, <span class="number">2001</span>, <span class="number">2004</span>, <span class="number">2007</span>, <span class="number">2010</span>, <span class="number">2013</span>, <span class="number">2016</span>, <span class="number">2019</span>, <span class="number">2022</span>, <span class="number">2025</span>, <span class="number">2028</span>, <span class="number">2031</span>, <span class="number">2034</span>, <span class="number">2037</span>, <span class="number">2040</span>, <span class="number">2043</span>, <span class="number">2046</span>, <span class="number">2049</span>, <span class="number">2052</span>, <span class="number">2055</span>, <span class="number">2058</span>, <span class="number">2061</span>, <span class="number">2064</span>, <span class="number">2067</span>, <span class="number">2070</span>, <span class="number">2073</span>, <span class="number">2076</span>, <span class="number">2079</span>, <span class="number">2082</span>, <span class="number">2085</span>, <span class="number">2088</span>, <span class="number">2091</span>, <span class="number">2094</span>, <span class="number">2097</span>, <span class="number">2100</span>, <span class="number">2104</span>, <span class="number">2108</span>, <span class="number">2112</span>, <span class="number">2116</span>, <span class="number">2120</span>, <span class="number">2124</span>, <span class="number">2128</span>, <span class="number">2132</span>, <span class="number">2136</span>, <span class="number">2140</span>, <span class="number">2141</span>, <span class="number">2142</span>, <span class="number">2143</span>, <span class="number">2144</span>, <span class="number">2145</span>, <span class="number">2146</span>, <span class="number">2147</span>, <span class="number">2148</span>, <span class="number">2149</span>, <span class="number">2150</span>, <span class="number">2151</span>, <span class="number">2152</span>, <span class="number">2153</span>, <span class="number">2154</span>, <span class="number">2155</span>, <span class="number">2156</span>, <span class="number">2157</span>, <span class="number">2158</span>, <span class="number">2159</span>, <span class="number">2160</span>, <span class="number">2161</span>, <span class="number">2162</span>, <span class="number">2163</span>, <span class="number">2164</span>, <span class="number">2165</span>, <span class="number">2166</span>, <span class="number">2167</span>, <span class="number">2168</span>, <span class="number">2169</span>, <span class="number">2170</span>, <span class="number">2171</span>, <span class="number">2172</span>, <span class="number">2173</span>, <span class="number">2174</span>, <span class="number">2175</span>, <span class="number">2176</span>, <span class="number">2177</span>, <span class="number">2178</span>, <span class="number">2179</span>, <span class="number">2180</span>, <span class="number">2181</span>, <span class="number">2182</span>, <span class="number">2183</span>, <span class="number">2184</span>, <span class="number">2185</span>, <span class="number">2186</span>, <span class="number">2187</span>, <span class="number">2188</span>, <span class="number">2189</span>, <span class="number">2190</span>, <span class="number">2191</span>, <span class="number">2192</span>, <span class="number">2193</span>, <span class="number">2194</span>, <span class="number">2195</span>, <span class="number">2196</span>, <span class="number">2197</span>, <span class="number">2198</span>, <span class="number">2199</span>, <span class="number">2200</span>, <span class="number">2201</span>, <span class="number">2202</span>, <span class="number">2203</span>, <span class="number">2204</span>, <span class="number">2205</span>, <span class="number">2206</span>, <span class="number">2207</span>, <span class="number">2208</span>, <span class="number">2209</span>, <span class="number">2210</span>, <span class="number">2211</span>, <span class="number">2212</span>, <span class="number">2213</span>, <span class="number">2214</span>, <span class="number">2215</span>, <span class="number">2216</span>, <span class="number">2217</span>, <span class="number">2218</span>, <span class="number">2219</span>, <span class="number">2220</span>, <span class="number">2221</span>, <span class="number">2222</span>, <span class="number">2223</span>, <span class="number">2224</span>, <span class="number">2225</span>, <span class="number">2226</span>, <span class="number">2227</span>, <span class="number">2228</span>, <span class="number">2229</span>, <span class="number">2230</span>, <span class="number">2232</span>, <span class="number">2234</span>, <span class="number">2236</span>, <span class="number">2238</span>, <span class="number">2240</span>, <span class="number">2242</span>, <span class="number">2244</span>, <span class="number">2246</span>, <span class="number">2248</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2250</span>, <span class="number">2251</span>, <span class="number">2252</span>, <span class="number">2253</span>, <span class="number">2254</span>, <span class="number">2255</span>, <span class="number">2256</span>, <span class="number">2257</span>, <span class="number">2258</span>, <span class="number">2259</span>, <span class="number">2260</span>, <span class="number">2261</span>, <span class="number">2262</span>, <span class="number">2263</span>, <span class="number">2264</span>, <span class="number">2265</span>, <span class="number">2266</span>, <span class="number">2267</span>, <span class="number">2268</span>, <span class="number">2269</span>, <span class="number">2270</span>, <span class="number">2271</span>, <span class="number">2272</span>, <span class="number">2273</span>, <span class="number">2274</span>, <span class="number">2275</span>, <span class="number">2276</span>, <span class="number">2277</span>, <span class="number">2278</span>, <span class="number">2279</span>, <span class="number">2280</span>, <span class="number">2281</span>, <span class="number">2282</span>, <span class="number">2283</span>, <span class="number">2284</span>, <span class="number">2285</span>, <span class="number">2286</span>, <span class="number">2287</span>, <span class="number">2288</span>, <span class="number">2289</span>, <span class="number">2290</span>, <span class="number">2291</span>, <span class="number">2292</span>, <span class="number">2293</span>, <span class="number">2294</span>, <span class="number">2295</span>, <span class="number">2296</span>, <span class="number">2297</span>, <span class="number">2298</span>, <span class="number">2299</span>, <span class="number">2300</span>, <span class="number">2301</span>, <span class="number">2302</span>, <span class="number">2303</span>, <span class="number">2304</span>, <span class="number">2305</span>, <span class="number">2306</span>, <span class="number">2307</span>, <span class="number">2308</span>, <span class="number">2309</span>, <span class="number">2310</span>, <span class="number">2311</span>, <span class="number">2312</span>, <span class="number">2313</span>, <span class="number">2314</span>, <span class="number">2315</span>, <span class="number">2316</span>, <span class="number">2317</span>, <span class="number">2318</span>, <span class="number">2319</span>, <span class="number">2320</span>, <span class="number">2321</span>, <span class="number">2322</span>, <span class="number">2323</span>, <span class="number">2324</span>, <span class="number">2325</span>, <span class="number">2326</span>, <span class="number">2327</span>, <span class="number">2328</span>, <span class="number">2329</span>, <span class="number">2330</span>, <span class="number">2331</span>, <span class="number">2332</span>, <span class="number">2333</span>, <span class="number">2334</span>, <span class="number">2335</span>, <span class="number">2336</span>, <span class="number">2337</span>, <span class="number">2338</span>, <span class="number">2339</span>, <span class="number">2340</span>, <span class="number">2341</span>, <span class="number">2342</span>, <span class="number">2343</span>, <span class="number">2344</span>, <span class="number">2345</span>, <span class="number">2346</span>, <span class="number">2347</span>, <span class="number">2348</span>, <span class="number">2349</span>, <span class="number">2350</span>, <span class="number">2352</span>, <span class="number">2354</span>, <span class="number">2356</span>, <span class="number">2358</span>, <span class="number">2360</span>, <span class="number">2362</span>, <span class="number">2364</span>, <span class="number">2366</span>, <span class="number">2368</span>, <span class="number">2370</span>, <span class="number">2372</span>, <span class="number">2374</span>, <span class="number">2376</span>, <span class="number">2378</span>, <span class="number">2380</span>, <span class="number">2382</span>, <span class="number">2384</span>, <span class="number">2386</span>, <span class="number">2388</span>, <span class="number">2390</span>, <span class="number">2392</span>, <span class="number">2394</span>, <span class="number">2396</span>, <span class="number">2398</span>, <span class="number">2400</span>, <span class="number">2402</span>, <span class="number">2404</span>, <span class="number">2406</span>, <span class="number">2408</span>, <span class="number">2410</span>, <span class="number">2412</span>, <span class="number">2414</span>, <span class="number">2416</span>, <span class="number">2418</span>, <span class="number">2420</span>, <span class="number">2422</span>, <span class="number">2424</span>, <span class="number">2426</span>, <span class="number">2428</span>, <span class="number">2430</span>, <span class="number">2432</span>, <span class="number">2434</span>, <span class="number">2436</span>, <span class="number">2438</span>, <span class="number">2440</span>, <span class="number">2442</span>, <span class="number">2444</span>, <span class="number">2446</span>, <span class="number">2448</span>, <span class="number">2450</span>, <span class="number">2452</span>, <span class="number">2454</span>, <span class="number">2456</span>, <span class="number">2458</span>, <span class="number">2460</span>, <span class="number">2462</span>, <span class="number">2464</span>, <span class="number">2466</span>, <span class="number">2468</span>, <span class="number">2470</span>, <span class="number">2472</span>, <span class="number">2474</span>, <span class="number">2476</span>, <span class="number">2478</span>, <span class="number">2480</span>, <span class="number">2482</span>, <span class="number">2484</span>, <span class="number">2486</span>, <span class="number">2488</span>, <span class="number">2490</span>, <span class="number">2492</span>, <span class="number">2494</span>, <span class="number">2496</span>, <span class="number">2498</span>, <span class="number">2500</span>, <span class="number">2502</span>, <span class="number">2504</span>, <span class="number">2506</span>, <span class="number">2508</span>, <span class="number">2510</span>, <span class="number">2512</span>, <span class="number">2514</span>, <span class="number">2516</span>, <span class="number">2518</span>, <span class="number">2520</span>, <span class="number">2522</span>, <span class="number">2524</span>, <span class="number">2526</span>, <span class="number">2528</span>, <span class="number">2530</span>, <span class="number">2532</span>, <span class="number">2534</span>, <span class="number">2536</span>, <span class="number">2538</span>, <span class="number">2540</span>, <span class="number">2542</span>, <span class="number">2544</span>, <span class="number">2546</span>, <span class="number">2548</span>, <span class="number">2550</span>, <span class="number">2553</span>, <span class="number">2556</span>, <span class="number">2559</span>, <span class="number">2562</span>, <span class="number">2565</span>, <span class="number">2568</span>, <span class="number">2571</span>, <span class="number">2574</span>, <span class="number">2577</span>, <span class="number">2580</span>, <span class="number">2583</span>, <span class="number">2586</span>, <span class="number">2589</span>, <span class="number">2592</span>, <span class="number">2595</span>, <span class="number">2598</span>, <span class="number">2601</span>, <span class="number">2604</span>, <span class="number">2607</span>, <span class="number">2610</span>, <span class="number">2613</span>, <span class="number">2616</span>, <span class="number">2619</span>, <span class="number">2622</span>, <span class="number">2625</span>, <span class="number">2628</span>, <span class="number">2631</span>, <span class="number">2634</span>, <span class="number">2637</span>, <span class="number">2640</span>, <span class="number">2643</span>, <span class="number">2646</span>, <span class="number">2649</span>, <span class="number">2652</span>, <span class="number">2655</span>, <span class="number">2658</span>, <span class="number">2661</span>, <span class="number">2664</span>, <span class="number">2667</span>, <span class="number">2670</span>, <span class="number">2673</span>, <span class="number">2676</span>, <span class="number">2679</span>, <span class="number">2682</span>, <span class="number">2685</span>, <span class="number">2688</span>, <span class="number">2691</span>, <span class="number">2694</span>, <span class="number">2697</span>, <span class="number">2700</span>, <span class="number">2703</span>, <span class="number">2706</span>, <span class="number">2709</span>, <span class="number">2712</span>, <span class="number">2715</span>, <span class="number">2718</span>, <span class="number">2721</span>, <span class="number">2724</span>, <span class="number">2727</span>, <span class="number">2730</span>, <span class="number">2733</span>, <span class="number">2736</span>, <span class="number">2739</span>, <span class="number">2742</span>, <span class="number">2745</span>, <span class="number">2748</span>, <span class="number">2751</span>, <span class="number">2754</span>, <span class="number">2757</span>, <span class="number">2760</span>, <span class="number">2763</span>, <span class="number">2766</span>, <span class="number">2769</span>, <span class="number">2772</span>, <span class="number">2775</span>, <span class="number">2778</span>, <span class="number">2781</span>, <span class="number">2784</span>, <span class="number">2787</span>, <span class="number">2790</span>, <span class="number">2793</span>, <span class="number">2796</span>, <span class="number">2799</span>, <span class="number">2802</span>, <span class="number">2805</span>, <span class="number">2808</span>, <span class="number">2811</span>, <span class="number">2814</span>, <span class="number">2817</span>, <span class="number">2820</span>, <span class="number">2823</span>, <span class="number">2826</span>, <span class="number">2829</span>, <span class="number">2832</span>, <span class="number">2835</span>, <span class="number">2838</span>, <span class="number">2841</span>, <span class="number">2844</span>, <span class="number">2847</span>, <span class="number">2850</span>, <span class="number">2854</span>, <span class="number">2858</span>, <span class="number">2862</span>, <span class="number">2866</span>, <span class="number">2870</span>, <span class="number">2874</span>, <span class="number">2878</span>, <span class="number">2882</span>, <span class="number">2886</span>, <span class="number">2890</span>, <span class="number">2891</span>, <span class="number">2892</span>, <span class="number">2893</span>, <span class="number">2894</span>, <span class="number">2895</span>, <span class="number">2896</span>, <span class="number">2897</span>, <span class="number">2898</span>, <span class="number">2899</span>, <span class="number">2900</span>, <span class="number">2901</span>, <span class="number">2902</span>, <span class="number">2903</span>, <span class="number">2904</span>, <span class="number">2905</span>, <span class="number">2906</span>, <span class="number">2907</span>, <span class="number">2908</span>, <span class="number">2909</span>, <span class="number">2910</span>, <span class="number">2911</span>, <span class="number">2912</span>, <span class="number">2913</span>, <span class="number">2914</span>, <span class="number">2915</span>, <span class="number">2916</span>, <span class="number">2917</span>, <span class="number">2918</span>, <span class="number">2919</span>, <span class="number">2920</span>, <span class="number">2921</span>, <span class="number">2922</span>, <span class="number">2923</span>, <span class="number">2924</span>, <span class="number">2925</span>, <span class="number">2926</span>, <span class="number">2927</span>, <span class="number">2928</span>, <span class="number">2929</span>, <span class="number">2930</span>, <span class="number">2931</span>, <span class="number">2932</span>, <span class="number">2933</span>, <span class="number">2934</span>, <span class="number">2935</span>, <span class="number">2936</span>, <span class="number">2937</span>, <span class="number">2938</span>, <span class="number">2939</span>, <span class="number">2940</span>, <span class="number">2941</span>, <span class="number">2942</span>, <span class="number">2943</span>, <span class="number">2944</span>, <span class="number">2945</span>, <span class="number">2946</span>, <span class="number">2947</span>, <span class="number">2948</span>, <span class="number">2949</span>, <span class="number">2950</span>, <span class="number">2951</span>, <span class="number">2952</span>, <span class="number">2953</span>, <span class="number">2954</span>, <span class="number">2955</span>, <span class="number">2956</span>, <span class="number">2957</span>, <span class="number">2958</span>, <span class="number">2959</span>, <span class="number">2960</span>, <span class="number">2961</span>, <span class="number">2962</span>, <span class="number">2963</span>, <span class="number">2964</span>, <span class="number">2965</span>, <span class="number">2966</span>, <span class="number">2967</span>, <span class="number">2968</span>, <span class="number">2969</span>, <span class="number">2970</span>, <span class="number">2971</span>, <span class="number">2972</span>, <span class="number">2973</span>, <span class="number">2974</span>, <span class="number">2975</span>, <span class="number">2976</span>, <span class="number">2977</span>, <span class="number">2978</span>, <span class="number">2979</span>, <span class="number">2980</span>, <span class="number">2982</span>, <span class="number">2984</span>, <span class="number">2986</span>, <span class="number">2988</span>, <span class="number">2990</span>, <span class="number">2992</span>, <span class="number">2994</span>, <span class="number">2996</span>, <span class="number">2998</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3000</span>, <span class="number">3001</span>, <span class="number">3002</span>, <span class="number">3003</span>, <span class="number">3004</span>, <span class="number">3005</span>, <span class="number">3006</span>, <span class="number">3007</span>, <span class="number">3008</span>, <span class="number">3009</span>, <span class="number">3010</span>, <span class="number">3011</span>, <span class="number">3012</span>, <span class="number">3013</span>, <span class="number">3014</span>, <span class="number">3015</span>, <span class="number">3016</span>, <span class="number">3017</span>, <span class="number">3018</span>, <span class="number">3019</span>, <span class="number">3020</span>, <span class="number">3021</span>, <span class="number">3022</span>, <span class="number">3023</span>, <span class="number">3024</span>, <span class="number">3025</span>, <span class="number">3026</span>, <span class="number">3027</span>, <span class="number">3028</span>, <span class="number">3029</span>, <span class="number">3030</span>, <span class="number">3031</span>, <span class="number">3032</span>, <span class="number">3033</span>, <span class="number">3034</span>, <span class="number">3035</span>, <span class="number">3036</span>, <span class="number">3037</span>, <span class="number">3038</span>, <span class="number">3039</span>, <span class="number">3040</span>, <span class="number">3041</span>, <span class="number">3042</span>, <span class="number">3043</span>, <span class="number">3044</span>, <span class="number">3045</span>, <span class="number">3046</span>, <span class="number">3047</span>, <span class="number">3048</span>, <span class="number">3049</span>, <span class="number">3050</span>, <span class="number">3051</span>, <span class="number">3052</span>, <span class="number">3053</span>, <span class="number">3054</span>, <span class="number">3055</span>, <span class="number">3056</span>, <span class="number">3057</span>, <span class="number">3058</span>, <span class="number">3059</span>, <span class="number">3060</span>, <span class="number">3061</span>, <span class="number">3062</span>, <span class="number">3063</span>, <span class="number">3064</span>, <span class="number">3065</span>, <span class="number">3066</span>, <span class="number">3067</span>, <span class="number">3068</span>, <span class="number">3069</span>, <span class="number">3070</span>, <span class="number">3071</span>, <span class="number">3072</span>, <span class="number">3073</span>, <span class="number">3074</span>, <span class="number">3075</span>, <span class="number">3076</span>, <span class="number">3077</span>, <span class="number">3078</span>, <span class="number">3079</span>, <span class="number">3080</span>, <span class="number">3081</span>, <span class="number">3082</span>, <span class="number">3083</span>, <span class="number">3084</span>, <span class="number">3085</span>, <span class="number">3086</span>, <span class="number">3087</span>, <span class="number">3088</span>, <span class="number">3089</span>, <span class="number">3090</span>, <span class="number">3091</span>, <span class="number">3092</span>, <span class="number">3093</span>, <span class="number">3094</span>, <span class="number">3095</span>, <span class="number">3096</span>, <span class="number">3097</span>, <span class="number">3098</span>, <span class="number">3099</span>, <span class="number">3100</span>, <span class="number">3102</span>, <span class="number">3104</span>, <span class="number">3106</span>, <span class="number">3108</span>, <span class="number">3110</span>, <span class="number">3112</span>, <span class="number">3114</span>, <span class="number">3116</span>, <span class="number">3118</span>, <span class="number">3120</span>, <span class="number">3122</span>, <span class="number">3124</span>, <span class="number">3126</span>, <span class="number">3128</span>, <span class="number">3130</span>, <span class="number">3132</span>, <span class="number">3134</span>, <span class="number">3136</span>, <span class="number">3138</span>, <span class="number">3140</span>, <span class="number">3142</span>, <span class="number">3144</span>, <span class="number">3146</span>, <span class="number">3148</span>, <span class="number">3150</span>, <span class="number">3152</span>, <span class="number">3154</span>, <span class="number">3156</span>, <span class="number">3158</span>, <span class="number">3160</span>, <span class="number">3162</span>, <span class="number">3164</span>, <span class="number">3166</span>, <span class="number">3168</span>, <span class="number">3170</span>, <span class="number">3172</span>, <span class="number">3174</span>, <span class="number">3176</span>, <span class="number">3178</span>, <span class="number">3180</span>, <span class="number">3182</span>, <span class="number">3184</span>, <span class="number">3186</span>, <span class="number">3188</span>, <span class="number">3190</span>, <span class="number">3192</span>, <span class="number">3194</span>, <span class="number">3196</span>, <span class="number">3198</span>, <span class="number">3200</span>, <span class="number">3202</span>, <span class="number">3204</span>, <span class="number">3206</span>, <span class="number">3208</span>, <span class="number">3210</span>, <span class="number">3212</span>, <span class="number">3214</span>, <span class="number">3216</span>, <span class="number">3218</span>, <span class="number">3220</span>, <span class="number">3222</span>, <span class="number">3224</span>, <span class="number">3226</span>, <span class="number">3228</span>, <span class="number">3230</span>, <span class="number">3232</span>, <span class="number">3234</span>, <span class="number">3236</span>, <span class="number">3238</span>, <span class="number">3240</span>, <span class="number">3242</span>, <span class="number">3244</span>, <span class="number">3246</span>, <span class="number">3248</span>, <span class="number">3250</span>, <span class="number">3252</span>, <span class="number">3254</span>, <span class="number">3256</span>, <span class="number">3258</span>, <span class="number">3260</span>, <span class="number">3262</span>, <span class="number">3264</span>, <span class="number">3266</span>, <span class="number">3268</span>, <span class="number">3270</span>, <span class="number">3272</span>, <span class="number">3274</span>, <span class="number">3276</span>, <span class="number">3278</span>, <span class="number">3280</span>, <span class="number">3282</span>, <span class="number">3284</span>, <span class="number">3286</span>, <span class="number">3288</span>, <span class="number">3290</span>, <span class="number">3292</span>, <span class="number">3294</span>, <span class="number">3296</span>, <span class="number">3298</span>, <span class="number">3300</span>, <span class="number">3303</span>, <span class="number">3306</span>, <span class="number">3309</span>, <span class="number">3312</span>, <span class="number">3315</span>, <span class="number">3318</span>, <span class="number">3321</span>, <span class="number">3324</span>, <span class="number">3327</span>, <span class="number">3330</span>, <span class="number">3333</span>, <span class="number">3336</span>, <span class="number">3339</span>, <span class="number">3342</span>, <span class="number">3345</span>, <span class="number">3348</span>, <span class="number">3351</span>, <span class="number">3354</span>, <span class="number">3357</span>, <span class="number">3360</span>, <span class="number">3363</span>, <span class="number">3366</span>, <span class="number">3369</span>, <span class="number">3372</span>, <span class="number">3375</span>, <span class="number">3378</span>, <span class="number">3381</span>, <span class="number">3384</span>, <span class="number">3387</span>, <span class="number">3390</span>, <span class="number">3393</span>, <span class="number">3396</span>, <span class="number">3399</span>, <span class="number">3402</span>, <span class="number">3405</span>, <span class="number">3408</span>, <span class="number">3411</span>, <span class="number">3414</span>, <span class="number">3417</span>, <span class="number">3420</span>, <span class="number">3423</span>, <span class="number">3426</span>, <span class="number">3429</span>, <span class="number">3432</span>, <span class="number">3435</span>, <span class="number">3438</span>, <span class="number">3441</span>, <span class="number">3444</span>, <span class="number">3447</span>, <span class="number">3450</span>, <span class="number">3453</span>, <span class="number">3456</span>, <span class="number">3459</span>, <span class="number">3462</span>, <span class="number">3465</span>, <span class="number">3468</span>, <span class="number">3471</span>, <span class="number">3474</span>, <span class="number">3477</span>, <span class="number">3480</span>, <span class="number">3483</span>, <span class="number">3486</span>, <span class="number">3489</span>, <span class="number">3492</span>, <span class="number">3495</span>, <span class="number">3498</span>, <span class="number">3501</span>, <span class="number">3504</span>, <span class="number">3507</span>, <span class="number">3510</span>, <span class="number">3513</span>, <span class="number">3516</span>, <span class="number">3519</span>, <span class="number">3522</span>, <span class="number">3525</span>, <span class="number">3528</span>, <span class="number">3531</span>, <span class="number">3534</span>, <span class="number">3537</span>, <span class="number">3540</span>, <span class="number">3543</span>, <span class="number">3546</span>, <span class="number">3549</span>, <span class="number">3552</span>, <span class="number">3555</span>, <span class="number">3558</span>, <span class="number">3561</span>, <span class="number">3564</span>, <span class="number">3567</span>, <span class="number">3570</span>, <span class="number">3573</span>, <span class="number">3576</span>, <span class="number">3579</span>, <span class="number">3582</span>, <span class="number">3585</span>, <span class="number">3588</span>, <span class="number">3591</span>, <span class="number">3594</span>, <span class="number">3597</span>, <span class="number">3600</span>, <span class="number">3604</span>, <span class="number">3608</span>, <span class="number">3612</span>, <span class="number">3616</span>, <span class="number">3620</span>, <span class="number">3624</span>, <span class="number">3628</span>, <span class="number">3632</span>, <span class="number">3636</span>, <span class="number">3640</span>, <span class="number">3641</span>, <span class="number">3642</span>, <span class="number">3643</span>, <span class="number">3644</span>, <span class="number">3645</span>, <span class="number">3646</span>, <span class="number">3647</span>, <span class="number">3648</span>, <span class="number">3649</span>, <span class="number">3650</span>, <span class="number">3651</span>, <span class="number">3652</span>, <span class="number">3653</span>, <span class="number">3654</span>, <span class="number">3655</span>, <span class="number">3656</span>, <span class="number">3657</span>, <span class="number">3658</span>, <span class="number">3659</span>, <span class="number">3660</span>, <span class="number">3661</span>, <span class="number">3662</span>, <span class="number">3663</span>, <span class="number">3664</span>, <span class="number">3665</span>, <span class="number">3666</span>, <span class="number">3667</span>, <span class="number">3668</span>, <span class="number">3669</span>, <span class="number">3670</span>, <span class="number">3671</span>, <span class="number">3672</span>, <span class="number">3673</span>, <span class="number">3674</span>, <span class="number">3675</span>, <span class="number">3676</span>, <span class="number">3677</span>, <span class="number">3678</span>, <span class="number">3679</span>, <span class="number">3680</span>, <span class="number">3681</span>, <span class="number">3682</span>, <span class="number">3683</span>, <span class="number">3684</span>, <span class="number">3685</span>, <span class="number">3686</span>, <span class="number">3687</span>, <span class="number">3688</span>, <span class="number">3689</span>, <span class="number">3690</span>, <span class="number">3691</span>, <span class="number">3692</span>, <span class="number">3693</span>, <span class="number">3694</span>, <span class="number">3695</span>, <span class="number">3696</span>, <span class="number">3697</span>, <span class="number">3698</span>, <span class="number">3699</span>, <span class="number">3700</span>, <span class="number">3701</span>, <span class="number">3702</span>, <span class="number">3703</span>, <span class="number">3704</span>, <span class="number">3705</span>, <span class="number">3706</span>, <span class="number">3707</span>, <span class="number">3708</span>, <span class="number">3709</span>, <span class="number">3710</span>, <span class="number">3711</span>, <span class="number">3712</span>, <span class="number">3713</span>, <span class="number">3714</span>, <span class="number">3715</span>, <span class="number">3716</span>, <span class="number">3717</span>, <span class="number">3718</span>, <span class="number">3719</span>, <span class="number">3720</span>, <span class="number">3721</span>, <span class="number">3722</span>, <span class="number">3723</span>, <span class="number">3724</span>, <span class="number">3725</span>, <span class="number">3726</span>, <span class="number">3727</span>, <span class="number">3728</span>, <span class="number">3729</span>, <span class="number">3730</span>, <span class="number">3732</span>, <span class="number">3734</span>, <span class="number">3736</span>, <span class="number">3738</span>, <span class="number">3740</span>, <span class="number">3742</span>, <span class="number">3744</span>, <span class="number">3746</span>, <span class="number">3748</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3750</span>, <span class="number">3751</span>, <span class="number">3752</span>, <span class="number">3753</span>, <span class="number">3754</span>, <span class="number">3755</span>, <span class="number">3756</span>, <span class="number">3757</span>, <span class="number">3758</span>, <span class="number">3759</span>, <span class="number">3760</span>, <span class="number">3761</span>, <span class="number">3762</span>, <span class="number">3763</span>, <span class="number">3764</span>, <span class="number">3765</span>, <span class="number">3766</span>, <span class="number">3767</span>, <span class="number">3768</span>, <span class="number">3769</span>, <span class="number">3770</span>, <span class="number">3771</span>, <span class="number">3772</span>, <span class="number">3773</span>, <span class="number">3774</span>, <span class="number">3775</span>, <span class="number">3776</span>, <span class="number">3777</span>, <span class="number">3778</span>, <span class="number">3779</span>, <span class="number">3780</span>, <span class="number">3781</span>, <span class="number">3782</span>, <span class="number">3783</span>, <span class="number">3784</span>, <span class="number">3785</span>, <span class="number">3786</span>, <span class="number">3787</span>, <span class="number">3788</span>, <span class="number">3789</span>, <span class="number">3790</span>, <span class="number">3791</span>, <span class="number">3792</span>, <span class="number">3793</span>, <span class="number">3794</span>, <span class="number">3795</span>, <span class="number">3796</span>, <span class="number">3797</span>, <span class="number">3798</span>, <span class="number">3799</span>, <span class="number">3800</span>, <span class="number">3801</span>, <span class="number">3802</span>, <span class="number">3803</span>, <span class="number">3804</span>, <span class="number">3805</span>, <span class="number">3806</span>, <span class="number">3807</span>, <span class="number">3808</span>, <span class="number">3809</span>, <span class="number">3810</span>, <span class="number">3811</span>, <span class="number">3812</span>, <span class="number">3813</span>, <span class="number">3814</span>, <span class="number">3815</span>, <span class="number">3816</span>, <span class="number">3817</span>, <span class="number">3818</span>, <span class="number">3819</span>, <span class="number">3820</span>, <span class="number">3821</span>, <span class="number">3822</span>, <span class="number">3823</span>, <span class="number">3824</span>, <span class="number">3825</span>, <span class="number">3826</span>, <span class="number">3827</span>, <span class="number">3828</span>, <span class="number">3829</span>, <span class="number">3830</span>, <span class="number">3831</span>, <span class="number">3832</span>, <span class="number">3833</span>, <span class="number">3834</span>, <span class="number">3835</span>, <span class="number">3836</span>, <span class="number">3837</span>, <span class="number">3838</span>, <span class="number">3839</span>, <span class="number">3840</span>, <span class="number">3841</span>, <span class="number">3842</span>, <span class="number">3843</span>, <span class="number">3844</span>, <span class="number">3845</span>, <span class="number">3846</span>, <span class="number">3847</span>, <span class="number">3848</span>, <span class="number">3849</span>, <span class="number">3850</span>, <span class="number">3852</span>, <span class="number">3854</span>, <span class="number">3856</span>, <span class="number">3858</span>, <span class="number">3860</span>, <span class="number">3862</span>, <span class="number">3864</span>, <span class="number">3866</span>, <span class="number">3868</span>, <span class="number">3870</span>, <span class="number">3872</span>, <span class="number">3874</span>, <span class="number">3876</span>, <span class="number">3878</span>, <span class="number">3880</span>, <span class="number">3882</span>, <span class="number">3884</span>, <span class="number">3886</span>, <span class="number">3888</span>, <span class="number">3890</span>, <span class="number">3892</span>, <span class="number">3894</span>, <span class="number">3896</span>, <span class="number">3898</span>, <span class="number">3900</span>, <span class="number">3902</span>, <span class="number">3904</span>, <span class="number">3906</span>, <span class="number">3908</span>, <span class="number">3910</span>, <span class="number">3912</span>, <span class="number">3914</span>, <span class="number">3916</span>, <span class="number">3918</span>, <span class="number">3920</span>, <span class="number">3922</span>, <span class="number">3924</span>, <span class="number">3926</span>, <span class="number">3928</span>, <span class="number">3930</span>, <span class="number">3932</span>, <span class="number">3934</span>, <span class="number">3936</span>, <span class="number">3938</span>, <span class="number">3940</span>, <span class="number">3942</span>, <span class="number">3944</span>, <span class="number">3946</span>, <span class="number">3948</span>, <span class="number">3950</span>, <span class="number">3952</span>, <span class="number">3954</span>, <span class="number">3956</span>, <span class="number">3958</span>, <span class="number">3960</span>, <span class="number">3962</span>, <span class="number">3964</span>, <span class="number">3966</span>, <span class="number">3968</span>, <span class="number">3970</span>, <span class="number">3972</span>, <span class="number">3974</span>, <span class="number">3976</span>, <span class="number">3978</span>, <span class="number">3980</span>, <span class="number">3982</span>, <span class="number">3984</span>, <span class="number">3986</span>, <span class="number">3988</span>, <span class="number">3990</span>, <span class="number">3992</span>, <span class="number">3994</span>, <span class="number">3996</span>, <span class="number">3998</span>, <span class="number">4000</span>, <span class="number">4002</span>, <span class="number">4004</span>, <span class="number">4006</span>, <span class="number">4008</span>, <span class="number">4010</span>, <span class="number">4012</span>, <span class="number">4014</span>, <span class="number">4016</span>, <span class="number">4018</span>, <span class="number">4020</span>, <span class="number">4022</span>, <span class="number">4024</span>, <span class="number">4026</span>, <span class="number">4028</span>, <span class="number">4030</span>, <span class="number">4032</span>, <span class="number">4034</span>, <span class="number">4036</span>, <span class="number">4038</span>, <span class="number">4040</span>, <span class="number">4042</span>, <span class="number">4044</span>, <span class="number">4046</span>, <span class="number">4048</span>, <span class="number">4050</span>, <span class="number">4053</span>, <span class="number">4056</span>, <span class="number">4059</span>, <span class="number">4062</span>, <span class="number">4065</span>, <span class="number">4068</span>, <span class="number">4071</span>, <span class="number">4074</span>, <span class="number">4077</span>, <span class="number">4080</span>, <span class="number">4083</span>, <span class="number">4086</span>, <span class="number">4089</span>, <span class="number">4092</span>, <span class="number">4095</span>, <span class="number">4098</span>, <span class="number">4101</span>, <span class="number">4104</span>, <span class="number">4107</span>, <span class="number">4110</span>, <span class="number">4113</span>, <span class="number">4116</span>, <span class="number">4119</span>, <span class="number">4122</span>, <span class="number">4125</span>, <span class="number">4128</span>, <span class="number">4131</span>, <span class="number">4134</span>, <span class="number">4137</span>, <span class="number">4140</span>, <span class="number">4143</span>, <span class="number">4146</span>, <span class="number">4149</span>, <span class="number">4152</span>, <span class="number">4155</span>, <span class="number">4158</span>, <span class="number">4161</span>, <span class="number">4164</span>, <span class="number">4167</span>, <span class="number">4170</span>, <span class="number">4173</span>, <span class="number">4176</span>, <span class="number">4179</span>, <span class="number">4182</span>, <span class="number">4185</span>, <span class="number">4188</span>, <span class="number">4191</span>, <span class="number">4194</span>, <span class="number">4197</span>, <span class="number">4200</span>, <span class="number">4203</span>, <span class="number">4206</span>, <span class="number">4209</span>, <span class="number">4212</span>, <span class="number">4215</span>, <span class="number">4218</span>, <span class="number">4221</span>, <span class="number">4224</span>, <span class="number">4227</span>, <span class="number">4230</span>, <span class="number">4233</span>, <span class="number">4236</span>, <span class="number">4239</span>, <span class="number">4242</span>, <span class="number">4245</span>, <span class="number">4248</span>, <span class="number">4251</span>, <span class="number">4254</span>, <span class="number">4257</span>, <span class="number">4260</span>, <span class="number">4263</span>, <span class="number">4266</span>, <span class="number">4269</span>, <span class="number">4272</span>, <span class="number">4275</span>, <span class="number">4278</span>, <span class="number">4281</span>, <span class="number">4284</span>, <span class="number">4287</span>, <span class="number">4290</span>, <span class="number">4293</span>, <span class="number">4296</span>, <span class="number">4299</span>, <span class="number">4302</span>, <span class="number">4305</span>, <span class="number">4308</span>, <span class="number">4311</span>, <span class="number">4314</span>, <span class="number">4317</span>, <span class="number">4320</span>, <span class="number">4323</span>, <span class="number">4326</span>, <span class="number">4329</span>, <span class="number">4332</span>, <span class="number">4335</span>, <span class="number">4338</span>, <span class="number">4341</span>, <span class="number">4344</span>, <span class="number">4347</span>, <span class="number">4350</span>, <span class="number">4354</span>, <span class="number">4358</span>, <span class="number">4362</span>, <span class="number">4366</span>, <span class="number">4370</span>, <span class="number">4374</span>, <span class="number">4378</span>, <span class="number">4382</span>, <span class="number">4386</span>, <span class="number">4390</span>, <span class="number">4391</span>, <span class="number">4392</span>, <span class="number">4393</span>, <span class="number">4394</span>, <span class="number">4395</span>, <span class="number">4396</span>, <span class="number">4397</span>, <span class="number">4398</span>, <span class="number">4399</span>, <span class="number">4400</span>, <span class="number">4401</span>, <span class="number">4402</span>, <span class="number">4403</span>, <span class="number">4404</span>, <span class="number">4405</span>, <span class="number">4406</span>, <span class="number">4407</span>, <span class="number">4408</span>, <span class="number">4409</span>, <span class="number">4410</span>, <span class="number">4411</span>, <span class="number">4412</span>, <span class="number">4413</span>, <span class="number">4414</span>, <span class="number">4415</span>, <span class="number">4416</span>, <span class="number">4417</span>, <span class="number">4418</span>, <span class="number">4419</span>, <span class="number">4420</span>, <span class="number">4421</span>, <span class="number">4422</span>, <span class="number">4423</span>, <span class="number">4424</span>, <span class="number">4425</span>, <span class="number">4426</span>, <span class="number">4427</span>, <span class="number">4428</span>, <span class="number">4429</span>, <span class="number">4430</span>, <span class="number">4431</span>, <span class="number">4432</span>, <span class="number">4433</span>, <span class="number">4434</span>, <span class="number">4435</span>, <span class="number">4436</span>, <span class="number">4437</span>, <span class="number">4438</span>, <span class="number">4439</span>, <span class="number">4440</span>, <span class="number">4441</span>, <span class="number">4442</span>, <span class="number">4443</span>, <span class="number">4444</span>, <span class="number">4445</span>, <span class="number">4446</span>, <span class="number">4447</span>, <span class="number">4448</span>, <span class="number">4449</span>, <span class="number">4450</span>, <span class="number">4451</span>, <span class="number">4452</span>, <span class="number">4453</span>, <span class="number">4454</span>, <span class="number">4455</span>, <span class="number">4456</span>, <span class="number">4457</span>, <span class="number">4458</span>, <span class="number">4459</span>, <span class="number">4460</span>, <span class="number">4461</span>, <span class="number">4462</span>, <span class="number">4463</span>, <span class="number">4464</span>, <span class="number">4465</span>, <span class="number">4466</span>, <span class="number">4467</span>, <span class="number">4468</span>, <span class="number">4469</span>, <span class="number">4470</span>, <span class="number">4471</span>, <span class="number">4472</span>, <span class="number">4473</span>, <span class="number">4474</span>, <span class="number">4475</span>, <span class="number">4476</span>, <span class="number">4477</span>, <span class="number">4478</span>, <span class="number">4479</span>, <span class="number">4480</span>, <span class="number">4482</span>, <span class="number">4484</span>, <span class="number">4486</span>, <span class="number">4488</span>, <span class="number">4490</span>, <span class="number">4492</span>, <span class="number">4494</span>, <span class="number">4496</span>, <span class="number">4498</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4500</span>, <span class="number">4501</span>, <span class="number">4502</span>, <span class="number">4503</span>, <span class="number">4504</span>, <span class="number">4505</span>, <span class="number">4506</span>, <span class="number">4507</span>, <span class="number">4508</span>, <span class="number">4509</span>, <span class="number">4510</span>, <span class="number">4511</span>, <span class="number">4512</span>, <span class="number">4513</span>, <span class="number">4514</span>, <span class="number">4515</span>, <span class="number">4516</span>, <span class="number">4517</span>, <span class="number">4518</span>, <span class="number">4519</span>, <span class="number">4520</span>, <span class="number">4521</span>, <span class="number">4522</span>, <span class="number">4523</span>, <span class="number">4524</span>, <span class="number">4525</span>, <span class="number">4526</span>, <span class="number">4527</span>, <span class="number">4528</span>, <span class="number">4529</span>, <span class="number">4530</span>, <span class="number">4531</span>, <span class="number">4532</span>, <span class="number">4533</span>, <span class="number">4534</span>, <span class="number">4535</span>, <span class="number">4536</span>, <span class="number">4537</span>, <span class="number">4538</span>, <span class="number">4539</span>, <span class="number">4540</span>, <span class="number">4541</span>, <span class="number">4542</span>, <span class="number">4543</span>, <span class="number">4544</span>, <span class="number">4545</span>, <span class="number">4546</span>, <span class="number">4547</span>, <span class="number">4548</span>, <span class="number">4549</span>, <span class="number">4550</span>, <span class="number">4551</span>, <span class="number">4552</span>, <span class="number">4553</span>, <span class="number">4554</span>, <span class="number">4555</span>, <span class="number">4556</span>, <span class="number">4557</span>, <span class="number">4558</span>, <span class="number">4559</span>, <span class="number">4560</span>, <span class="number">4561</span>, <span class="number">4562</span>, <span class="number">4563</span>, <span class="number">4564</span>, <span class="number">4565</span>, <span class="number">4566</span>, <span class="number">4567</span>, <span class="number">4568</span>, <span class="number">4569</span>, <span class="number">4570</span>, <span class="number">4571</span>, <span class="number">4572</span>, <span class="number">4573</span>, <span class="number">4574</span>, <span class="number">4575</span>, <span class="number">4576</span>, <span class="number">4577</span>, <span class="number">4578</span>, <span class="number">4579</span>, <span class="number">4580</span>, <span class="number">4581</span>, <span class="number">4582</span>, <span class="number">4583</span>, <span class="number">4584</span>, <span class="number">4585</span>, <span class="number">4586</span>, <span class="number">4587</span>, <span class="number">4588</span>, <span class="number">4589</span>, <span class="number">4590</span>, <span class="number">4591</span>, <span class="number">4592</span>, <span class="number">4593</span>, <span class="number">4594</span>, <span class="number">4595</span>, <span class="number">4596</span>, <span class="number">4597</span>, <span class="number">4598</span>, <span class="number">4599</span>, <span class="number">4600</span>, <span class="number">4602</span>, <span class="number">4604</span>, <span class="number">4606</span>, <span class="number">4608</span>, <span class="number">4610</span>, <span class="number">4612</span>, <span class="number">4614</span>, <span class="number">4616</span>, <span class="number">4618</span>, <span class="number">4620</span>, <span class="number">4622</span>, <span class="number">4624</span>, <span class="number">4626</span>, <span class="number">4628</span>, <span class="number">4630</span>, <span class="number">4632</span>, <span class="number">4634</span>, <span class="number">4636</span>, <span class="number">4638</span>, <span class="number">4640</span>, <span class="number">4642</span>, <span class="number">4644</span>, <span class="number">4646</span>, <span class="number">4648</span>, <span class="number">4650</span>, <span class="number">4652</span>, <span class="number">4654</span>, <span class="number">4656</span>, <span class="number">4658</span>, <span class="number">4660</span>, <span class="number">4662</span>, <span class="number">4664</span>, <span class="number">4666</span>, <span class="number">4668</span>, <span class="number">4670</span>, <span class="number">4672</span>, <span class="number">4674</span>, <span class="number">4676</span>, <span class="number">4678</span>, <span class="number">4680</span>, <span class="number">4682</span>, <span class="number">4684</span>, <span class="number">4686</span>, <span class="number">4688</span>, <span class="number">4690</span>, <span class="number">4692</span>, <span class="number">4694</span>, <span class="number">4696</span>, <span class="number">4698</span>, <span class="number">4700</span>, <span class="number">4702</span>, <span class="number">4704</span>, <span class="number">4706</span>, <span class="number">4708</span>, <span class="number">4710</span>, <span class="number">4712</span>, <span class="number">4714</span>, <span class="number">4716</span>, <span class="number">4718</span>, <span class="number">4720</span>, <span class="number">4722</span>, <span class="number">4724</span>, <span class="number">4726</span>, <span class="number">4728</span>, <span class="number">4730</span>, <span class="number">4732</span>, <span class="number">4734</span>, <span class="number">4736</span>, <span class="number">4738</span>, <span class="number">4740</span>, <span class="number">4742</span>, <span class="number">4744</span>, <span class="number">4746</span>, <span class="number">4748</span>, <span class="number">4750</span>, <span class="number">4752</span>, <span class="number">4754</span>, <span class="number">4756</span>, <span class="number">4758</span>, <span class="number">4760</span>, <span class="number">4762</span>, <span class="number">4764</span>, <span class="number">4766</span>, <span class="number">4768</span>, <span class="number">4770</span>, <span class="number">4772</span>, <span class="number">4774</span>, <span class="number">4776</span>, <span class="number">4778</span>, <span class="number">4780</span>, <span class="number">4782</span>, <span class="number">4784</span>, <span class="number">4786</span>, <span class="number">4788</span>, <span class="number">4790</span>, <span class="number">4792</span>, <span class="number">4794</span>, <span class="number">4796</span>, <span class="number">4798</span>, <span class="number">4800</span>, <span class="number">4803</span>, <span class="number">4806</span>, <span class="number">4809</span>, <span class="number">4812</span>, <span class="number">4815</span>, <span class="number">4818</span>, <span class="number">4821</span>, <span class="number">4824</span>, <span class="number">4827</span>, <span class="number">4830</span>, <span class="number">4833</span>, <span class="number">4836</span>, <span class="number">4839</span>, <span class="number">4842</span>, <span class="number">4845</span>, <span class="number">4848</span>, <span class="number">4851</span>, <span class="number">4854</span>, <span class="number">4857</span>, <span class="number">4860</span>, <span class="number">4863</span>, <span class="number">4866</span>, <span class="number">4869</span>, <span class="number">4872</span>, <span class="number">4875</span>, <span class="number">4878</span>, <span class="number">4881</span>, <span class="number">4884</span>, <span class="number">4887</span>, <span class="number">4890</span>, <span class="number">4893</span>, <span class="number">4896</span>, <span class="number">4899</span>, <span class="number">4902</span>, <span class="number">4905</span>, <span class="number">4908</span>, <span class="number">4911</span>, <span class="number">4914</span>, <span class="number">4917</span>, <span class="number">4920</span>, <span class="number">4923</span>, <span class="number">4926</span>, <span class="number">4929</span>, <span class="number">4932</span>, <span class="number">4935</span>, <span class="number">4938</span>, <span class="number">4941</span>, <span class="number">4944</span>, <span class="number">4947</span>, <span class="number">4950</span>, <span class="number">4953</span>, <span class="number">4956</span>, <span class="number">4959</span>, <span class="number">4962</span>, <span class="number">4965</span>, <span class="number">4968</span>, <span class="number">4971</span>, <span class="number">4974</span>, <span class="number">4977</span>, <span class="number">4980</span>, <span class="number">4983</span>, <span class="number">4986</span>, <span class="number">4989</span>, <span class="number">4992</span>, <span class="number">4995</span>, <span class="number">4998</span>, <span class="number">5001</span>, <span class="number">5004</span>, <span class="number">5007</span>, <span class="number">5010</span>, <span class="number">5013</span>, <span class="number">5016</span>, <span class="number">5019</span>, <span class="number">5022</span>, <span class="number">5025</span>, <span class="number">5028</span>, <span class="number">5031</span>, <span class="number">5034</span>, <span class="number">5037</span>, <span class="number">5040</span>, <span class="number">5043</span>, <span class="number">5046</span>, <span class="number">5049</span>, <span class="number">5052</span>, <span class="number">5055</span>, <span class="number">5058</span>, <span class="number">5061</span>, <span class="number">5064</span>, <span class="number">5067</span>, <span class="number">5070</span>, <span class="number">5073</span>, <span class="number">5076</span>, <span class="number">5079</span>, <span class="number">5082</span>, <span class="number">5085</span>, <span class="number">5088</span>, <span class="number">5091</span>, <span class="number">5094</span>, <span class="number">5097</span>, <span class="number">5100</span>, <span class="number">5104</span>, <span class="number">5108</span>, <span class="number">5112</span>, <span class="number">5116</span>, <span class="number">5120</span>, <span class="number">5124</span>, <span class="number">5128</span>, <span class="number">5132</span>, <span class="number">5136</span>, <span class="number">5140</span>, <span class="number">5141</span>, <span class="number">5142</span>, <span class="number">5143</span>, <span class="number">5144</span>, <span class="number">5145</span>, <span class="number">5146</span>, <span class="number">5147</span>, <span class="number">5148</span>, <span class="number">5149</span>, <span class="number">5150</span>, <span class="number">5151</span>, <span class="number">5152</span>, <span class="number">5153</span>, <span class="number">5154</span>, <span class="number">5155</span>, <span class="number">5156</span>, <span class="number">5157</span>, <span class="number">5158</span>, <span class="number">5159</span>, <span class="number">5160</span>, <span class="number">5161</span>, <span class="number">5162</span>, <span class="number">5163</span>, <span class="number">5164</span>, <span class="number">5165</span>, <span class="number">5166</span>, <span class="number">5167</span>, <span class="number">5168</span>, <span class="number">5169</span>, <span class="number">5170</span>, <span class="number">5171</span>, <span class="number">5172</span>, <span class="number">5173</span>, <span class="number">5174</span>, <span class="number">5175</span>, <span class="number">5176</span>, <span class="number">5177</span>, <span class="number">5178</span>, <span class="number">5179</span>, <span class="number">5180</span>, <span class="number">5181</span>, <span class="number">5182</span>, <span class="number">5183</span>, <span class="number">5184</span>, <span class="number">5185</span>, <span class="number">5186</span>, <span class="number">5187</span>, <span class="number">5188</span>, <span class="number">5189</span>, <span class="number">5190</span>, <span class="number">5191</span>, <span class="number">5192</span>, <span class="number">5193</span>, <span class="number">5194</span>, <span class="number">5195</span>, <span class="number">5196</span>, <span class="number">5197</span>, <span class="number">5198</span>, <span class="number">5199</span>, <span class="number">5200</span>, <span class="number">5201</span>, <span class="number">5202</span>, <span class="number">5203</span>, <span class="number">5204</span>, <span class="number">5205</span>, <span class="number">5206</span>, <span class="number">5207</span>, <span class="number">5208</span>, <span class="number">5209</span>, <span class="number">5210</span>, <span class="number">5211</span>, <span class="number">5212</span>, <span class="number">5213</span>, <span class="number">5214</span>, <span class="number">5215</span>, <span class="number">5216</span>, <span class="number">5217</span>, <span class="number">5218</span>, <span class="number">5219</span>, <span class="number">5220</span>, <span class="number">5221</span>, <span class="number">5222</span>, <span class="number">5223</span>, <span class="number">5224</span>, <span class="number">5225</span>, <span class="number">5226</span>, <span class="number">5227</span>, <span class="number">5228</span>, <span class="number">5229</span>, <span class="number">5230</span>, <span class="number">5232</span>, <span class="number">5234</span>, <span class="number">5236</span>, <span class="number">5238</span>, <span class="number">5240</span>, <span class="number">5242</span>, <span class="number">5244</span>, <span class="number">5246</span>, <span class="number">5248</span>, <span class="number">5250</span>, <span class="number">5250</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> t6[<span class="number">3510</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">256</span>, <span class="number">257</span>, <span class="number">258</span>, <span class="number">259</span>, <span class="number">260</span>, <span class="number">261</span>, <span class="number">262</span>, <span class="number">263</span>, <span class="number">264</span>, <span class="number">265</span>, <span class="number">266</span>, <span class="number">267</span>, <span class="number">268</span>, <span class="number">269</span>, <span class="number">270</span>, <span class="number">271</span>, <span class="number">272</span>, <span class="number">273</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">287</span>, <span class="number">288</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">296</span>, <span class="number">297</span>, <span class="number">298</span>, <span class="number">299</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>, <span class="number">306</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">310</span>, <span class="number">311</span>, <span class="number">312</span>, <span class="number">313</span>, <span class="number">314</span>, <span class="number">315</span>, <span class="number">316</span>, <span class="number">317</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">321</span>, <span class="number">322</span>, <span class="number">323</span>, <span class="number">324</span>, <span class="number">325</span>, <span class="number">326</span>, <span class="number">327</span>, <span class="number">328</span>, <span class="number">329</span>, <span class="number">330</span>, <span class="number">331</span>, <span class="number">332</span>, <span class="number">333</span>, <span class="number">334</span>, <span class="number">335</span>, <span class="number">336</span>, <span class="number">337</span>, <span class="number">338</span>, <span class="number">339</span>, <span class="number">340</span>, <span class="number">341</span>, <span class="number">342</span>, <span class="number">343</span>, <span class="number">344</span>, <span class="number">345</span>, <span class="number">346</span>, <span class="number">347</span>, <span class="number">348</span>, <span class="number">349</span>, <span class="number">350</span>, <span class="number">351</span>, <span class="number">352</span>, <span class="number">353</span>, <span class="number">354</span>, <span class="number">355</span>, <span class="number">356</span>, <span class="number">357</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">361</span>, <span class="number">362</span>, <span class="number">363</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">375</span>, <span class="number">376</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">380</span>, <span class="number">381</span>, <span class="number">382</span>, <span class="number">383</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">386</span>, <span class="number">387</span>, <span class="number">388</span>, <span class="number">389</span>, <span class="number">390</span>, <span class="number">391</span>, <span class="number">392</span>, <span class="number">393</span>, <span class="number">394</span>, <span class="number">395</span>, <span class="number">396</span>, <span class="number">397</span>, <span class="number">398</span>, <span class="number">399</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="number">402</span>, <span class="number">403</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">407</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">411</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">415</span>, <span class="number">416</span>, <span class="number">417</span>, <span class="number">418</span>, <span class="number">419</span>, <span class="number">420</span>, <span class="number">421</span>, <span class="number">422</span>, <span class="number">423</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">426</span>, <span class="number">427</span>, <span class="number">428</span>, <span class="number">429</span>, <span class="number">430</span>, <span class="number">431</span>, <span class="number">432</span>, <span class="number">433</span>, <span class="number">434</span>, <span class="number">435</span>, <span class="number">436</span>, <span class="number">437</span>, <span class="number">438</span>, <span class="number">439</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">443</span>, <span class="number">444</span>, <span class="number">445</span>, <span class="number">446</span>, <span class="number">447</span>, <span class="number">448</span>, <span class="number">449</span>, <span class="number">450</span>, <span class="number">451</span>, <span class="number">452</span>, <span class="number">453</span>, <span class="number">454</span>, <span class="number">455</span>, <span class="number">456</span>, <span class="number">457</span>, <span class="number">458</span>, <span class="number">459</span>, <span class="number">460</span>, <span class="number">461</span>, <span class="number">462</span>, <span class="number">463</span>, <span class="number">464</span>, <span class="number">465</span>, <span class="number">466</span>, <span class="number">467</span>, <span class="number">468</span>, <span class="number">469</span>, <span class="number">470</span>, <span class="number">471</span>, <span class="number">472</span>, <span class="number">473</span>, <span class="number">474</span>, <span class="number">475</span>, <span class="number">476</span>, <span class="number">477</span>, <span class="number">478</span>, <span class="number">479</span>, <span class="number">480</span>, <span class="number">481</span>, <span class="number">482</span>, <span class="number">483</span>, <span class="number">484</span>, <span class="number">485</span>, <span class="number">486</span>, <span class="number">487</span>, <span class="number">488</span>, <span class="number">489</span>, <span class="number">490</span>, <span class="number">491</span>, <span class="number">492</span>, <span class="number">493</span>, <span class="number">494</span>, <span class="number">495</span>, <span class="number">496</span>, <span class="number">497</span>, <span class="number">498</span>, <span class="number">499</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">501</span>, <span class="number">502</span>, <span class="number">503</span>, <span class="number">504</span>, <span class="number">505</span>, <span class="number">506</span>, <span class="number">507</span>, <span class="number">508</span>, <span class="number">509</span>, <span class="number">510</span>, <span class="number">511</span>, <span class="number">512</span>, <span class="number">513</span>, <span class="number">514</span>, <span class="number">515</span>, <span class="number">516</span>, <span class="number">517</span>, <span class="number">518</span>, <span class="number">519</span>, <span class="number">520</span>, <span class="number">521</span>, <span class="number">522</span>, <span class="number">523</span>, <span class="number">524</span>, <span class="number">525</span>, <span class="number">526</span>, <span class="number">527</span>, <span class="number">528</span>, <span class="number">529</span>, <span class="number">530</span>, <span class="number">531</span>, <span class="number">532</span>, <span class="number">533</span>, <span class="number">534</span>, <span class="number">535</span>, <span class="number">536</span>, <span class="number">537</span>, <span class="number">538</span>, <span class="number">539</span>, <span class="number">540</span>, <span class="number">541</span>, <span class="number">542</span>, <span class="number">543</span>, <span class="number">544</span>, <span class="number">545</span>, <span class="number">546</span>, <span class="number">547</span>, <span class="number">548</span>, <span class="number">549</span>, <span class="number">550</span>, <span class="number">551</span>, <span class="number">552</span>, <span class="number">553</span>, <span class="number">554</span>, <span class="number">555</span>, <span class="number">556</span>, <span class="number">557</span>, <span class="number">558</span>, <span class="number">559</span>, <span class="number">560</span>, <span class="number">561</span>, <span class="number">562</span>, <span class="number">563</span>, <span class="number">564</span>, <span class="number">565</span>, <span class="number">566</span>, <span class="number">567</span>, <span class="number">568</span>, <span class="number">569</span>, <span class="number">570</span>, <span class="number">571</span>, <span class="number">572</span>, <span class="number">573</span>, <span class="number">574</span>, <span class="number">575</span>, <span class="number">576</span>, <span class="number">577</span>, <span class="number">578</span>, <span class="number">579</span>, <span class="number">580</span>, <span class="number">581</span>, <span class="number">582</span>, <span class="number">583</span>, <span class="number">584</span>, <span class="number">585</span>, <span class="number">586</span>, <span class="number">587</span>, <span class="number">588</span>, <span class="number">589</span>, <span class="number">590</span>, <span class="number">591</span>, <span class="number">592</span>, <span class="number">593</span>, <span class="number">594</span>, <span class="number">595</span>, <span class="number">596</span>, <span class="number">597</span>, <span class="number">598</span>, <span class="number">599</span>, <span class="number">600</span>, <span class="number">601</span>, <span class="number">602</span>, <span class="number">603</span>, <span class="number">604</span>, <span class="number">605</span>, <span class="number">606</span>, <span class="number">607</span>, <span class="number">608</span>, <span class="number">609</span>, <span class="number">610</span>, <span class="number">611</span>, <span class="number">612</span>, <span class="number">613</span>, <span class="number">614</span>, <span class="number">615</span>, <span class="number">616</span>, <span class="number">617</span>, <span class="number">618</span>, <span class="number">619</span>, <span class="number">620</span>, <span class="number">621</span>, <span class="number">622</span>, <span class="number">623</span>, <span class="number">624</span>, <span class="number">625</span>, <span class="number">626</span>, <span class="number">627</span>, <span class="number">628</span>, <span class="number">629</span>, <span class="number">630</span>, <span class="number">631</span>, <span class="number">632</span>, <span class="number">633</span>, <span class="number">634</span>, <span class="number">635</span>, <span class="number">636</span>, <span class="number">637</span>, <span class="number">638</span>, <span class="number">639</span>, <span class="number">640</span>, <span class="number">641</span>, <span class="number">642</span>, <span class="number">643</span>, <span class="number">644</span>, <span class="number">645</span>, <span class="number">646</span>, <span class="number">647</span>, <span class="number">648</span>, <span class="number">649</span>, <span class="number">650</span>, <span class="number">651</span>, <span class="number">652</span>, <span class="number">653</span>, <span class="number">654</span>, <span class="number">655</span>, <span class="number">656</span>, <span class="number">657</span>, <span class="number">658</span>, <span class="number">659</span>, <span class="number">660</span>, <span class="number">661</span>, <span class="number">662</span>, <span class="number">663</span>, <span class="number">664</span>, <span class="number">665</span>, <span class="number">666</span>, <span class="number">667</span>, <span class="number">668</span>, <span class="number">669</span>, <span class="number">670</span>, <span class="number">671</span>, <span class="number">672</span>, <span class="number">673</span>, <span class="number">674</span>, <span class="number">675</span>, <span class="number">676</span>, <span class="number">677</span>, <span class="number">678</span>, <span class="number">679</span>, <span class="number">680</span>, <span class="number">681</span>, <span class="number">682</span>, <span class="number">683</span>, <span class="number">684</span>, <span class="number">685</span>, <span class="number">686</span>, <span class="number">687</span>, <span class="number">688</span>, <span class="number">689</span>, <span class="number">690</span>, <span class="number">691</span>, <span class="number">692</span>, <span class="number">693</span>, <span class="number">694</span>, <span class="number">695</span>, <span class="number">696</span>, <span class="number">697</span>, <span class="number">698</span>, <span class="number">699</span>, <span class="number">700</span>, <span class="number">701</span>, <span class="number">702</span>, <span class="number">703</span>, <span class="number">704</span>, <span class="number">705</span>, <span class="number">706</span>, <span class="number">707</span>, <span class="number">708</span>, <span class="number">709</span>, <span class="number">710</span>, <span class="number">711</span>, <span class="number">712</span>, <span class="number">713</span>, <span class="number">714</span>, <span class="number">715</span>, <span class="number">716</span>, <span class="number">717</span>, <span class="number">718</span>, <span class="number">719</span>, <span class="number">720</span>, <span class="number">721</span>, <span class="number">722</span>, <span class="number">723</span>, <span class="number">724</span>, <span class="number">725</span>, <span class="number">726</span>, <span class="number">727</span>, <span class="number">728</span>, <span class="number">729</span>, <span class="number">730</span>, <span class="number">731</span>, <span class="number">732</span>, <span class="number">733</span>, <span class="number">734</span>, <span class="number">735</span>, <span class="number">736</span>, <span class="number">737</span>, <span class="number">738</span>, <span class="number">739</span>, <span class="number">740</span>, <span class="number">741</span>, <span class="number">742</span>, <span class="number">743</span>, <span class="number">744</span>, <span class="number">745</span>, <span class="number">746</span>, <span class="number">747</span>, <span class="number">748</span>, <span class="number">749</span>, <span class="number">750</span>, <span class="number">751</span>, <span class="number">752</span>, <span class="number">753</span>, <span class="number">754</span>, <span class="number">755</span>, <span class="number">756</span>, <span class="number">757</span>, <span class="number">758</span>, <span class="number">759</span>, <span class="number">760</span>, <span class="number">761</span>, <span class="number">762</span>, <span class="number">763</span>, <span class="number">764</span>, <span class="number">765</span>, <span class="number">766</span>, <span class="number">767</span>, <span class="number">768</span>, <span class="number">769</span>, <span class="number">770</span>, <span class="number">771</span>, <span class="number">772</span>, <span class="number">773</span>, <span class="number">774</span>, <span class="number">775</span>, <span class="number">776</span>, <span class="number">777</span>, <span class="number">778</span>, <span class="number">779</span>, <span class="number">780</span>, <span class="number">781</span>, <span class="number">782</span>, <span class="number">783</span>, <span class="number">784</span>, <span class="number">785</span>, <span class="number">786</span>, <span class="number">787</span>, <span class="number">788</span>, <span class="number">789</span>, <span class="number">790</span>, <span class="number">791</span>, <span class="number">792</span>, <span class="number">793</span>, <span class="number">794</span>, <span class="number">795</span>, <span class="number">796</span>, <span class="number">797</span>, <span class="number">798</span>, <span class="number">799</span>, <span class="number">800</span>, <span class="number">801</span>, <span class="number">802</span>, <span class="number">803</span>, <span class="number">804</span>, <span class="number">805</span>, <span class="number">806</span>, <span class="number">807</span>, <span class="number">808</span>, <span class="number">809</span>, <span class="number">810</span>, <span class="number">811</span>, <span class="number">812</span>, <span class="number">813</span>, <span class="number">814</span>, <span class="number">815</span>, <span class="number">816</span>, <span class="number">817</span>, <span class="number">818</span>, <span class="number">819</span>, <span class="number">820</span>, <span class="number">821</span>, <span class="number">822</span>, <span class="number">823</span>, <span class="number">824</span>, <span class="number">825</span>, <span class="number">826</span>, <span class="number">827</span>, <span class="number">828</span>, <span class="number">829</span>, <span class="number">830</span>, <span class="number">831</span>, <span class="number">832</span>, <span class="number">833</span>, <span class="number">834</span>, <span class="number">835</span>, <span class="number">836</span>, <span class="number">837</span>, <span class="number">838</span>, <span class="number">839</span>, <span class="number">840</span>, <span class="number">841</span>, <span class="number">842</span>, <span class="number">843</span>, <span class="number">844</span>, <span class="number">845</span>, <span class="number">846</span>, <span class="number">847</span>, <span class="number">848</span>, <span class="number">849</span>, <span class="number">850</span>, <span class="number">851</span>, <span class="number">852</span>, <span class="number">853</span>, <span class="number">854</span>, <span class="number">855</span>, <span class="number">856</span>, <span class="number">857</span>, <span class="number">858</span>, <span class="number">859</span>, <span class="number">860</span>, <span class="number">861</span>, <span class="number">862</span>, <span class="number">863</span>, <span class="number">864</span>, <span class="number">865</span>, <span class="number">866</span>, <span class="number">867</span>, <span class="number">868</span>, <span class="number">869</span>, <span class="number">870</span>, <span class="number">871</span>, <span class="number">872</span>, <span class="number">873</span>, <span class="number">874</span>, <span class="number">875</span>, <span class="number">876</span>, <span class="number">877</span>, <span class="number">878</span>, <span class="number">879</span>, <span class="number">880</span>, <span class="number">881</span>, <span class="number">882</span>, <span class="number">883</span>, <span class="number">884</span>, <span class="number">885</span>, <span class="number">886</span>, <span class="number">887</span>, <span class="number">888</span>, <span class="number">889</span>, <span class="number">890</span>, <span class="number">891</span>, <span class="number">892</span>, <span class="number">893</span>, <span class="number">894</span>, <span class="number">895</span>, <span class="number">896</span>, <span class="number">897</span>, <span class="number">898</span>, <span class="number">899</span>, <span class="number">900</span>, <span class="number">901</span>, <span class="number">902</span>, <span class="number">903</span>, <span class="number">904</span>, <span class="number">905</span>, <span class="number">906</span>, <span class="number">907</span>, <span class="number">908</span>, <span class="number">909</span>, <span class="number">910</span>, <span class="number">911</span>, <span class="number">912</span>, <span class="number">913</span>, <span class="number">914</span>, <span class="number">915</span>, <span class="number">916</span>, <span class="number">917</span>, <span class="number">918</span>, <span class="number">919</span>, <span class="number">920</span>, <span class="number">921</span>, <span class="number">922</span>, <span class="number">923</span>, <span class="number">924</span>, <span class="number">925</span>, <span class="number">926</span>, <span class="number">927</span>, <span class="number">928</span>, <span class="number">929</span>, <span class="number">930</span>, <span class="number">931</span>, <span class="number">932</span>, <span class="number">933</span>, <span class="number">934</span>, <span class="number">935</span>, <span class="number">936</span>, <span class="number">937</span>, <span class="number">938</span>, <span class="number">939</span>, <span class="number">940</span>, <span class="number">941</span>, <span class="number">942</span>, <span class="number">943</span>, <span class="number">944</span>, <span class="number">945</span>, <span class="number">946</span>, <span class="number">947</span>, <span class="number">948</span>, <span class="number">949</span>, <span class="number">950</span>, <span class="number">951</span>, <span class="number">952</span>, <span class="number">953</span>, <span class="number">954</span>, <span class="number">955</span>, <span class="number">956</span>, <span class="number">957</span>, <span class="number">958</span>, <span class="number">959</span>, <span class="number">960</span>, <span class="number">961</span>, <span class="number">962</span>, <span class="number">963</span>, <span class="number">964</span>, <span class="number">965</span>, <span class="number">966</span>, <span class="number">967</span>, <span class="number">968</span>, <span class="number">969</span>, <span class="number">970</span>, <span class="number">971</span>, <span class="number">972</span>, <span class="number">973</span>, <span class="number">974</span>, <span class="number">975</span>, <span class="number">976</span>, <span class="number">977</span>, <span class="number">978</span>, <span class="number">979</span>, <span class="number">980</span>, <span class="number">981</span>, <span class="number">982</span>, <span class="number">983</span>, <span class="number">984</span>, <span class="number">985</span>, <span class="number">986</span>, <span class="number">987</span>, <span class="number">988</span>, <span class="number">989</span>, <span class="number">990</span>, <span class="number">991</span>, <span class="number">992</span>, <span class="number">993</span>, <span class="number">994</span>, <span class="number">995</span>, <span class="number">996</span>, <span class="number">997</span>, <span class="number">998</span>, <span class="number">999</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1003</span>, <span class="number">1004</span>, <span class="number">1005</span>, <span class="number">1006</span>, <span class="number">1007</span>, <span class="number">1008</span>, <span class="number">1009</span>, <span class="number">1010</span>, <span class="number">1011</span>, <span class="number">1012</span>, <span class="number">1013</span>, <span class="number">1014</span>, <span class="number">1015</span>, <span class="number">1016</span>, <span class="number">1017</span>, <span class="number">1018</span>, <span class="number">1019</span>, <span class="number">1020</span>, <span class="number">1021</span>, <span class="number">1022</span>, <span class="number">1023</span>, <span class="number">1024</span>, <span class="number">1025</span>, <span class="number">1026</span>, <span class="number">1027</span>, <span class="number">1028</span>, <span class="number">1029</span>, <span class="number">1030</span>, <span class="number">1031</span>, <span class="number">1032</span>, <span class="number">1033</span>, <span class="number">1034</span>, <span class="number">1035</span>, <span class="number">1036</span>, <span class="number">1037</span>, <span class="number">1038</span>, <span class="number">1039</span>, <span class="number">1040</span>, <span class="number">1041</span>, <span class="number">1042</span>, <span class="number">1043</span>, <span class="number">1044</span>, <span class="number">1045</span>, <span class="number">1046</span>, <span class="number">1047</span>, <span class="number">1048</span>, <span class="number">1049</span>, <span class="number">1050</span>, <span class="number">1051</span>, <span class="number">1052</span>, <span class="number">1053</span>, <span class="number">1054</span>, <span class="number">1055</span>, <span class="number">1056</span>, <span class="number">1057</span>, <span class="number">1058</span>, <span class="number">1059</span>, <span class="number">1060</span>, <span class="number">1061</span>, <span class="number">1062</span>, <span class="number">1063</span>, <span class="number">1064</span>, <span class="number">1065</span>, <span class="number">1066</span>, <span class="number">1067</span>, <span class="number">1068</span>, <span class="number">1069</span>, <span class="number">1070</span>, <span class="number">1071</span>, <span class="number">1072</span>, <span class="number">1073</span>, <span class="number">1074</span>, <span class="number">1075</span>, <span class="number">1076</span>, <span class="number">1077</span>, <span class="number">1078</span>, <span class="number">1079</span>, <span class="number">1080</span>, <span class="number">1081</span>, <span class="number">1082</span>, <span class="number">1083</span>, <span class="number">1084</span>, <span class="number">1085</span>, <span class="number">1086</span>, <span class="number">1087</span>, <span class="number">1088</span>, <span class="number">1089</span>, <span class="number">1090</span>, <span class="number">1091</span>, <span class="number">1092</span>, <span class="number">1093</span>, <span class="number">1094</span>, <span class="number">1095</span>, <span class="number">1096</span>, <span class="number">1097</span>, <span class="number">1098</span>, <span class="number">1099</span>, <span class="number">1100</span>, <span class="number">1101</span>, <span class="number">1102</span>, <span class="number">1103</span>, <span class="number">1104</span>, <span class="number">1105</span>, <span class="number">1106</span>, <span class="number">1107</span>, <span class="number">1108</span>, <span class="number">1109</span>, <span class="number">1110</span>, <span class="number">1111</span>, <span class="number">1112</span>, <span class="number">1113</span>, <span class="number">1114</span>, <span class="number">1115</span>, <span class="number">1116</span>, <span class="number">1117</span>, <span class="number">1118</span>, <span class="number">1119</span>, <span class="number">1120</span>, <span class="number">1121</span>, <span class="number">1122</span>, <span class="number">1123</span>, <span class="number">1124</span>, <span class="number">1125</span>, <span class="number">1126</span>, <span class="number">1127</span>, <span class="number">1128</span>, <span class="number">1129</span>, <span class="number">1130</span>, <span class="number">1131</span>, <span class="number">1132</span>, <span class="number">1133</span>, <span class="number">1134</span>, <span class="number">1135</span>, <span class="number">1136</span>, <span class="number">1137</span>, <span class="number">1138</span>, <span class="number">1139</span>, <span class="number">1140</span>, <span class="number">1141</span>, <span class="number">1142</span>, <span class="number">1143</span>, <span class="number">1144</span>, <span class="number">1145</span>, <span class="number">1146</span>, <span class="number">1147</span>, <span class="number">1148</span>, <span class="number">1149</span>, <span class="number">1150</span>, <span class="number">1151</span>, <span class="number">1152</span>, <span class="number">1153</span>, <span class="number">1154</span>, <span class="number">1155</span>, <span class="number">1156</span>, <span class="number">1157</span>, <span class="number">1158</span>, <span class="number">1159</span>, <span class="number">1160</span>, <span class="number">1161</span>, <span class="number">1162</span>, <span class="number">1163</span>, <span class="number">1164</span>, <span class="number">1165</span>, <span class="number">1166</span>, <span class="number">1167</span>, <span class="number">1168</span>, <span class="number">1169</span>, <span class="number">1170</span>, <span class="number">1171</span>, <span class="number">1172</span>, <span class="number">1173</span>, <span class="number">1174</span>, <span class="number">1175</span>, <span class="number">1176</span>, <span class="number">1177</span>, <span class="number">1178</span>, <span class="number">1179</span>, <span class="number">1180</span>, <span class="number">1181</span>, <span class="number">1182</span>, <span class="number">1183</span>, <span class="number">1184</span>, <span class="number">1185</span>, <span class="number">1186</span>, <span class="number">1187</span>, <span class="number">1188</span>, <span class="number">1189</span>, <span class="number">1190</span>, <span class="number">1191</span>, <span class="number">1192</span>, <span class="number">1193</span>, <span class="number">1194</span>, <span class="number">1195</span>, <span class="number">1196</span>, <span class="number">1197</span>, <span class="number">1198</span>, <span class="number">1199</span>, <span class="number">1200</span>, <span class="number">1201</span>, <span class="number">1202</span>, <span class="number">1203</span>, <span class="number">1204</span>, <span class="number">1205</span>, <span class="number">1206</span>, <span class="number">1207</span>, <span class="number">1208</span>, <span class="number">1209</span>, <span class="number">1210</span>, <span class="number">1211</span>, <span class="number">1212</span>, <span class="number">1213</span>, <span class="number">1214</span>, <span class="number">1215</span>, <span class="number">1216</span>, <span class="number">1217</span>, <span class="number">1218</span>, <span class="number">1219</span>, <span class="number">1220</span>, <span class="number">1221</span>, <span class="number">1222</span>, <span class="number">1223</span>, <span class="number">1224</span>, <span class="number">1225</span>, <span class="number">1226</span>, <span class="number">1227</span>, <span class="number">1228</span>, <span class="number">1229</span>, <span class="number">1230</span>, <span class="number">1231</span>, <span class="number">1232</span>, <span class="number">1233</span>, <span class="number">1234</span>, <span class="number">1235</span>, <span class="number">1236</span>, <span class="number">1237</span>, <span class="number">1238</span>, <span class="number">1239</span>, <span class="number">1240</span>, <span class="number">1241</span>, <span class="number">1242</span>, <span class="number">1243</span>, <span class="number">1244</span>, <span class="number">1245</span>, <span class="number">1246</span>, <span class="number">1247</span>, <span class="number">1248</span>, <span class="number">1249</span>, <span class="number">1250</span>, <span class="number">1251</span>, <span class="number">1252</span>, <span class="number">1253</span>, <span class="number">1254</span>, <span class="number">1255</span>, <span class="number">1256</span>, <span class="number">1257</span>, <span class="number">1258</span>, <span class="number">1259</span>, <span class="number">1260</span>, <span class="number">1261</span>, <span class="number">1262</span>, <span class="number">1263</span>, <span class="number">1264</span>, <span class="number">1265</span>, <span class="number">1266</span>, <span class="number">1267</span>, <span class="number">1268</span>, <span class="number">1269</span>, <span class="number">1270</span>, <span class="number">1271</span>, <span class="number">1272</span>, <span class="number">1273</span>, <span class="number">1274</span>, <span class="number">1275</span>, <span class="number">1276</span>, <span class="number">1277</span>, <span class="number">1278</span>, <span class="number">1279</span>, <span class="number">1280</span>, <span class="number">1281</span>, <span class="number">1282</span>, <span class="number">1283</span>, <span class="number">1284</span>, <span class="number">1285</span>, <span class="number">1286</span>, <span class="number">1287</span>, <span class="number">1288</span>, <span class="number">1289</span>, <span class="number">1290</span>, <span class="number">1291</span>, <span class="number">1292</span>, <span class="number">1293</span>, <span class="number">1294</span>, <span class="number">1295</span>, <span class="number">1296</span>, <span class="number">1297</span>, <span class="number">1298</span>, <span class="number">1299</span>, <span class="number">1300</span>, <span class="number">1301</span>, <span class="number">1302</span>, <span class="number">1303</span>, <span class="number">1304</span>, <span class="number">1305</span>, <span class="number">1306</span>, <span class="number">1307</span>, <span class="number">1308</span>, <span class="number">1309</span>, <span class="number">1310</span>, <span class="number">1311</span>, <span class="number">1312</span>, <span class="number">1313</span>, <span class="number">1314</span>, <span class="number">1315</span>, <span class="number">1316</span>, <span class="number">1317</span>, <span class="number">1318</span>, <span class="number">1319</span>, <span class="number">1320</span>, <span class="number">1321</span>, <span class="number">1322</span>, <span class="number">1323</span>, <span class="number">1324</span>, <span class="number">1325</span>, <span class="number">1326</span>, <span class="number">1327</span>, <span class="number">1328</span>, <span class="number">1329</span>, <span class="number">1330</span>, <span class="number">1331</span>, <span class="number">1332</span>, <span class="number">1333</span>, <span class="number">1334</span>, <span class="number">1335</span>, <span class="number">1336</span>, <span class="number">1337</span>, <span class="number">1338</span>, <span class="number">1339</span>, <span class="number">1340</span>, <span class="number">1341</span>, <span class="number">1342</span>, <span class="number">1343</span>, <span class="number">1344</span>, <span class="number">1345</span>, <span class="number">1346</span>, <span class="number">1347</span>, <span class="number">1348</span>, <span class="number">1349</span>, <span class="number">1350</span>, <span class="number">1351</span>, <span class="number">1352</span>, <span class="number">1353</span>, <span class="number">1354</span>, <span class="number">1355</span>, <span class="number">1356</span>, <span class="number">1357</span>, <span class="number">1358</span>, <span class="number">1359</span>, <span class="number">1360</span>, <span class="number">1361</span>, <span class="number">1362</span>, <span class="number">1363</span>, <span class="number">1364</span>, <span class="number">1365</span>, <span class="number">1366</span>, <span class="number">1367</span>, <span class="number">1368</span>, <span class="number">1369</span>, <span class="number">1370</span>, <span class="number">1371</span>, <span class="number">1372</span>, <span class="number">1373</span>, <span class="number">1374</span>, <span class="number">1375</span>, <span class="number">1376</span>, <span class="number">1377</span>, <span class="number">1378</span>, <span class="number">1379</span>, <span class="number">1380</span>, <span class="number">1381</span>, <span class="number">1382</span>, <span class="number">1383</span>, <span class="number">1384</span>, <span class="number">1385</span>, <span class="number">1386</span>, <span class="number">1387</span>, <span class="number">1388</span>, <span class="number">1389</span>, <span class="number">1390</span>, <span class="number">1391</span>, <span class="number">1392</span>, <span class="number">1393</span>, <span class="number">1394</span>, <span class="number">1395</span>, <span class="number">1396</span>, <span class="number">1397</span>, <span class="number">1398</span>, <span class="number">1399</span>, <span class="number">1400</span>, <span class="number">1401</span>, <span class="number">1402</span>, <span class="number">1403</span>, <span class="number">1404</span>, <span class="number">1405</span>, <span class="number">1406</span>, <span class="number">1407</span>, <span class="number">1408</span>, <span class="number">1409</span>, <span class="number">1410</span>, <span class="number">1411</span>, <span class="number">1412</span>, <span class="number">1413</span>, <span class="number">1414</span>, <span class="number">1415</span>, <span class="number">1416</span>, <span class="number">1417</span>, <span class="number">1418</span>, <span class="number">1419</span>, <span class="number">1420</span>, <span class="number">1421</span>, <span class="number">1422</span>, <span class="number">1423</span>, <span class="number">1424</span>, <span class="number">1425</span>, <span class="number">1426</span>, <span class="number">1427</span>, <span class="number">1428</span>, <span class="number">1429</span>, <span class="number">1430</span>, <span class="number">1431</span>, <span class="number">1432</span>, <span class="number">1433</span>, <span class="number">1434</span>, <span class="number">1435</span>, <span class="number">1436</span>, <span class="number">1437</span>, <span class="number">1438</span>, <span class="number">1439</span>, <span class="number">1440</span>, <span class="number">1441</span>, <span class="number">1442</span>, <span class="number">1443</span>, <span class="number">1444</span>, <span class="number">1445</span>, <span class="number">1446</span>, <span class="number">1447</span>, <span class="number">1448</span>, <span class="number">1449</span>, <span class="number">1450</span>, <span class="number">1451</span>, <span class="number">1452</span>, <span class="number">1453</span>, <span class="number">1454</span>, <span class="number">1455</span>, <span class="number">1456</span>, <span class="number">1457</span>, <span class="number">1458</span>, <span class="number">1459</span>, <span class="number">1460</span>, <span class="number">1461</span>, <span class="number">1462</span>, <span class="number">1463</span>, <span class="number">1464</span>, <span class="number">1465</span>, <span class="number">1466</span>, <span class="number">1467</span>, <span class="number">1468</span>, <span class="number">1469</span>, <span class="number">1470</span>, <span class="number">1471</span>, <span class="number">1472</span>, <span class="number">1473</span>, <span class="number">1474</span>, <span class="number">1475</span>, <span class="number">1476</span>, <span class="number">1477</span>, <span class="number">1478</span>, <span class="number">1479</span>, <span class="number">1480</span>, <span class="number">1481</span>, <span class="number">1482</span>, <span class="number">1483</span>, <span class="number">1484</span>, <span class="number">1485</span>, <span class="number">1486</span>, <span class="number">1487</span>, <span class="number">1488</span>, <span class="number">1489</span>, <span class="number">1490</span>, <span class="number">1491</span>, <span class="number">1492</span>, <span class="number">1493</span>, <span class="number">1494</span>, <span class="number">1495</span>, <span class="number">1496</span>, <span class="number">1497</span>, <span class="number">1498</span>, <span class="number">1499</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">1501</span>, <span class="number">1502</span>, <span class="number">1503</span>, <span class="number">1504</span>, <span class="number">1505</span>, <span class="number">1506</span>, <span class="number">1507</span>, <span class="number">1508</span>, <span class="number">1509</span>, <span class="number">1510</span>, <span class="number">1511</span>, <span class="number">1512</span>, <span class="number">1513</span>, <span class="number">1514</span>, <span class="number">1515</span>, <span class="number">1516</span>, <span class="number">1517</span>, <span class="number">1518</span>, <span class="number">1519</span>, <span class="number">1520</span>, <span class="number">1521</span>, <span class="number">1522</span>, <span class="number">1523</span>, <span class="number">1524</span>, <span class="number">1525</span>, <span class="number">1526</span>, <span class="number">1527</span>, <span class="number">1528</span>, <span class="number">1529</span>, <span class="number">1530</span>, <span class="number">1531</span>, <span class="number">1532</span>, <span class="number">1533</span>, <span class="number">1534</span>, <span class="number">1535</span>, <span class="number">1536</span>, <span class="number">1537</span>, <span class="number">1538</span>, <span class="number">1539</span>, <span class="number">1540</span>, <span class="number">1541</span>, <span class="number">1542</span>, <span class="number">1543</span>, <span class="number">1544</span>, <span class="number">1545</span>, <span class="number">1546</span>, <span class="number">1547</span>, <span class="number">1548</span>, <span class="number">1549</span>, <span class="number">1550</span>, <span class="number">1551</span>, <span class="number">1552</span>, <span class="number">1553</span>, <span class="number">1554</span>, <span class="number">1555</span>, <span class="number">1556</span>, <span class="number">1557</span>, <span class="number">1558</span>, <span class="number">1559</span>, <span class="number">1560</span>, <span class="number">1561</span>, <span class="number">1562</span>, <span class="number">1563</span>, <span class="number">1564</span>, <span class="number">1565</span>, <span class="number">1566</span>, <span class="number">1567</span>, <span class="number">1568</span>, <span class="number">1569</span>, <span class="number">1570</span>, <span class="number">1571</span>, <span class="number">1572</span>, <span class="number">1573</span>, <span class="number">1574</span>, <span class="number">1575</span>, <span class="number">1576</span>, <span class="number">1577</span>, <span class="number">1578</span>, <span class="number">1579</span>, <span class="number">1580</span>, <span class="number">1581</span>, <span class="number">1582</span>, <span class="number">1583</span>, <span class="number">1584</span>, <span class="number">1585</span>, <span class="number">1586</span>, <span class="number">1587</span>, <span class="number">1588</span>, <span class="number">1589</span>, <span class="number">1590</span>, <span class="number">1591</span>, <span class="number">1592</span>, <span class="number">1593</span>, <span class="number">1594</span>, <span class="number">1595</span>, <span class="number">1596</span>, <span class="number">1597</span>, <span class="number">1598</span>, <span class="number">1599</span>, <span class="number">1600</span>, <span class="number">1601</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> t7[<span class="number">3510</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">256</span>, <span class="number">257</span>, <span class="number">258</span>, <span class="number">259</span>, <span class="number">260</span>, <span class="number">261</span>, <span class="number">262</span>, <span class="number">263</span>, <span class="number">264</span>, <span class="number">265</span>, <span class="number">266</span>, <span class="number">267</span>, <span class="number">268</span>, <span class="number">269</span>, <span class="number">270</span>, <span class="number">271</span>, <span class="number">272</span>, <span class="number">273</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">287</span>, <span class="number">288</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">296</span>, <span class="number">297</span>, <span class="number">298</span>, <span class="number">299</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>, <span class="number">306</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">310</span>, <span class="number">311</span>, <span class="number">312</span>, <span class="number">313</span>, <span class="number">314</span>, <span class="number">315</span>, <span class="number">316</span>, <span class="number">317</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">321</span>, <span class="number">322</span>, <span class="number">323</span>, <span class="number">324</span>, <span class="number">325</span>, <span class="number">326</span>, <span class="number">327</span>, <span class="number">328</span>, <span class="number">329</span>, <span class="number">330</span>, <span class="number">331</span>, <span class="number">332</span>, <span class="number">333</span>, <span class="number">334</span>, <span class="number">335</span>, <span class="number">336</span>, <span class="number">337</span>, <span class="number">338</span>, <span class="number">339</span>, <span class="number">340</span>, <span class="number">341</span>, <span class="number">342</span>, <span class="number">343</span>, <span class="number">344</span>, <span class="number">345</span>, <span class="number">346</span>, <span class="number">347</span>, <span class="number">348</span>, <span class="number">349</span>, <span class="number">350</span>, <span class="number">351</span>, <span class="number">352</span>, <span class="number">353</span>, <span class="number">354</span>, <span class="number">355</span>, <span class="number">356</span>, <span class="number">357</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">361</span>, <span class="number">362</span>, <span class="number">363</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">375</span>, <span class="number">376</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">380</span>, <span class="number">381</span>, <span class="number">382</span>, <span class="number">383</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">386</span>, <span class="number">387</span>, <span class="number">388</span>, <span class="number">389</span>, <span class="number">390</span>, <span class="number">391</span>, <span class="number">392</span>, <span class="number">393</span>, <span class="number">394</span>, <span class="number">395</span>, <span class="number">396</span>, <span class="number">397</span>, <span class="number">398</span>, <span class="number">399</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="number">402</span>, <span class="number">403</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">407</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">411</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">415</span>, <span class="number">416</span>, <span class="number">417</span>, <span class="number">418</span>, <span class="number">419</span>, <span class="number">420</span>, <span class="number">421</span>, <span class="number">422</span>, <span class="number">423</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">426</span>, <span class="number">427</span>, <span class="number">428</span>, <span class="number">429</span>, <span class="number">430</span>, <span class="number">431</span>, <span class="number">432</span>, <span class="number">433</span>, <span class="number">434</span>, <span class="number">435</span>, <span class="number">436</span>, <span class="number">437</span>, <span class="number">438</span>, <span class="number">439</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">443</span>, <span class="number">444</span>, <span class="number">445</span>, <span class="number">446</span>, <span class="number">447</span>, <span class="number">448</span>, <span class="number">449</span>, <span class="number">450</span>, <span class="number">451</span>, <span class="number">452</span>, <span class="number">453</span>, <span class="number">454</span>, <span class="number">455</span>, <span class="number">456</span>, <span class="number">457</span>, <span class="number">458</span>, <span class="number">459</span>, <span class="number">460</span>, <span class="number">461</span>, <span class="number">462</span>, <span class="number">463</span>, <span class="number">464</span>, <span class="number">465</span>, <span class="number">466</span>, <span class="number">467</span>, <span class="number">468</span>, <span class="number">469</span>, <span class="number">470</span>, <span class="number">471</span>, <span class="number">472</span>, <span class="number">473</span>, <span class="number">474</span>, <span class="number">475</span>, <span class="number">476</span>, <span class="number">477</span>, <span class="number">478</span>, <span class="number">479</span>, <span class="number">480</span>, <span class="number">481</span>, <span class="number">482</span>, <span class="number">483</span>, <span class="number">484</span>, <span class="number">485</span>, <span class="number">486</span>, <span class="number">487</span>, <span class="number">488</span>, <span class="number">489</span>, <span class="number">490</span>, <span class="number">491</span>, <span class="number">492</span>, <span class="number">493</span>, <span class="number">494</span>, <span class="number">495</span>, <span class="number">496</span>, <span class="number">497</span>, <span class="number">498</span>, <span class="number">499</span>, <span class="number">500</span>, <span class="number">501</span>, <span class="number">502</span>, <span class="number">503</span>, <span class="number">504</span>, <span class="number">505</span>, <span class="number">506</span>, <span class="number">507</span>, <span class="number">508</span>, <span class="number">509</span>, <span class="number">510</span>, <span class="number">511</span>, <span class="number">512</span>, <span class="number">513</span>, <span class="number">514</span>, <span class="number">515</span>, <span class="number">516</span>, <span class="number">517</span>, <span class="number">518</span>, <span class="number">519</span>, <span class="number">520</span>, <span class="number">521</span>, <span class="number">522</span>, <span class="number">523</span>, <span class="number">524</span>, <span class="number">525</span>, <span class="number">526</span>, <span class="number">527</span>, <span class="number">528</span>, <span class="number">529</span>, <span class="number">530</span>, <span class="number">531</span>, <span class="number">532</span>, <span class="number">533</span>, <span class="number">534</span>, <span class="number">535</span>, <span class="number">536</span>, <span class="number">537</span>, <span class="number">538</span>, <span class="number">539</span>, <span class="number">540</span>, <span class="number">541</span>, <span class="number">542</span>, <span class="number">543</span>, <span class="number">544</span>, <span class="number">545</span>, <span class="number">546</span>, <span class="number">547</span>, <span class="number">548</span>, <span class="number">549</span>, <span class="number">550</span>, <span class="number">551</span>, <span class="number">552</span>, <span class="number">553</span>, <span class="number">554</span>, <span class="number">555</span>, <span class="number">556</span>, <span class="number">557</span>, <span class="number">558</span>, <span class="number">559</span>, <span class="number">560</span>, <span class="number">561</span>, <span class="number">562</span>, <span class="number">563</span>, <span class="number">564</span>, <span class="number">565</span>, <span class="number">566</span>, <span class="number">567</span>, <span class="number">568</span>, <span class="number">569</span>, <span class="number">570</span>, <span class="number">571</span>, <span class="number">572</span>, <span class="number">573</span>, <span class="number">574</span>, <span class="number">575</span>, <span class="number">576</span>, <span class="number">577</span>, <span class="number">578</span>, <span class="number">579</span>, <span class="number">580</span>, <span class="number">581</span>, <span class="number">582</span>, <span class="number">583</span>, <span class="number">584</span>, <span class="number">585</span>, <span class="number">586</span>, <span class="number">587</span>, <span class="number">588</span>, <span class="number">589</span>, <span class="number">590</span>, <span class="number">591</span>, <span class="number">592</span>, <span class="number">593</span>, <span class="number">594</span>, <span class="number">595</span>, <span class="number">596</span>, <span class="number">597</span>, <span class="number">598</span>, <span class="number">599</span>, <span class="number">600</span>, <span class="number">601</span>, <span class="number">602</span>, <span class="number">603</span>, <span class="number">604</span>, <span class="number">605</span>, <span class="number">606</span>, <span class="number">607</span>, <span class="number">608</span>, <span class="number">609</span>, <span class="number">610</span>, <span class="number">611</span>, <span class="number">612</span>, <span class="number">613</span>, <span class="number">614</span>, <span class="number">615</span>, <span class="number">616</span>, <span class="number">617</span>, <span class="number">618</span>, <span class="number">619</span>, <span class="number">620</span>, <span class="number">621</span>, <span class="number">622</span>, <span class="number">623</span>, <span class="number">624</span>, <span class="number">625</span>, <span class="number">626</span>, <span class="number">627</span>, <span class="number">628</span>, <span class="number">629</span>, <span class="number">630</span>, <span class="number">631</span>, <span class="number">632</span>, <span class="number">633</span>, <span class="number">634</span>, <span class="number">635</span>, <span class="number">636</span>, <span class="number">637</span>, <span class="number">638</span>, <span class="number">639</span>, <span class="number">640</span>, <span class="number">641</span>, <span class="number">642</span>, <span class="number">643</span>, <span class="number">644</span>, <span class="number">645</span>, <span class="number">646</span>, <span class="number">647</span>, <span class="number">648</span>, <span class="number">649</span>, <span class="number">650</span>, <span class="number">651</span>, <span class="number">652</span>, <span class="number">653</span>, <span class="number">654</span>, <span class="number">655</span>, <span class="number">656</span>, <span class="number">657</span>, <span class="number">658</span>, <span class="number">659</span>, <span class="number">660</span>, <span class="number">661</span>, <span class="number">662</span>, <span class="number">663</span>, <span class="number">664</span>, <span class="number">665</span>, <span class="number">666</span>, <span class="number">667</span>, <span class="number">668</span>, <span class="number">669</span>, <span class="number">670</span>, <span class="number">671</span>, <span class="number">672</span>, <span class="number">673</span>, <span class="number">674</span>, <span class="number">675</span>, <span class="number">676</span>, <span class="number">677</span>, <span class="number">678</span>, <span class="number">679</span>, <span class="number">680</span>, <span class="number">681</span>, <span class="number">682</span>, <span class="number">683</span>, <span class="number">684</span>, <span class="number">685</span>, <span class="number">686</span>, <span class="number">687</span>, <span class="number">688</span>, <span class="number">689</span>, <span class="number">690</span>, <span class="number">691</span>, <span class="number">692</span>, <span class="number">693</span>, <span class="number">694</span>, <span class="number">695</span>, <span class="number">696</span>, <span class="number">697</span>, <span class="number">698</span>, <span class="number">699</span>, <span class="number">700</span>, <span class="number">701</span>, <span class="number">702</span>, <span class="number">703</span>, <span class="number">704</span>, <span class="number">705</span>, <span class="number">706</span>, <span class="number">707</span>, <span class="number">708</span>, <span class="number">709</span>, <span class="number">710</span>, <span class="number">711</span>, <span class="number">712</span>, <span class="number">713</span>, <span class="number">714</span>, <span class="number">715</span>, <span class="number">716</span>, <span class="number">717</span>, <span class="number">718</span>, <span class="number">719</span>, <span class="number">720</span>, <span class="number">721</span>, <span class="number">722</span>, <span class="number">723</span>, <span class="number">724</span>, <span class="number">725</span>, <span class="number">726</span>, <span class="number">727</span>, <span class="number">728</span>, <span class="number">729</span>, <span class="number">730</span>, <span class="number">731</span>, <span class="number">732</span>, <span class="number">733</span>, <span class="number">734</span>, <span class="number">735</span>, <span class="number">736</span>, <span class="number">737</span>, <span class="number">738</span>, <span class="number">739</span>, <span class="number">740</span>, <span class="number">741</span>, <span class="number">742</span>, <span class="number">743</span>, <span class="number">744</span>, <span class="number">745</span>, <span class="number">746</span>, <span class="number">747</span>, <span class="number">748</span>, <span class="number">749</span>, <span class="number">750</span>, <span class="number">751</span>, <span class="number">752</span>, <span class="number">753</span>, <span class="number">754</span>, <span class="number">755</span>, <span class="number">756</span>, <span class="number">757</span>, <span class="number">758</span>, <span class="number">759</span>, <span class="number">760</span>, <span class="number">761</span>, <span class="number">762</span>, <span class="number">763</span>, <span class="number">764</span>, <span class="number">765</span>, <span class="number">766</span>, <span class="number">767</span>, <span class="number">768</span>, <span class="number">769</span>, <span class="number">770</span>, <span class="number">771</span>, <span class="number">772</span>, <span class="number">773</span>, <span class="number">774</span>, <span class="number">775</span>, <span class="number">776</span>, <span class="number">777</span>, <span class="number">778</span>, <span class="number">779</span>, <span class="number">780</span>, <span class="number">781</span>, <span class="number">782</span>, <span class="number">783</span>, <span class="number">784</span>, <span class="number">785</span>, <span class="number">786</span>, <span class="number">787</span>, <span class="number">788</span>, <span class="number">789</span>, <span class="number">790</span>, <span class="number">791</span>, <span class="number">792</span>, <span class="number">793</span>, <span class="number">794</span>, <span class="number">795</span>, <span class="number">796</span>, <span class="number">797</span>, <span class="number">798</span>, <span class="number">799</span>, <span class="number">800</span>, <span class="number">801</span>, <span class="number">802</span>, <span class="number">803</span>, <span class="number">804</span>, <span class="number">805</span>, <span class="number">806</span>, <span class="number">807</span>, <span class="number">808</span>, <span class="number">809</span>, <span class="number">810</span>, <span class="number">811</span>, <span class="number">812</span>, <span class="number">813</span>, <span class="number">814</span>, <span class="number">815</span>, <span class="number">816</span>, <span class="number">817</span>, <span class="number">818</span>, <span class="number">819</span>, <span class="number">820</span>, <span class="number">821</span>, <span class="number">822</span>, <span class="number">823</span>, <span class="number">824</span>, <span class="number">825</span>, <span class="number">826</span>, <span class="number">827</span>, <span class="number">828</span>, <span class="number">829</span>, <span class="number">830</span>, <span class="number">831</span>, <span class="number">832</span>, <span class="number">833</span>, <span class="number">834</span>, <span class="number">835</span>, <span class="number">836</span>, <span class="number">837</span>, <span class="number">838</span>, <span class="number">839</span>, <span class="number">840</span>, <span class="number">841</span>, <span class="number">842</span>, <span class="number">843</span>, <span class="number">844</span>, <span class="number">845</span>, <span class="number">846</span>, <span class="number">847</span>, <span class="number">848</span>, <span class="number">849</span>, <span class="number">850</span>, <span class="number">851</span>, <span class="number">852</span>, <span class="number">853</span>, <span class="number">854</span>, <span class="number">855</span>, <span class="number">856</span>, <span class="number">857</span>, <span class="number">858</span>, <span class="number">859</span>, <span class="number">860</span>, <span class="number">861</span>, <span class="number">862</span>, <span class="number">863</span>, <span class="number">864</span>, <span class="number">865</span>, <span class="number">866</span>, <span class="number">867</span>, <span class="number">868</span>, <span class="number">869</span>, <span class="number">870</span>, <span class="number">871</span>, <span class="number">872</span>, <span class="number">873</span>, <span class="number">874</span>, <span class="number">875</span>, <span class="number">876</span>, <span class="number">877</span>, <span class="number">878</span>, <span class="number">879</span>, <span class="number">880</span>, <span class="number">881</span>, <span class="number">882</span>, <span class="number">883</span>, <span class="number">884</span>, <span class="number">885</span>, <span class="number">886</span>, <span class="number">887</span>, <span class="number">888</span>, <span class="number">889</span>, <span class="number">890</span>, <span class="number">891</span>, <span class="number">892</span>, <span class="number">893</span>, <span class="number">894</span>, <span class="number">895</span>, <span class="number">896</span>, <span class="number">897</span>, <span class="number">898</span>, <span class="number">899</span>, <span class="number">900</span>, <span class="number">901</span>, <span class="number">902</span>, <span class="number">903</span>, <span class="number">904</span>, <span class="number">905</span>, <span class="number">906</span>, <span class="number">907</span>, <span class="number">908</span>, <span class="number">909</span>, <span class="number">910</span>, <span class="number">911</span>, <span class="number">912</span>, <span class="number">913</span>, <span class="number">914</span>, <span class="number">915</span>, <span class="number">916</span>, <span class="number">917</span>, <span class="number">918</span>, <span class="number">919</span>, <span class="number">920</span>, <span class="number">921</span>, <span class="number">922</span>, <span class="number">923</span>, <span class="number">924</span>, <span class="number">925</span>, <span class="number">926</span>, <span class="number">927</span>, <span class="number">928</span>, <span class="number">929</span>, <span class="number">930</span>, <span class="number">931</span>, <span class="number">932</span>, <span class="number">933</span>, <span class="number">934</span>, <span class="number">935</span>, <span class="number">936</span>, <span class="number">937</span>, <span class="number">938</span>, <span class="number">939</span>, <span class="number">940</span>, <span class="number">941</span>, <span class="number">942</span>, <span class="number">943</span>, <span class="number">944</span>, <span class="number">945</span>, <span class="number">946</span>, <span class="number">947</span>, <span class="number">948</span>, <span class="number">949</span>, <span class="number">950</span>, <span class="number">951</span>, <span class="number">952</span>, <span class="number">953</span>, <span class="number">954</span>, <span class="number">955</span>, <span class="number">956</span>, <span class="number">957</span>, <span class="number">958</span>, <span class="number">959</span>, <span class="number">960</span>, <span class="number">961</span>, <span class="number">962</span>, <span class="number">963</span>, <span class="number">964</span>, <span class="number">965</span>, <span class="number">966</span>, <span class="number">967</span>, <span class="number">968</span>, <span class="number">969</span>, <span class="number">970</span>, <span class="number">971</span>, <span class="number">972</span>, <span class="number">973</span>, <span class="number">974</span>, <span class="number">975</span>, <span class="number">976</span>, <span class="number">977</span>, <span class="number">978</span>, <span class="number">979</span>, <span class="number">980</span>, <span class="number">981</span>, <span class="number">982</span>, <span class="number">983</span>, <span class="number">984</span>, <span class="number">985</span>, <span class="number">986</span>, <span class="number">987</span>, <span class="number">988</span>, <span class="number">989</span>, <span class="number">990</span>, <span class="number">991</span>, <span class="number">992</span>, <span class="number">993</span>, <span class="number">994</span>, <span class="number">995</span>, <span class="number">996</span>, <span class="number">997</span>, <span class="number">998</span>, <span class="number">999</span>, <span class="number">1000</span>, <span class="number">1002</span>, <span class="number">1004</span>, <span class="number">1006</span>, <span class="number">1008</span>, <span class="number">1010</span>, <span class="number">1012</span>, <span class="number">1014</span>, <span class="number">1016</span>, <span class="number">1018</span>, <span class="number">1020</span>, <span class="number">1022</span>, <span class="number">1024</span>, <span class="number">1026</span>, <span class="number">1028</span>, <span class="number">1030</span>, <span class="number">1032</span>, <span class="number">1034</span>, <span class="number">1036</span>, <span class="number">1038</span>, <span class="number">1040</span>, <span class="number">1042</span>, <span class="number">1044</span>, <span class="number">1046</span>, <span class="number">1048</span>, <span class="number">1050</span>, <span class="number">1052</span>, <span class="number">1054</span>, <span class="number">1056</span>, <span class="number">1058</span>, <span class="number">1060</span>, <span class="number">1062</span>, <span class="number">1064</span>, <span class="number">1066</span>, <span class="number">1068</span>, <span class="number">1070</span>, <span class="number">1072</span>, <span class="number">1074</span>, <span class="number">1076</span>, <span class="number">1078</span>, <span class="number">1080</span>, <span class="number">1082</span>, <span class="number">1084</span>, <span class="number">1086</span>, <span class="number">1088</span>, <span class="number">1090</span>, <span class="number">1092</span>, <span class="number">1094</span>, <span class="number">1096</span>, <span class="number">1098</span>, <span class="number">1100</span>, <span class="number">1102</span>, <span class="number">1104</span>, <span class="number">1106</span>, <span class="number">1108</span>, <span class="number">1110</span>, <span class="number">1112</span>, <span class="number">1114</span>, <span class="number">1116</span>, <span class="number">1118</span>, <span class="number">1120</span>, <span class="number">1122</span>, <span class="number">1124</span>, <span class="number">1126</span>, <span class="number">1128</span>, <span class="number">1130</span>, <span class="number">1132</span>, <span class="number">1134</span>, <span class="number">1136</span>, <span class="number">1138</span>, <span class="number">1140</span>, <span class="number">1142</span>, <span class="number">1144</span>, <span class="number">1146</span>, <span class="number">1148</span>, <span class="number">1150</span>, <span class="number">1152</span>, <span class="number">1154</span>, <span class="number">1156</span>, <span class="number">1158</span>, <span class="number">1160</span>, <span class="number">1162</span>, <span class="number">1164</span>, <span class="number">1166</span>, <span class="number">1168</span>, <span class="number">1170</span>, <span class="number">1172</span>, <span class="number">1174</span>, <span class="number">1176</span>, <span class="number">1178</span>, <span class="number">1180</span>, <span class="number">1182</span>, <span class="number">1184</span>, <span class="number">1186</span>, <span class="number">1188</span>, <span class="number">1190</span>, <span class="number">1192</span>, <span class="number">1194</span>, <span class="number">1196</span>, <span class="number">1198</span>, <span class="number">1200</span>, <span class="number">1202</span>, <span class="number">1204</span>, <span class="number">1206</span>, <span class="number">1208</span>, <span class="number">1210</span>, <span class="number">1212</span>, <span class="number">1214</span>, <span class="number">1216</span>, <span class="number">1218</span>, <span class="number">1220</span>, <span class="number">1222</span>, <span class="number">1224</span>, <span class="number">1226</span>, <span class="number">1228</span>, <span class="number">1230</span>, <span class="number">1232</span>, <span class="number">1234</span>, <span class="number">1236</span>, <span class="number">1238</span>, <span class="number">1240</span>, <span class="number">1242</span>, <span class="number">1244</span>, <span class="number">1246</span>, <span class="number">1248</span>, <span class="number">1250</span>, <span class="number">1252</span>, <span class="number">1254</span>, <span class="number">1256</span>, <span class="number">1258</span>, <span class="number">1260</span>, <span class="number">1262</span>, <span class="number">1264</span>, <span class="number">1266</span>, <span class="number">1268</span>, <span class="number">1270</span>, <span class="number">1272</span>, <span class="number">1274</span>, <span class="number">1276</span>, <span class="number">1278</span>, <span class="number">1280</span>, <span class="number">1282</span>, <span class="number">1284</span>, <span class="number">1286</span>, <span class="number">1288</span>, <span class="number">1290</span>, <span class="number">1292</span>, <span class="number">1294</span>, <span class="number">1296</span>, <span class="number">1298</span>, <span class="number">1300</span>, <span class="number">1302</span>, <span class="number">1304</span>, <span class="number">1306</span>, <span class="number">1308</span>, <span class="number">1310</span>, <span class="number">1312</span>, <span class="number">1314</span>, <span class="number">1316</span>, <span class="number">1318</span>, <span class="number">1320</span>, <span class="number">1322</span>, <span class="number">1324</span>, <span class="number">1326</span>, <span class="number">1328</span>, <span class="number">1330</span>, <span class="number">1332</span>, <span class="number">1334</span>, <span class="number">1336</span>, <span class="number">1338</span>, <span class="number">1340</span>, <span class="number">1342</span>, <span class="number">1344</span>, <span class="number">1346</span>, <span class="number">1348</span>, <span class="number">1350</span>, <span class="number">1352</span>, <span class="number">1354</span>, <span class="number">1356</span>, <span class="number">1358</span>, <span class="number">1360</span>, <span class="number">1362</span>, <span class="number">1364</span>, <span class="number">1366</span>, <span class="number">1368</span>, <span class="number">1370</span>, <span class="number">1372</span>, <span class="number">1374</span>, <span class="number">1376</span>, <span class="number">1378</span>, <span class="number">1380</span>, <span class="number">1382</span>, <span class="number">1384</span>, <span class="number">1386</span>, <span class="number">1388</span>, <span class="number">1390</span>, <span class="number">1392</span>, <span class="number">1394</span>, <span class="number">1396</span>, <span class="number">1398</span>, <span class="number">1400</span>, <span class="number">1402</span>, <span class="number">1404</span>, <span class="number">1406</span>, <span class="number">1408</span>, <span class="number">1410</span>, <span class="number">1412</span>, <span class="number">1414</span>, <span class="number">1416</span>, <span class="number">1418</span>, <span class="number">1420</span>, <span class="number">1422</span>, <span class="number">1424</span>, <span class="number">1426</span>, <span class="number">1428</span>, <span class="number">1430</span>, <span class="number">1432</span>, <span class="number">1434</span>, <span class="number">1436</span>, <span class="number">1438</span>, <span class="number">1440</span>, <span class="number">1442</span>, <span class="number">1444</span>, <span class="number">1446</span>, <span class="number">1448</span>, <span class="number">1450</span>, <span class="number">1452</span>, <span class="number">1454</span>, <span class="number">1456</span>, <span class="number">1458</span>, <span class="number">1460</span>, <span class="number">1462</span>, <span class="number">1464</span>, <span class="number">1466</span>, <span class="number">1468</span>, <span class="number">1470</span>, <span class="number">1472</span>, <span class="number">1474</span>, <span class="number">1476</span>, <span class="number">1478</span>, <span class="number">1480</span>, <span class="number">1482</span>, <span class="number">1484</span>, <span class="number">1486</span>, <span class="number">1488</span>, <span class="number">1490</span>, <span class="number">1492</span>, <span class="number">1494</span>, <span class="number">1496</span>, <span class="number">1498</span>, <span class="number">1500</span>, <span class="number">1502</span>, <span class="number">1504</span>, <span class="number">1506</span>, <span class="number">1508</span>, <span class="number">1510</span>, <span class="number">1512</span>, <span class="number">1514</span>, <span class="number">1516</span>, <span class="number">1518</span>, <span class="number">1520</span>, <span class="number">1522</span>, <span class="number">1524</span>, <span class="number">1526</span>, <span class="number">1528</span>, <span class="number">1530</span>, <span class="number">1532</span>, <span class="number">1534</span>, <span class="number">1536</span>, <span class="number">1538</span>, <span class="number">1540</span>, <span class="number">1542</span>, <span class="number">1544</span>, <span class="number">1546</span>, <span class="number">1548</span>, <span class="number">1550</span>, <span class="number">1552</span>, <span class="number">1554</span>, <span class="number">1556</span>, <span class="number">1558</span>, <span class="number">1560</span>, <span class="number">1562</span>, <span class="number">1564</span>, <span class="number">1566</span>, <span class="number">1568</span>, <span class="number">1570</span>, <span class="number">1572</span>, <span class="number">1574</span>, <span class="number">1576</span>, <span class="number">1578</span>, <span class="number">1580</span>, <span class="number">1582</span>, <span class="number">1584</span>, <span class="number">1586</span>, <span class="number">1588</span>, <span class="number">1590</span>, <span class="number">1592</span>, <span class="number">1594</span>, <span class="number">1596</span>, <span class="number">1598</span>, <span class="number">1600</span>, <span class="number">1602</span>, <span class="number">1604</span>, <span class="number">1606</span>, <span class="number">1608</span>, <span class="number">1610</span>, <span class="number">1612</span>, <span class="number">1614</span>, <span class="number">1616</span>, <span class="number">1618</span>, <span class="number">1620</span>, <span class="number">1622</span>, <span class="number">1624</span>, <span class="number">1626</span>, <span class="number">1628</span>, <span class="number">1630</span>, <span class="number">1632</span>, <span class="number">1634</span>, <span class="number">1636</span>, <span class="number">1638</span>, <span class="number">1640</span>, <span class="number">1642</span>, <span class="number">1644</span>, <span class="number">1646</span>, <span class="number">1648</span>, <span class="number">1650</span>, <span class="number">1652</span>, <span class="number">1654</span>, <span class="number">1656</span>, <span class="number">1658</span>, <span class="number">1660</span>, <span class="number">1662</span>, <span class="number">1664</span>, <span class="number">1666</span>, <span class="number">1668</span>, <span class="number">1670</span>, <span class="number">1672</span>, <span class="number">1674</span>, <span class="number">1676</span>, <span class="number">1678</span>, <span class="number">1680</span>, <span class="number">1682</span>, <span class="number">1684</span>, <span class="number">1686</span>, <span class="number">1688</span>, <span class="number">1690</span>, <span class="number">1692</span>, <span class="number">1694</span>, <span class="number">1696</span>, <span class="number">1698</span>, <span class="number">1700</span>, <span class="number">1702</span>, <span class="number">1704</span>, <span class="number">1706</span>, <span class="number">1708</span>, <span class="number">1710</span>, <span class="number">1712</span>, <span class="number">1714</span>, <span class="number">1716</span>, <span class="number">1718</span>, <span class="number">1720</span>, <span class="number">1722</span>, <span class="number">1724</span>, <span class="number">1726</span>, <span class="number">1728</span>, <span class="number">1730</span>, <span class="number">1732</span>, <span class="number">1734</span>, <span class="number">1736</span>, <span class="number">1738</span>, <span class="number">1740</span>, <span class="number">1742</span>, <span class="number">1744</span>, <span class="number">1746</span>, <span class="number">1748</span>, <span class="number">1750</span>, <span class="number">1752</span>, <span class="number">1754</span>, <span class="number">1756</span>, <span class="number">1758</span>, <span class="number">1760</span>, <span class="number">1762</span>, <span class="number">1764</span>, <span class="number">1766</span>, <span class="number">1768</span>, <span class="number">1770</span>, <span class="number">1772</span>, <span class="number">1774</span>, <span class="number">1776</span>, <span class="number">1778</span>, <span class="number">1780</span>, <span class="number">1782</span>, <span class="number">1784</span>, <span class="number">1786</span>, <span class="number">1788</span>, <span class="number">1790</span>, <span class="number">1792</span>, <span class="number">1794</span>, <span class="number">1796</span>, <span class="number">1798</span>, <span class="number">1800</span>, <span class="number">1802</span>, <span class="number">1804</span>, <span class="number">1806</span>, <span class="number">1808</span>, <span class="number">1810</span>, <span class="number">1812</span>, <span class="number">1814</span>, <span class="number">1816</span>, <span class="number">1818</span>, <span class="number">1820</span>, <span class="number">1822</span>, <span class="number">1824</span>, <span class="number">1826</span>, <span class="number">1828</span>, <span class="number">1830</span>, <span class="number">1832</span>, <span class="number">1834</span>, <span class="number">1836</span>, <span class="number">1838</span>, <span class="number">1840</span>, <span class="number">1842</span>, <span class="number">1844</span>, <span class="number">1846</span>, <span class="number">1848</span>, <span class="number">1850</span>, <span class="number">1852</span>, <span class="number">1854</span>, <span class="number">1856</span>, <span class="number">1858</span>, <span class="number">1860</span>, <span class="number">1862</span>, <span class="number">1864</span>, <span class="number">1866</span>, <span class="number">1868</span>, <span class="number">1870</span>, <span class="number">1872</span>, <span class="number">1874</span>, <span class="number">1876</span>, <span class="number">1878</span>, <span class="number">1880</span>, <span class="number">1882</span>, <span class="number">1884</span>, <span class="number">1886</span>, <span class="number">1888</span>, <span class="number">1890</span>, <span class="number">1892</span>, <span class="number">1894</span>, <span class="number">1896</span>, <span class="number">1898</span>, <span class="number">1900</span>, <span class="number">1902</span>, <span class="number">1904</span>, <span class="number">1906</span>, <span class="number">1908</span>, <span class="number">1910</span>, <span class="number">1912</span>, <span class="number">1914</span>, <span class="number">1916</span>, <span class="number">1918</span>, <span class="number">1920</span>, <span class="number">1922</span>, <span class="number">1924</span>, <span class="number">1926</span>, <span class="number">1928</span>, <span class="number">1930</span>, <span class="number">1932</span>, <span class="number">1934</span>, <span class="number">1936</span>, <span class="number">1938</span>, <span class="number">1940</span>, <span class="number">1942</span>, <span class="number">1944</span>, <span class="number">1946</span>, <span class="number">1948</span>, <span class="number">1950</span>, <span class="number">1952</span>, <span class="number">1954</span>, <span class="number">1956</span>, <span class="number">1958</span>, <span class="number">1960</span>, <span class="number">1962</span>, <span class="number">1964</span>, <span class="number">1966</span>, <span class="number">1968</span>, <span class="number">1970</span>, <span class="number">1972</span>, <span class="number">1974</span>, <span class="number">1976</span>, <span class="number">1978</span>, <span class="number">1980</span>, <span class="number">1982</span>, <span class="number">1984</span>, <span class="number">1986</span>, <span class="number">1988</span>, <span class="number">1990</span>, <span class="number">1992</span>, <span class="number">1994</span>, <span class="number">1996</span>, <span class="number">1998</span>, <span class="number">2000</span>, <span class="number">2002</span>, <span class="number">2004</span>, <span class="number">2006</span>, <span class="number">2008</span>, <span class="number">2010</span>, <span class="number">2012</span>, <span class="number">2014</span>, <span class="number">2016</span>, <span class="number">2018</span>, <span class="number">2020</span>, <span class="number">2022</span>, <span class="number">2024</span>, <span class="number">2026</span>, <span class="number">2028</span>, <span class="number">2030</span>, <span class="number">2032</span>, <span class="number">2034</span>, <span class="number">2036</span>, <span class="number">2038</span>, <span class="number">2040</span>, <span class="number">2042</span>, <span class="number">2044</span>, <span class="number">2046</span>, <span class="number">2048</span>, <span class="number">2050</span>, <span class="number">2052</span>, <span class="number">2054</span>, <span class="number">2056</span>, <span class="number">2058</span>, <span class="number">2060</span>, <span class="number">2062</span>, <span class="number">2064</span>, <span class="number">2066</span>, <span class="number">2068</span>, <span class="number">2070</span>, <span class="number">2072</span>, <span class="number">2074</span>, <span class="number">2076</span>, <span class="number">2078</span>, <span class="number">2080</span>, <span class="number">2082</span>, <span class="number">2084</span>, <span class="number">2086</span>, <span class="number">2088</span>, <span class="number">2090</span>, <span class="number">2092</span>, <span class="number">2094</span>, <span class="number">2096</span>, <span class="number">2098</span>, <span class="number">2100</span>, <span class="number">2102</span>, <span class="number">2104</span>, <span class="number">2106</span>, <span class="number">2108</span>, <span class="number">2110</span>, <span class="number">2112</span>, <span class="number">2114</span>, <span class="number">2116</span>, <span class="number">2118</span>, <span class="number">2120</span>, <span class="number">2122</span>, <span class="number">2124</span>, <span class="number">2126</span>, <span class="number">2128</span>, <span class="number">2130</span>, <span class="number">2132</span>, <span class="number">2134</span>, <span class="number">2136</span>, <span class="number">2138</span>, <span class="number">2140</span>, <span class="number">2142</span>, <span class="number">2144</span>, <span class="number">2146</span>, <span class="number">2148</span>, <span class="number">2150</span>, <span class="number">2152</span>, <span class="number">2154</span>, <span class="number">2156</span>, <span class="number">2158</span>, <span class="number">2160</span>, <span class="number">2162</span>, <span class="number">2164</span>, <span class="number">2166</span>, <span class="number">2168</span>, <span class="number">2170</span>, <span class="number">2172</span>, <span class="number">2174</span>, <span class="number">2176</span>, <span class="number">2178</span>, <span class="number">2180</span>, <span class="number">2182</span>, <span class="number">2184</span>, <span class="number">2186</span>, <span class="number">2188</span>, <span class="number">2190</span>, <span class="number">2192</span>, <span class="number">2194</span>, <span class="number">2196</span>, <span class="number">2198</span>, <span class="number">2200</span>, <span class="number">2202</span>, <span class="number">2204</span>, <span class="number">2206</span>, <span class="number">2208</span>, <span class="number">2210</span>, <span class="number">2212</span>, <span class="number">2214</span>, <span class="number">2216</span>, <span class="number">2218</span>, <span class="number">2220</span>, <span class="number">2222</span>, <span class="number">2224</span>, <span class="number">2226</span>, <span class="number">2228</span>, <span class="number">2230</span>, <span class="number">2232</span>, <span class="number">2234</span>, <span class="number">2236</span>, <span class="number">2238</span>, <span class="number">2240</span>, <span class="number">2242</span>, <span class="number">2244</span>, <span class="number">2246</span>, <span class="number">2248</span>, <span class="number">2250</span>, <span class="number">2252</span>, <span class="number">2254</span>, <span class="number">2256</span>, <span class="number">2258</span>, <span class="number">2260</span>, <span class="number">2262</span>, <span class="number">2264</span>, <span class="number">2266</span>, <span class="number">2268</span>, <span class="number">2270</span>, <span class="number">2272</span>, <span class="number">2274</span>, <span class="number">2276</span>, <span class="number">2278</span>, <span class="number">2280</span>, <span class="number">2282</span>, <span class="number">2284</span>, <span class="number">2286</span>, <span class="number">2288</span>, <span class="number">2290</span>, <span class="number">2292</span>, <span class="number">2294</span>, <span class="number">2296</span>, <span class="number">2298</span>, <span class="number">2300</span>, <span class="number">2302</span>, <span class="number">2304</span>, <span class="number">2306</span>, <span class="number">2308</span>, <span class="number">2310</span>, <span class="number">2312</span>, <span class="number">2314</span>, <span class="number">2316</span>, <span class="number">2318</span>, <span class="number">2320</span>, <span class="number">2322</span>, <span class="number">2324</span>, <span class="number">2326</span>, <span class="number">2328</span>, <span class="number">2330</span>, <span class="number">2332</span>, <span class="number">2334</span>, <span class="number">2336</span>, <span class="number">2338</span>, <span class="number">2340</span>, <span class="number">2342</span>, <span class="number">2344</span>, <span class="number">2346</span>, <span class="number">2348</span>, <span class="number">2350</span>, <span class="number">2352</span>, <span class="number">2354</span>, <span class="number">2356</span>, <span class="number">2358</span>, <span class="number">2360</span>, <span class="number">2362</span>, <span class="number">2364</span>, <span class="number">2366</span>, <span class="number">2368</span>, <span class="number">2370</span>, <span class="number">2372</span>, <span class="number">2374</span>, <span class="number">2376</span>, <span class="number">2378</span>, <span class="number">2380</span>, <span class="number">2382</span>, <span class="number">2384</span>, <span class="number">2386</span>, <span class="number">2388</span>, <span class="number">2390</span>, <span class="number">2392</span>, <span class="number">2394</span>, <span class="number">2396</span>, <span class="number">2398</span>, <span class="number">2400</span>, <span class="number">2402</span>, <span class="number">2404</span>, <span class="number">2406</span>, <span class="number">2408</span>, <span class="number">2410</span>, <span class="number">2412</span>, <span class="number">2414</span>, <span class="number">2416</span>, <span class="number">2418</span>, <span class="number">2420</span>, <span class="number">2422</span>, <span class="number">2424</span>, <span class="number">2426</span>, <span class="number">2428</span>, <span class="number">2430</span>, <span class="number">2432</span>, <span class="number">2434</span>, <span class="number">2436</span>, <span class="number">2438</span>, <span class="number">2440</span>, <span class="number">2442</span>, <span class="number">2444</span>, <span class="number">2446</span>, <span class="number">2448</span>, <span class="number">2450</span>, <span class="number">2452</span>, <span class="number">2454</span>, <span class="number">2456</span>, <span class="number">2458</span>, <span class="number">2460</span>, <span class="number">2462</span>, <span class="number">2464</span>, <span class="number">2466</span>, <span class="number">2468</span>, <span class="number">2470</span>, <span class="number">2472</span>, <span class="number">2474</span>, <span class="number">2476</span>, <span class="number">2478</span>, <span class="number">2480</span>, <span class="number">2482</span>, <span class="number">2484</span>, <span class="number">2486</span>, <span class="number">2488</span>, <span class="number">2490</span>, <span class="number">2492</span>, <span class="number">2494</span>, <span class="number">2496</span>, <span class="number">2498</span>, <span class="number">2500</span>, <span class="number">2502</span>, <span class="number">2504</span>, <span class="number">2506</span>, <span class="number">2508</span>, <span class="number">2510</span>, <span class="number">2512</span>, <span class="number">2514</span>, <span class="number">2516</span>, <span class="number">2518</span>, <span class="number">2520</span>, <span class="number">2522</span>, <span class="number">2524</span>, <span class="number">2526</span>, <span class="number">2528</span>, <span class="number">2530</span>, <span class="number">2532</span>, <span class="number">2534</span>, <span class="number">2536</span>, <span class="number">2538</span>, <span class="number">2540</span>, <span class="number">2542</span>, <span class="number">2544</span>, <span class="number">2546</span>, <span class="number">2548</span>, <span class="number">2550</span>, <span class="number">2552</span>, <span class="number">2554</span>, <span class="number">2556</span>, <span class="number">2558</span>, <span class="number">2560</span>, <span class="number">2562</span>, <span class="number">2564</span>, <span class="number">2566</span>, <span class="number">2568</span>, <span class="number">2570</span>, <span class="number">2572</span>, <span class="number">2574</span>, <span class="number">2576</span>, <span class="number">2578</span>, <span class="number">2580</span>, <span class="number">2582</span>, <span class="number">2584</span>, <span class="number">2586</span>, <span class="number">2588</span>, <span class="number">2590</span>, <span class="number">2592</span>, <span class="number">2594</span>, <span class="number">2596</span>, <span class="number">2598</span>, <span class="number">2600</span>, <span class="number">2602</span>, <span class="number">2604</span>, <span class="number">2606</span>, <span class="number">2608</span>, <span class="number">2610</span>, <span class="number">2612</span>, <span class="number">2614</span>, <span class="number">2616</span>, <span class="number">2618</span>, <span class="number">2620</span>, <span class="number">2622</span>, <span class="number">2624</span>, <span class="number">2626</span>, <span class="number">2628</span>, <span class="number">2630</span>, <span class="number">2632</span>, <span class="number">2634</span>, <span class="number">2636</span>, <span class="number">2638</span>, <span class="number">2640</span>, <span class="number">2642</span>, <span class="number">2644</span>, <span class="number">2646</span>, <span class="number">2648</span>, <span class="number">2650</span>, <span class="number">2652</span>, <span class="number">2654</span>, <span class="number">2656</span>, <span class="number">2658</span>, <span class="number">2660</span>, <span class="number">2662</span>, <span class="number">2664</span>, <span class="number">2666</span>, <span class="number">2668</span>, <span class="number">2670</span>, <span class="number">2672</span>, <span class="number">2674</span>, <span class="number">2676</span>, <span class="number">2678</span>, <span class="number">2680</span>, <span class="number">2682</span>, <span class="number">2684</span>, <span class="number">2686</span>, <span class="number">2688</span>, <span class="number">2690</span>, <span class="number">2692</span>, <span class="number">2694</span>, <span class="number">2696</span>, <span class="number">2698</span>, <span class="number">2700</span>, <span class="number">2702</span>, <span class="number">2704</span>, <span class="number">2706</span>, <span class="number">2708</span>, <span class="number">2710</span>, <span class="number">2712</span>, <span class="number">2714</span>, <span class="number">2716</span>, <span class="number">2718</span>, <span class="number">2720</span>, <span class="number">2722</span>, <span class="number">2724</span>, <span class="number">2726</span>, <span class="number">2728</span>, <span class="number">2730</span>, <span class="number">2732</span>, <span class="number">2734</span>, <span class="number">2736</span>, <span class="number">2738</span>, <span class="number">2740</span>, <span class="number">2742</span>, <span class="number">2744</span>, <span class="number">2746</span>, <span class="number">2748</span>, <span class="number">2750</span>, <span class="number">2752</span>, <span class="number">2754</span>, <span class="number">2756</span>, <span class="number">2758</span>, <span class="number">2760</span>, <span class="number">2762</span>, <span class="number">2764</span>, <span class="number">2766</span>, <span class="number">2768</span>, <span class="number">2770</span>, <span class="number">2772</span>, <span class="number">2774</span>, <span class="number">2776</span>, <span class="number">2778</span>, <span class="number">2780</span>, <span class="number">2782</span>, <span class="number">2784</span>, <span class="number">2786</span>, <span class="number">2788</span>, <span class="number">2790</span>, <span class="number">2792</span>, <span class="number">2794</span>, <span class="number">2796</span>, <span class="number">2798</span>, <span class="number">2800</span>, <span class="number">2802</span>, <span class="number">2804</span>, <span class="number">2806</span>, <span class="number">2808</span>, <span class="number">2810</span>, <span class="number">2812</span>, <span class="number">2814</span>, <span class="number">2816</span>, <span class="number">2818</span>, <span class="number">2820</span>, <span class="number">2822</span>, <span class="number">2824</span>, <span class="number">2826</span>, <span class="number">2828</span>, <span class="number">2830</span>, <span class="number">2832</span>, <span class="number">2834</span>, <span class="number">2836</span>, <span class="number">2838</span>, <span class="number">2840</span>, <span class="number">2842</span>, <span class="number">2844</span>, <span class="number">2846</span>, <span class="number">2848</span>, <span class="number">2850</span>, <span class="number">2852</span>, <span class="number">2854</span>, <span class="number">2856</span>, <span class="number">2858</span>, <span class="number">2860</span>, <span class="number">2862</span>, <span class="number">2864</span>, <span class="number">2866</span>, <span class="number">2868</span>, <span class="number">2870</span>, <span class="number">2872</span>, <span class="number">2874</span>, <span class="number">2876</span>, <span class="number">2878</span>, <span class="number">2880</span>, <span class="number">2882</span>, <span class="number">2884</span>, <span class="number">2886</span>, <span class="number">2888</span>, <span class="number">2890</span>, <span class="number">2892</span>, <span class="number">2894</span>, <span class="number">2896</span>, <span class="number">2898</span>, <span class="number">2900</span>, <span class="number">2902</span>, <span class="number">2904</span>, <span class="number">2906</span>, <span class="number">2908</span>, <span class="number">2910</span>, <span class="number">2912</span>, <span class="number">2914</span>, <span class="number">2916</span>, <span class="number">2918</span>, <span class="number">2920</span>, <span class="number">2922</span>, <span class="number">2924</span>, <span class="number">2926</span>, <span class="number">2928</span>, <span class="number">2930</span>, <span class="number">2932</span>, <span class="number">2934</span>, <span class="number">2936</span>, <span class="number">2938</span>, <span class="number">2940</span>, <span class="number">2942</span>, <span class="number">2944</span>, <span class="number">2946</span>, <span class="number">2948</span>, <span class="number">2950</span>, <span class="number">2952</span>, <span class="number">2954</span>, <span class="number">2956</span>, <span class="number">2958</span>, <span class="number">2960</span>, <span class="number">2962</span>, <span class="number">2964</span>, <span class="number">2966</span>, <span class="number">2968</span>, <span class="number">2970</span>, <span class="number">2972</span>, <span class="number">2974</span>, <span class="number">2976</span>, <span class="number">2978</span>, <span class="number">2980</span>, <span class="number">2982</span>, <span class="number">2984</span>, <span class="number">2986</span>, <span class="number">2988</span>, <span class="number">2990</span>, <span class="number">2992</span>, <span class="number">2994</span>, <span class="number">2996</span>, <span class="number">2998</span>, <span class="number">3000</span>, <span class="number">3003</span>, <span class="number">3006</span>, <span class="number">3009</span>, <span class="number">3012</span>, <span class="number">3015</span>, <span class="number">3018</span>, <span class="number">3021</span>, <span class="number">3024</span>, <span class="number">3027</span>, <span class="number">3030</span>, <span class="number">3033</span>, <span class="number">3036</span>, <span class="number">3039</span>, <span class="number">3042</span>, <span class="number">3045</span>, <span class="number">3048</span>, <span class="number">3051</span>, <span class="number">3054</span>, <span class="number">3057</span>, <span class="number">3060</span>, <span class="number">3063</span>, <span class="number">3066</span>, <span class="number">3069</span>, <span class="number">3072</span>, <span class="number">3075</span>, <span class="number">3078</span>, <span class="number">3081</span>, <span class="number">3084</span>, <span class="number">3087</span>, <span class="number">3090</span>, <span class="number">3093</span>, <span class="number">3096</span>, <span class="number">3099</span>, <span class="number">3102</span>, <span class="number">3105</span>, <span class="number">3108</span>, <span class="number">3111</span>, <span class="number">3114</span>, <span class="number">3117</span>, <span class="number">3120</span>, <span class="number">3123</span>, <span class="number">3126</span>, <span class="number">3129</span>, <span class="number">3132</span>, <span class="number">3135</span>, <span class="number">3138</span>, <span class="number">3141</span>, <span class="number">3144</span>, <span class="number">3147</span>, <span class="number">3150</span>, <span class="number">3153</span>, <span class="number">3156</span>, <span class="number">3159</span>, <span class="number">3162</span>, <span class="number">3165</span>, <span class="number">3168</span>, <span class="number">3171</span>, <span class="number">3174</span>, <span class="number">3177</span>, <span class="number">3180</span>, <span class="number">3183</span>, <span class="number">3186</span>, <span class="number">3189</span>, <span class="number">3192</span>, <span class="number">3195</span>, <span class="number">3198</span>, <span class="number">3201</span>, <span class="number">3204</span>, <span class="number">3207</span>, <span class="number">3210</span>, <span class="number">3213</span>, <span class="number">3216</span>, <span class="number">3219</span>, <span class="number">3222</span>, <span class="number">3225</span>, <span class="number">3228</span>, <span class="number">3231</span>, <span class="number">3234</span>, <span class="number">3237</span>, <span class="number">3240</span>, <span class="number">3243</span>, <span class="number">3246</span>, <span class="number">3249</span>, <span class="number">3252</span>, <span class="number">3255</span>, <span class="number">3258</span>, <span class="number">3261</span>, <span class="number">3264</span>, <span class="number">3267</span>, <span class="number">3270</span>, <span class="number">3273</span>, <span class="number">3276</span>, <span class="number">3279</span>, <span class="number">3282</span>, <span class="number">3285</span>, <span class="number">3288</span>, <span class="number">3291</span>, <span class="number">3294</span>, <span class="number">3297</span>, <span class="number">3300</span>, <span class="number">3303</span>, <span class="number">3306</span>, <span class="number">3309</span>, <span class="number">3312</span>, <span class="number">3315</span>, <span class="number">3318</span>, <span class="number">3321</span>, <span class="number">3324</span>, <span class="number">3327</span>, <span class="number">3330</span>, <span class="number">3333</span>, <span class="number">3336</span>, <span class="number">3339</span>, <span class="number">3342</span>, <span class="number">3345</span>, <span class="number">3348</span>, <span class="number">3351</span>, <span class="number">3354</span>, <span class="number">3357</span>, <span class="number">3360</span>, <span class="number">3363</span>, <span class="number">3366</span>, <span class="number">3369</span>, <span class="number">3372</span>, <span class="number">3375</span>, <span class="number">3378</span>, <span class="number">3381</span>, <span class="number">3384</span>, <span class="number">3387</span>, <span class="number">3390</span>, <span class="number">3393</span>, <span class="number">3396</span>, <span class="number">3399</span>, <span class="number">3402</span>, <span class="number">3405</span>, <span class="number">3408</span>, <span class="number">3411</span>, <span class="number">3414</span>, <span class="number">3417</span>, <span class="number">3420</span>, <span class="number">3423</span>, <span class="number">3426</span>, <span class="number">3429</span>, <span class="number">3432</span>, <span class="number">3435</span>, <span class="number">3438</span>, <span class="number">3441</span>, <span class="number">3444</span>, <span class="number">3447</span>, <span class="number">3450</span>, <span class="number">3453</span>, <span class="number">3456</span>, <span class="number">3459</span>, <span class="number">3462</span>, <span class="number">3465</span>, <span class="number">3468</span>, <span class="number">3471</span>, <span class="number">3474</span>, <span class="number">3477</span>, <span class="number">3480</span>, <span class="number">3483</span>, <span class="number">3486</span>, <span class="number">3489</span>, <span class="number">3492</span>, <span class="number">3495</span>, <span class="number">3498</span>, <span class="number">3501</span>, <span class="number">3504</span>, <span class="number">3507</span>, <span class="number">3510</span>, <span class="number">3513</span>, <span class="number">3516</span>, <span class="number">3519</span>, <span class="number">3522</span>, <span class="number">3525</span>, <span class="number">3528</span>, <span class="number">3531</span>, <span class="number">3534</span>, <span class="number">3537</span>, <span class="number">3540</span>, <span class="number">3543</span>, <span class="number">3546</span>, <span class="number">3549</span>, <span class="number">3552</span>, <span class="number">3555</span>, <span class="number">3558</span>, <span class="number">3561</span>, <span class="number">3564</span>, <span class="number">3567</span>, <span class="number">3570</span>, <span class="number">3573</span>, <span class="number">3576</span>, <span class="number">3579</span>, <span class="number">3582</span>, <span class="number">3585</span>, <span class="number">3588</span>, <span class="number">3591</span>, <span class="number">3594</span>, <span class="number">3597</span>, <span class="number">3600</span>, <span class="number">3603</span>, <span class="number">3606</span>, <span class="number">3609</span>, <span class="number">3612</span>, <span class="number">3615</span>, <span class="number">3618</span>, <span class="number">3621</span>, <span class="number">3624</span>, <span class="number">3627</span>, <span class="number">3630</span>, <span class="number">3633</span>, <span class="number">3636</span>, <span class="number">3639</span>, <span class="number">3642</span>, <span class="number">3645</span>, <span class="number">3648</span>, <span class="number">3651</span>, <span class="number">3654</span>, <span class="number">3657</span>, <span class="number">3660</span>, <span class="number">3663</span>, <span class="number">3666</span>, <span class="number">3669</span>, <span class="number">3672</span>, <span class="number">3675</span>, <span class="number">3678</span>, <span class="number">3681</span>, <span class="number">3684</span>, <span class="number">3687</span>, <span class="number">3690</span>, <span class="number">3693</span>, <span class="number">3696</span>, <span class="number">3699</span>, <span class="number">3702</span>, <span class="number">3705</span>, <span class="number">3708</span>, <span class="number">3711</span>, <span class="number">3714</span>, <span class="number">3717</span>, <span class="number">3720</span>, <span class="number">3723</span>, <span class="number">3726</span>, <span class="number">3729</span>, <span class="number">3732</span>, <span class="number">3735</span>, <span class="number">3738</span>, <span class="number">3741</span>, <span class="number">3744</span>, <span class="number">3747</span>, <span class="number">3750</span>, <span class="number">3753</span>, <span class="number">3756</span>, <span class="number">3759</span>, <span class="number">3762</span>, <span class="number">3765</span>, <span class="number">3768</span>, <span class="number">3771</span>, <span class="number">3774</span>, <span class="number">3777</span>, <span class="number">3780</span>, <span class="number">3783</span>, <span class="number">3786</span>, <span class="number">3789</span>, <span class="number">3792</span>, <span class="number">3795</span>, <span class="number">3798</span>, <span class="number">3801</span>, <span class="number">3804</span>, <span class="number">3807</span>, <span class="number">3810</span>, <span class="number">3813</span>, <span class="number">3816</span>, <span class="number">3819</span>, <span class="number">3822</span>, <span class="number">3825</span>, <span class="number">3828</span>, <span class="number">3831</span>, <span class="number">3834</span>, <span class="number">3837</span>, <span class="number">3840</span>, <span class="number">3843</span>, <span class="number">3846</span>, <span class="number">3849</span>, <span class="number">3852</span>, <span class="number">3855</span>, <span class="number">3858</span>, <span class="number">3861</span>, <span class="number">3864</span>, <span class="number">3867</span>, <span class="number">3870</span>, <span class="number">3873</span>, <span class="number">3876</span>, <span class="number">3879</span>, <span class="number">3882</span>, <span class="number">3885</span>, <span class="number">3888</span>, <span class="number">3891</span>, <span class="number">3894</span>, <span class="number">3897</span>, <span class="number">3900</span>, <span class="number">3903</span>, <span class="number">3906</span>, <span class="number">3909</span>, <span class="number">3912</span>, <span class="number">3915</span>, <span class="number">3918</span>, <span class="number">3921</span>, <span class="number">3924</span>, <span class="number">3927</span>, <span class="number">3930</span>, <span class="number">3933</span>, <span class="number">3936</span>, <span class="number">3939</span>, <span class="number">3942</span>, <span class="number">3945</span>, <span class="number">3948</span>, <span class="number">3951</span>, <span class="number">3954</span>, <span class="number">3957</span>, <span class="number">3960</span>, <span class="number">3963</span>, <span class="number">3966</span>, <span class="number">3969</span>, <span class="number">3972</span>, <span class="number">3975</span>, <span class="number">3978</span>, <span class="number">3981</span>, <span class="number">3984</span>, <span class="number">3987</span>, <span class="number">3990</span>, <span class="number">3993</span>, <span class="number">3996</span>, <span class="number">3999</span>, <span class="number">4002</span>, <span class="number">4005</span>, <span class="number">4008</span>, <span class="number">4011</span>, <span class="number">4014</span>, <span class="number">4017</span>, <span class="number">4020</span>, <span class="number">4023</span>, <span class="number">4026</span>, <span class="number">4029</span>, <span class="number">4032</span>, <span class="number">4035</span>, <span class="number">4038</span>, <span class="number">4041</span>, <span class="number">4044</span>, <span class="number">4047</span>, <span class="number">4050</span>, <span class="number">4053</span>, <span class="number">4056</span>, <span class="number">4059</span>, <span class="number">4062</span>, <span class="number">4065</span>, <span class="number">4068</span>, <span class="number">4071</span>, <span class="number">4074</span>, <span class="number">4077</span>, <span class="number">4080</span>, <span class="number">4083</span>, <span class="number">4086</span>, <span class="number">4089</span>, <span class="number">4092</span>, <span class="number">4095</span>, <span class="number">4098</span>, <span class="number">4101</span>, <span class="number">4104</span>, <span class="number">4107</span>, <span class="number">4110</span>, <span class="number">4113</span>, <span class="number">4116</span>, <span class="number">4119</span>, <span class="number">4122</span>, <span class="number">4125</span>, <span class="number">4128</span>, <span class="number">4131</span>, <span class="number">4134</span>, <span class="number">4137</span>, <span class="number">4140</span>, <span class="number">4143</span>, <span class="number">4146</span>, <span class="number">4149</span>, <span class="number">4152</span>, <span class="number">4155</span>, <span class="number">4158</span>, <span class="number">4161</span>, <span class="number">4164</span>, <span class="number">4167</span>, <span class="number">4170</span>, <span class="number">4173</span>, <span class="number">4176</span>, <span class="number">4179</span>, <span class="number">4182</span>, <span class="number">4185</span>, <span class="number">4188</span>, <span class="number">4191</span>, <span class="number">4194</span>, <span class="number">4197</span>, <span class="number">4200</span>, <span class="number">4203</span>, <span class="number">4206</span>, <span class="number">4209</span>, <span class="number">4212</span>, <span class="number">4215</span>, <span class="number">4218</span>, <span class="number">4221</span>, <span class="number">4224</span>, <span class="number">4227</span>, <span class="number">4230</span>, <span class="number">4233</span>, <span class="number">4236</span>, <span class="number">4239</span>, <span class="number">4242</span>, <span class="number">4245</span>, <span class="number">4248</span>, <span class="number">4251</span>, <span class="number">4254</span>, <span class="number">4257</span>, <span class="number">4260</span>, <span class="number">4263</span>, <span class="number">4266</span>, <span class="number">4269</span>, <span class="number">4272</span>, <span class="number">4275</span>, <span class="number">4278</span>, <span class="number">4281</span>, <span class="number">4284</span>, <span class="number">4287</span>, <span class="number">4290</span>, <span class="number">4293</span>, <span class="number">4296</span>, <span class="number">4299</span>, <span class="number">4302</span>, <span class="number">4305</span>, <span class="number">4308</span>, <span class="number">4311</span>, <span class="number">4314</span>, <span class="number">4317</span>, <span class="number">4320</span>, <span class="number">4323</span>, <span class="number">4326</span>, <span class="number">4329</span>, <span class="number">4332</span>, <span class="number">4335</span>, <span class="number">4338</span>, <span class="number">4341</span>, <span class="number">4344</span>, <span class="number">4347</span>, <span class="number">4350</span>, <span class="number">4353</span>, <span class="number">4356</span>, <span class="number">4359</span>, <span class="number">4362</span>, <span class="number">4365</span>, <span class="number">4368</span>, <span class="number">4371</span>, <span class="number">4374</span>, <span class="number">4377</span>, <span class="number">4380</span>, <span class="number">4383</span>, <span class="number">4386</span>, <span class="number">4389</span>, <span class="number">4392</span>, <span class="number">4395</span>, <span class="number">4398</span>, <span class="number">4401</span>, <span class="number">4404</span>, <span class="number">4407</span>, <span class="number">4410</span>, <span class="number">4413</span>, <span class="number">4416</span>, <span class="number">4419</span>, <span class="number">4422</span>, <span class="number">4425</span>, <span class="number">4428</span>, <span class="number">4431</span>, <span class="number">4434</span>, <span class="number">4437</span>, <span class="number">4440</span>, <span class="number">4443</span>, <span class="number">4446</span>, <span class="number">4449</span>, <span class="number">4452</span>, <span class="number">4455</span>, <span class="number">4458</span>, <span class="number">4461</span>, <span class="number">4464</span>, <span class="number">4467</span>, <span class="number">4470</span>, <span class="number">4473</span>, <span class="number">4476</span>, <span class="number">4479</span>, <span class="number">4482</span>, <span class="number">4485</span>, <span class="number">4488</span>, <span class="number">4491</span>, <span class="number">4494</span>, <span class="number">4497</span>, <span class="number">4500</span>, <span class="number">4503</span>, <span class="number">4506</span>, <span class="number">4509</span>, <span class="number">4512</span>, <span class="number">4515</span>, <span class="number">4518</span>, <span class="number">4521</span>, <span class="number">4524</span>, <span class="number">4527</span>, <span class="number">4530</span>, <span class="number">4533</span>, <span class="number">4536</span>, <span class="number">4539</span>, <span class="number">4542</span>, <span class="number">4545</span>, <span class="number">4548</span>, <span class="number">4551</span>, <span class="number">4554</span>, <span class="number">4557</span>, <span class="number">4560</span>, <span class="number">4563</span>, <span class="number">4566</span>, <span class="number">4569</span>, <span class="number">4572</span>, <span class="number">4575</span>, <span class="number">4578</span>, <span class="number">4581</span>, <span class="number">4584</span>, <span class="number">4587</span>, <span class="number">4590</span>, <span class="number">4593</span>, <span class="number">4596</span>, <span class="number">4599</span>, <span class="number">4602</span>, <span class="number">4605</span>, <span class="number">4608</span>, <span class="number">4611</span>, <span class="number">4614</span>, <span class="number">4617</span>, <span class="number">4620</span>, <span class="number">4623</span>, <span class="number">4626</span>, <span class="number">4629</span>, <span class="number">4632</span>, <span class="number">4635</span>, <span class="number">4638</span>, <span class="number">4641</span>, <span class="number">4644</span>, <span class="number">4647</span>, <span class="number">4650</span>, <span class="number">4653</span>, <span class="number">4656</span>, <span class="number">4659</span>, <span class="number">4662</span>, <span class="number">4665</span>, <span class="number">4668</span>, <span class="number">4671</span>, <span class="number">4674</span>, <span class="number">4677</span>, <span class="number">4680</span>, <span class="number">4683</span>, <span class="number">4686</span>, <span class="number">4689</span>, <span class="number">4692</span>, <span class="number">4695</span>, <span class="number">4698</span>, <span class="number">4701</span>, <span class="number">4704</span>, <span class="number">4707</span>, <span class="number">4710</span>, <span class="number">4713</span>, <span class="number">4716</span>, <span class="number">4719</span>, <span class="number">4722</span>, <span class="number">4725</span>, <span class="number">4728</span>, <span class="number">4731</span>, <span class="number">4734</span>, <span class="number">4737</span>, <span class="number">4740</span>, <span class="number">4743</span>, <span class="number">4746</span>, <span class="number">4749</span>, <span class="number">4752</span>, <span class="number">4755</span>, <span class="number">4758</span>, <span class="number">4761</span>, <span class="number">4764</span>, <span class="number">4767</span>, <span class="number">4770</span>, <span class="number">4773</span>, <span class="number">4776</span>, <span class="number">4779</span>, <span class="number">4782</span>, <span class="number">4785</span>, <span class="number">4788</span>, <span class="number">4791</span>, <span class="number">4794</span>, <span class="number">4797</span>, <span class="number">4800</span>, <span class="number">4803</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> table[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;M&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">if</span> (t1[n] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%c %d\n&quot;</span>, table[<span class="number">1</span>], t1[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t2[n] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%c %d\n&quot;</span>, table[<span class="number">2</span>], t2[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t3[n] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%c %d\n&quot;</span>, table[<span class="number">3</span>], t3[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t4[n] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%c %d\n&quot;</span>, table[<span class="number">4</span>], t4[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t5[n] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%c %d\n&quot;</span>, table[<span class="number">5</span>], t5[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t6[n] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%c %d\n&quot;</span>, table[<span class="number">6</span>], t6[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t7[n] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%c %d\n&quot;</span>, table[<span class="number">7</span>], t7[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>



<h4 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h4><details>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXLEN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, len;</span><br><span class="line"><span class="type">char</span> a[MAXLEN], b[MAXLEN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span> <span class="params">(<span class="type">int</span> l1, <span class="type">int</span> r1, <span class="type">int</span> l2, <span class="type">int</span> r2)</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l1, j = l2; i &lt;= r1 &amp;&amp; j &lt;= r2; i++, j++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] != b[j]) &#123;</span><br><span class="line">			flag = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((r1 - l1 + <span class="number">1</span>) % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = ((r1 - l1) + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> ((<span class="built_in">check</span> (l1, l1 + mid - <span class="number">1</span>, l2, l2 + mid - <span class="number">1</span>) &amp;&amp; <span class="built_in">check</span> (r1 - mid + <span class="number">1</span>, r1, r2 - mid + <span class="number">1</span>, r2)) || </span><br><span class="line">			(<span class="built_in">check</span> (l1, l1 + mid - <span class="number">1</span>, r2 - mid + <span class="number">1</span>, r2) &amp;&amp; <span class="built_in">check</span> (r1 - mid + <span class="number">1</span>, r1, l2, l2 + mid - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span> (<span class="string">&quot;string.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span> (<span class="string">&quot;string.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%s&quot;</span>, a + <span class="number">1</span>);	</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%s&quot;</span>, b + <span class="number">1</span>);</span><br><span class="line">		len = <span class="built_in">strlen</span> (a + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">check</span> (<span class="number">1</span>, len, <span class="number">1</span>, len)) &#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="built_in">printf</span> (<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</details>

<h4 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h4><details>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, ans, tmp;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">&#125; a[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123; <span class="keyword">return</span> (x.l == y.l) ? x.r &lt; y.r : x.l &lt; y.l; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x &gt; y) ? x : y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x &lt; y) ? x : y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Tot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x &lt; <span class="number">0</span>) ? <span class="number">0</span> : x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sl[MAXN], sr[MAXN], tl[MAXN], tr[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//	freopen (&quot;homework.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//	freopen (&quot;homework.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;a[i].l, &amp;a[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line">    <span class="built_in">memset</span>(sl, <span class="number">0</span>, <span class="built_in">sizeof</span>(sl));</span><br><span class="line">    <span class="built_in">memset</span>(sr, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(sr));</span><br><span class="line">    <span class="built_in">memset</span>(tl, <span class="number">0</span>, <span class="built_in">sizeof</span>(tl));</span><br><span class="line">    <span class="built_in">memset</span>(tr, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(tr));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        sl[i] = <span class="built_in">Max</span>(sl[i - <span class="number">1</span>], a[i].l);</span><br><span class="line">        sr[i] = <span class="built_in">Min</span>(sr[i - <span class="number">1</span>], a[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        tl[i] = <span class="built_in">Max</span>(tl[i + <span class="number">1</span>], a[i].l);</span><br><span class="line">        tr[i] = <span class="built_in">Min</span>(tr[i + <span class="number">1</span>], a[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    sl[<span class="number">0</span>] = tl[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    sr[<span class="number">0</span>] = tr[n + <span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        tmp = <span class="built_in">Tot</span>(sr[i] - sl[i] + <span class="number">1</span>) + <span class="built_in">Tot</span>(tr[i + <span class="number">1</span>] - tl[i + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        ans = <span class="built_in">Max</span>(ans, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans = <span class="built_in">Max</span>(ans, a[i].r - a[i].l + <span class="number">1</span> + <span class="built_in">Tot</span> (<span class="built_in">Min</span> (sr[i - <span class="number">1</span>], tr[i + <span class="number">1</span>]) - <span class="built_in">Max</span> (sl[i - <span class="number">1</span>], tl[i + <span class="number">1</span>]) + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h4 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h4><details>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, dp[<span class="number">30</span>][<span class="number">3</span>], ans;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &gt; y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">			dp[j][<span class="number">0</span>] = <span class="number">0xcfcfcfcf</span>;</span><br><span class="line">			dp[j][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> pos = <span class="number">1</span>; pos &lt;= n; pos++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[pos] == i + <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">					dp[j][<span class="number">0</span>]++, dp[j][<span class="number">1</span>]++;</span><br><span class="line">					ans = <span class="built_in">Max</span> (ans, dp[j][<span class="number">0</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="type">int</span> j = s[pos] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">				dp[j][<span class="number">0</span>] = dp[j][<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">				dp[j][<span class="number">1</span>] = <span class="built_in">Max</span> (<span class="number">0</span>, dp[j][<span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">				ans = <span class="built_in">Max</span> (ans, dp[j][<span class="number">0</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

]]></content>
      <categories>
        <category>考试</category>
      </categories>
      <tags>
        <tag>考试</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」中国好代码</title>
    <url>/2021/08/25/2021-08-25-%E4%B8%AD%E5%9B%BD%E5%A5%BD%E4%BB%A3%E7%A0%81%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>考试时真就是写了个《中国好代码》呗。。。</p>
<span id="more"></span>

<p><a href="http://222.180.160.110:1024/contest/1914/problem/2">link</a>    </p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>其实就是道一眼题。<br>可以发现，如果要写同余方程的话，每个学生的第一次转身时间是余数，转身周期是模数。<br>那么问题可以转化为:<br>给定$n$个模方程(下标从$1$到$n$)，支持两种操作：    </p>
<ul>
<li>交换$i,j$两个方程。</li>
<li>查询$[l,r]$的方程组成方程组后是否有解。<br>根据刚学的扩展中国剩余定理的思路可以知道：我们能在$nlog$的时间复杂度里合并$n$个方程为一个。并满足区间可合并性。<br>那么既然求区间内有无解，并且可以等价的合并，那么我们用线段树维护即可，每个节点维护一段区间内合并后的方程的模数与余数。<br>然后就做完了。</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>考试时真就是写了个《中国好代码》。。。<br>开始在<code>push_up</code>里面写了个<code>ExCRT</code>，后来发现查询时不那么方便，又写了个<code>merge</code>用来合并方程，发现丢线段树节点到<code>merge</code>里面不那么舒服，又开了个结构体装方程，然后<code>merge</code>里的<code>ExCRT</code>写错了，把<code>r1</code>(特解)写成了<code>r2</code>(当前方程的余数)。。。<br>有趣的是我写了两个<code>ExCRT</code>，第一个没错，第二个马上就挂了(早知道我就直接复制第一遍)。<br>然后代码很冗长。<br>写完就不想看了，跑去看了会第一题，结果考完发现写炸了。。。<br><del>混乱代码给我留下了深深的伤痛。。。</del><br>我应该好好学习如何<del>把代码写好看</del>精简代码。    </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, q, tg[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> m, r;</span><br><span class="line">    <span class="type">int</span> flag;</span><br><span class="line">&#125; a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> m, ri, flag;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">&#125; s[MAXN * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y, <span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(x, y, b, a % b);</span><br><span class="line">    <span class="type">int</span> t = x;</span><br><span class="line">    x = y, y = t - a / b * y;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s[p &lt;&lt; <span class="number">1</span>].flag == <span class="number">-1</span> || s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].flag == <span class="number">-1</span>) &#123;</span><br><span class="line">        s[p].flag = s[p].m = s[p].ri = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m1 = s[p &lt;&lt; <span class="number">1</span>].m, r1 = s[p &lt;&lt; <span class="number">1</span>].ri;</span><br><span class="line">    <span class="type">int</span> m2 = s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].m, r2 = s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].ri;</span><br><span class="line">    <span class="type">int</span> g = <span class="built_in">gcd</span>(m1, m2);</span><br><span class="line">    <span class="type">int</span> tmp = r2 - r1;</span><br><span class="line">    <span class="keyword">if</span> (tmp % g != <span class="number">0</span>) &#123;</span><br><span class="line">        s[p].flag = s[p].m = s[p].ri = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k1, k2;</span><br><span class="line">    <span class="built_in">exgcd</span>(k1, k2, m1 / g, m2 / g);</span><br><span class="line">    k1 = (tmp / g * k1) % (m2 / g);</span><br><span class="line">    r1 += k1 * m1;</span><br><span class="line">    m1 = m1 / g * m2;</span><br><span class="line">    r1 = (r1 + m1) % m1;</span><br><span class="line">    s[p].flag = <span class="number">1</span>, s[p].m = m1, s[p].ri = r1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">merge</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    node res;</span><br><span class="line">    res.flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x.flag == <span class="number">-1</span> || y.flag == <span class="number">-1</span>) &#123;</span><br><span class="line">        res.flag = res.m = res.r = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m1 = x.m, r1 = x.r;</span><br><span class="line">    <span class="type">int</span> m2 = y.m, r2 = y.r;</span><br><span class="line">    <span class="type">int</span> g = <span class="built_in">gcd</span>(m1, m2);</span><br><span class="line">    <span class="type">int</span> tmp = r2 - r1;</span><br><span class="line">    <span class="keyword">if</span> (tmp % g != <span class="number">0</span>) &#123;</span><br><span class="line">        res.flag = res.m = res.r = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k1, k2;</span><br><span class="line">    <span class="built_in">exgcd</span>(k1, k2, m1 / g, m2 / g);</span><br><span class="line">    k1 = (tmp / g * k1) % (m2 / g);</span><br><span class="line">    r1 += k1 * m1;</span><br><span class="line">    m1 = m1 / g * m2;</span><br><span class="line">    r1 = (r1 + m1) % m1;</span><br><span class="line">    res.m = m1, res.r = r1, res.flag = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//此处的r1写成了r2...</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    s[p].l = l, s[p].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        s[p].flag = <span class="number">1</span>;</span><br><span class="line">        s[p].m = a[l].m, s[p].ri = a[l].r;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, node val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s[p].l == s[p].r) &#123;</span><br><span class="line">        s[p].m = val.m, s[p].ri = val.r;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span>, x, l, r, val);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, l, r, val);</span><br><span class="line">    <span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) &#123;</span><br><span class="line">        node res;</span><br><span class="line">        res.flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[p].flag == <span class="number">-1</span>) &#123;</span><br><span class="line">            res.flag = res.m = res.r = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.m = s[p].m, res.r = s[p].ri;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    node res;</span><br><span class="line">    res.flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">        res = <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) &#123;</span><br><span class="line">            res = <span class="built_in">merge</span>(res, <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r &gt; mid) &#123;</span><br><span class="line">        res = <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//	freopen (&quot;goodcode.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//	freopen (&quot;goodcode.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">    	<span class="built_in">scanf</span> (<span class="string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">        	<span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;tg[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, g; i &lt;= n; i++) &#123;</span><br><span class="line">        	<span class="built_in">scanf</span> (<span class="string">&quot;%lld %lld&quot;</span>, &amp;a[i].r, &amp;g);</span><br><span class="line">            a[i].m = tg[g];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="type">int</span> op, l, r;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>, l, <span class="number">1</span>, n, a[r]);</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>, r, <span class="number">1</span>, n, a[l]);</span><br><span class="line">                <span class="built_in">swap</span>(a[r], a[l]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node res = <span class="built_in">query</span>(<span class="number">1</span>, l, r);</span><br><span class="line">                <span class="keyword">if</span> (res.flag == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>数论</tag>
        <tag>线段树</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」AtCoder[abc177]Code</title>
    <url>/2021/01/16/2021-1-16-AtCoder%5Babc177%5DCode/</url>
    <content><![CDATA[<blockquote>
<p>AtCoder[abc177]练习后留档 2021&#x2F;1&#x2F;6</p>
</blockquote>
<span id="more"></span>

<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d, t, s, tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf %lf&quot;</span>, &amp;d, &amp;t, &amp;s);</span><br><span class="line">    tt = d / s;</span><br><span class="line">    <span class="keyword">if</span> (tt &lt;= t)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>注意有坑，下标不要整出边界了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1005</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[MAXN], b[MAXN];</span><br><span class="line"><span class="type">int</span> lena, lenb, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Summary</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lenb; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] != a[i + id - <span class="number">1</span>])</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, b + <span class="number">1</span>);</span><br><span class="line">    lena = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">    lenb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">    ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lena - lenb + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, <span class="built_in">Summary</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>给出一个数组，数组元素两两求积，再对积求和，输出该和值。<br>利用前缀和。    有点像小学奥数里的分组比赛问题。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">4</span> * <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[MAXN], n;</span><br><span class="line"><span class="type">int</span> sum[MAXN], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">        sum[i] = (sum[i - <span class="number">1</span>] % mod + a[i] % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans = (ans % mod + (a[i] % mod * sum[i - <span class="number">1</span>] % mod) % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p>并查集板题，加一个$rank$值即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">4</span> * <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> rank, f;</span><br><span class="line">&#125; fa[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MakeSet</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fa[i].f = i;</span><br><span class="line">        fa[i].rank = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[v].f == v)</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fa[v].f = <span class="built_in">FindSet</span>(fa[v].f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">FindSet</span>(u);</span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">FindSet</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    fa[x].f = fa[y].f;</span><br><span class="line">    fa[y].rank += fa[x].rank;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">MakeSet</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">UnionSet</span>(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, fa[<span class="built_in">FindSet</span>(i)].rank);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>此题一开始我的做法是错的。<br>但是数据良心地给了我$80pts$。<br>判断最大公约数是否是1，可以用$gcd$直接跑。<br>但判断两两互质有点麻烦。如果暴力的话一定会超时，可以考虑含根号的算法，即$\sqrt{n}n$。<br>那么将每个数都进行质因数分解，如果一个因子被记录超过1次，则可以判断了。<br>细节有点多，还有特判。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">2</span> * <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[SIZE], pre[SIZE], cnt, Gcd, tot[MAXN];</span><br><span class="line"><span class="type">int</span> vis[SIZE];</span><br><span class="line"><span class="type">bool</span> flag1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            tot[i]++;</span><br><span class="line">            <span class="keyword">if</span> (tot[i] != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;setwise coprime\n&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) &#123;</span><br><span class="line">    	tot[x]++;</span><br><span class="line">    	<span class="keyword">if</span> (tot[x] != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;setwise coprime\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">1</span>) &#123;</span><br><span class="line">            flag1 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">            Gcd = a[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Gcd = <span class="built_in">gcd</span>(a[i], Gcd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag1 == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pairwise coprime\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Gcd != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not coprime\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (a[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">change</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pairwise coprime\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」欧拉反演</title>
    <url>/2021/08/24/2021-08-24-%E6%AC%A7%E6%8B%89%E5%8F%8D%E6%BC%94/</url>
    <content><![CDATA[<p>求$\sum_{i&#x3D;1}^n\gcd(i,n)$<br>$$<br>\sum_{d|n}\varphi(d) &#x3D; n\<br>\rightarrow \sum_{i&#x3D;1}^n\gcd(i,n) &#x3D; \sum_{i&#x3D;1}^n\sum_{d|\gcd(i,n)}\varphi(d)\<br>$$</p>
<p>$$<br>&#x3D;\sum_{i&#x3D;1}^n\sum_{d|i}\sum_{d|n} \varphi(d) \<br>$$</p>
<p>$$<br>&#x3D;\sum_{d|n}\sum_{i&#x3D;1}^n\sum_{d|i} \varphi(d) \<br>$$</p>
<p>$$<br>&#x3D;\sum_{d|n}\frac{n}{d}\varphi(d)<br>$$</p>
<p>然后可以直接整除分块。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」「JOISC 2016 Day 3」回转寿司</title>
    <url>/2021/10/05/2021-10-05-%E3%80%8CJOISC%202016%20Day%203%E3%80%8D%E5%9B%9E%E8%BD%AC%E5%AF%BF%E5%8F%B8%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><del>人生第二道黑题</del>分块好题</p>
<span id="more"></span>

<p>[link](<a href="https://loj.ac/p/2736">#2736. 「JOISC 2016 Day 3」回转寿司 - 题目 - LibreOJ (loj.ac)</a>)</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>不难看出，在遍历完区间之后，若该区间有数大于$A$，那么$A$将进入该区间，并弹出区间内最大的数。    </p>
<p>这里用到一个结论，序列操作的顺序不会改变数列中数字的最终集合。    </p>
<p>先咕了。</p>
<p>给一个证明：</p>
<blockquote>
<p>设有两个操作：$(l_1,r_1,A_1)$和$(l_2,r_2,A_2)$并假定$A_1&gt;A_2$。</p>
<ul>
<li>当$[l_1,r_1] \bigcup [l_2,r_2] &#x3D; \varnothing$时，两个操作一定不会影响</li>
<li>当$[l_1,r_1] \bigcup [l_2,r_2] \neq \varnothing$时，若先操作$(l_1,r_1,A_1)$，设弹出了$A^{‘}$，若$A^{‘}&gt;A_2$，那么</li>
</ul>
</blockquote>
<p>咕咕咕。    </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXLOG = <span class="number">650</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, siz, cnt, block[MAXN], a[MAXN];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt; &gt; now[MAXLOG];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; his[MAXLOG];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = (id - <span class="number">1</span>) * siz + <span class="number">1</span>; i &lt;= id * siz; i++) &#123;</span><br><span class="line">		his[id].<span class="built_in">push</span>(a[i]);</span><br><span class="line">		a[i] = his[id].<span class="built_in">top</span>();</span><br><span class="line">		his[id].<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (his[id].<span class="built_in">size</span>()) his[id].<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (now[id].<span class="built_in">size</span>()) &#123;</span><br><span class="line">		now[id].<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = (id - <span class="number">1</span>) * siz + <span class="number">1</span>; i &lt;= id * siz; i++) &#123;</span><br><span class="line">		now[id].<span class="built_in">push</span>(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">feces</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">reset</span>(block[l]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= <span class="built_in">min</span>(block[l] * siz, r); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] &gt; val) <span class="built_in">swap</span>(a[i], val);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = block[l] + <span class="number">1</span>; i &lt; block[r]; i++) &#123;</span><br><span class="line">		his[i].<span class="built_in">push</span>(val);</span><br><span class="line">		now[i].<span class="built_in">push</span>(val);</span><br><span class="line">		val = now[i].<span class="built_in">top</span>(); </span><br><span class="line">		now[i].<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">update</span>(block[l]);</span><br><span class="line">	<span class="keyword">if</span> (block[l] != block[r]) &#123;</span><br><span class="line">		<span class="built_in">reset</span>(block[r]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = (block[r] - <span class="number">1</span>) * siz + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &gt; val) <span class="built_in">swap</span>(a[i], val);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">update</span>(block[r]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	siz = <span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">		block[i] = (i - <span class="number">1</span>) / siz + <span class="number">1</span>;</span><br><span class="line">		now[block[i]].<span class="built_in">push</span>(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>, l, r, val; t &lt;= m; t++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;r, &amp;val);</span><br><span class="line">		<span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">feces</span>(<span class="number">1</span>, r, <span class="built_in">feces</span>(l, n, val)));</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">feces</span>(l, r, val));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>分块</tag>
        <tag>结论题</tag>
      </tags>
  </entry>
  <entry>
    <title>「Summary」半期复习</title>
    <url>/2021/11/05/2021-11-05-%E5%8D%8A%E6%9C%9F%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p><del>我本来想躺平的</del></p>
</blockquote>
<span id="more"></span>

<p>老老实实复习吧</p>
<h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><h3 id="Fhq-Treap"><a href="#Fhq-Treap" class="headerlink" title="Fhq_Treap"></a>Fhq_Treap</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, root, tot, tmp1, tmp2, tmp3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, key, val, siz;</span><br><span class="line">&#125; s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    s[++tot].val = val, s[tot].key = <span class="built_in">rand</span>(), s[tot].siz = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    s[p].siz = s[s[p].l].siz + s[s[p].r].siz + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> val, <span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">0</span>) &#123; x = y = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (s[p].val &lt;= val) &#123;</span><br><span class="line">        x = p, <span class="built_in">split</span>(s[p].r, val, s[p].r, y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = p, <span class="built_in">split</span>(s[p].l, val, x, s[p].l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">    <span class="keyword">if</span> (s[x].key &gt; s[y].key) &#123;</span><br><span class="line">        s[x].r = <span class="built_in">merge</span>(s[x].r, y);</span><br><span class="line">        <span class="built_in">push_up</span>(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s[y].l = <span class="built_in">merge</span>(x, s[y].l);</span><br><span class="line">        <span class="built_in">push_up</span>(y);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(root, val, tmp1, tmp2);</span><br><span class="line">    root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(tmp1, <span class="built_in">newnode</span>(val)), tmp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(root, val, tmp1, tmp2);</span><br><span class="line">    <span class="built_in">split</span>(tmp1, val - <span class="number">1</span>, tmp1, tmp3);</span><br><span class="line">    tmp3 = <span class="built_in">merge</span>(s[tmp3].l, s[tmp3].r);</span><br><span class="line">    root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(tmp1, tmp3), tmp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">queryrnk</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(root, val - <span class="number">1</span>, tmp1, tmp2);</span><br><span class="line">    <span class="type">int</span> res = s[tmp1].siz + <span class="number">1</span>;</span><br><span class="line">    root = <span class="built_in">merge</span>(tmp1, tmp2);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querykth</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[s[p].l].siz + <span class="number">1</span> == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> s[p].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[s[p].l].siz &gt;= k) &#123;</span><br><span class="line">            p = s[p].l; <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k -= s[s[p].l].siz + <span class="number">1</span>, p = s[p].r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querypre</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(root, val - <span class="number">1</span>, tmp1, tmp2);</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">querykth</span>(tmp1, s[tmp1].siz);</span><br><span class="line">    root = <span class="built_in">merge</span>(tmp1, tmp2);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querynxt</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(root, val, tmp1, tmp2);</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">querykth</span>(tmp2, <span class="number">1</span>);</span><br><span class="line">    root = <span class="built_in">merge</span>(tmp1, tmp2);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;D:\\Math\\tmp.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="type">int</span> opt, val; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;opt, &amp;val);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">remove</span>(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">queryrnk</span>(val));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">querykth</span>(root, val));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">querypre</span>(val));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">querynxt</span>(val));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h2><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p><del>忘了</del>    </p>
<ul>
<li><strong>step1</strong><br>依次扫描当前列的每一行，找到主元(当前列系数最大的)</li>
<li><strong>step2</strong><br>将找到的主元所在的行和当前行交换。<br>开始消元，即，从后往前扫后面的每一行，用对应变元的系数去除主元，最后把主元的系数化为一，再去对后面的每一位依次做减法消元。</li>
</ul>
<p>估计时没说清楚的，但是我自己懂了。。。   </p>
<p>最后有个回带的过程，其实整体方法和手算没什么区别。  </p>
<p>如果有多解，一定有某个元的系数是$0$.<br>在代码里体现就是消元的操作没有做够$n$次。   </p>
<p>时间复杂度$n^3$.   </p>
<h3 id="运用范围"><a href="#运用范围" class="headerlink" title="运用范围"></a>运用范围</h3><p>当遇到了概率期望题目的方程式会产生含有 当前$dp$值的转移方程时，形如<br>$\mathrm{dp_i} &#x3D; a\times \mathrm{dp_i} + \dots$<br>并且每个状态前的系数可以确定<br>这时可以预处理出每个状态前的系数。<br>然后代入用高斯消元求解就行了。   </p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> EPS = <span class="number">1e-18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> a[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Gauss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> r, c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">1</span>, r = <span class="number">1</span>; c &lt;= n; c++) &#123;</span><br><span class="line">        <span class="type">int</span> maxl = r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt;= n; i++) <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; <span class="built_in">fabs</span>(a[maxl][c])) &#123;</span><br><span class="line">            maxl = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[maxl][c]) &lt; EPS) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = c; i &lt;= n + <span class="number">1</span>; i++) <span class="built_in">swap</span>(a[r][i], a[maxl][i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &gt;= c; i--) a[r][i] /= a[r][c];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = c; j &lt;= n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= n) &#123;</span><br><span class="line">        <span class="comment">// 因为 r 是从 1 开始，所以如果全部消完了， r 的终值应该是 n + 1</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No Solution\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            a[i][n + <span class="number">1</span>] -= a[j][n + <span class="number">1</span>] * a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Gauss</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, a[i][n + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>review</category>
      </categories>
      <tags>
        <tag>review</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」Gauss消元题目合集</title>
    <url>/2021/10/16/2021-10-16-Gauss%E6%B6%88%E5%85%83%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>All in one.</p>
<span id="more"></span>


<h2 id="First-Knight"><a href="#First-Knight" class="headerlink" title="First Knight"></a>First Knight</h2><p>设$dp[i][j]$为从$(i, j)$为起点走到终点$(n, m)$的代价。    </p>
<p>$dp[i][j] &#x3D; dp[i + 1][j] \times p[i + 1][j][1] + dp[i][j + 1]  \times p[i][j + 1][2] \ + dp[i - 1][j]  \times p[i - 1][j][3] \ + dp[i][j - 1]  \times p[i][j - 1][4] + 1$</p>
<p>移项后为$-dp[i][j] \ + dp[i + 1][j] \times p[i + 1][j][1]\ + dp[i][j + 1]  \times p[i][j + 1][2] \+ dp[i - 1][j]  \times p[i - 1][j][3] \+ dp[i][j - 1]  \times p[i][j - 1][4] &#x3D; -1$</p>
<p>可以高斯消元。    </p>
<p>然后用带状优化到$N \times N \times 2 \times m$</p>
<h2 id="Time-travel"><a href="#Time-travel" class="headerlink" title="Time travel"></a>Time travel</h2><p>设$dp[i]$表示从$i$为起点到终点走过路程的期望长度。    </p>
<p>$dp[i]&#x3D;1+\sum_{j&#x3D;1}^{m} dp[vis[i][j]]\times P[|i-j|]$</p>
<p>$\rightarrow -dp[i] +\sum_{j&#x3D;1}^{m} dp[vis[i][j]]\times P[|i-j|] &#x3D; -1$</p>
<p>$dp[t] &#x3D; 0$</p>
<p>对于$dp[s]$只能从规定方向转移。    </p>
<p>然后可以带状优化。    </p>
<p>比较难写，弃了</p>
<h2 id="Museum"><a href="#Museum" class="headerlink" title="Museum"></a>Museum</h2><p>$dp[i][j]$表示<strong>当前</strong><code>Petya</code>在$i$,<code>Vasya </code>在$j$的概率。</p>
<p>$$<br>dp[i][j] &#x3D; dp[i][j] \times P[i] \times P[j] \<br>         + \sum_{(x,i) \in G}\sum_{(y,j) \in G} \frac{dp[x][y] \times (1 - P[x]) \times (1 - P[y])}{deg[x] \times deg[y]} + \<br>         \sum_{(x, i)\in G}\frac{dp[x][j]\times(1-p[x])\times p[j]}{deg[x]} + \sum_{(y, i)\in G}\frac{dp[i][y]\times(1-p[y])\times p[i]}{deg[y]}<br>$$<br>常数项为$0$<br>$$<br>dp[i][j] \times (P[i] \times P[j] - 1) \<br>+\sum_{(x,i) \in G}\sum_{(y,j) \in G} \frac{dp[x][y] \times (1 - P[x]) \times (1 - P[y])}{deg[x] \times deg[y]} + \<br>         \sum_{(x, i)\in G}\frac{dp[x][j]\times(1-p[x])\times p[j]}{deg[x]} + \sum_{(y, i)\in G}\frac{dp[i][y]\times(1-p[y])\times p[i]}{deg[y]}<br>         &#x3D; 0<br>$$</p>
<p>初始值$dp[s_1][s_2] &#x3D; 1$</p>
<p>不论经过这两个点多少次，它的概率都是1，因为这个是必然事件。</p>
<p>暴力解方程是$\Theta(N^3) &#x3D; \Theta(113379904)$</p>
<p>时限$2s$可过。</p>
<h2 id="Rating"><a href="#Rating" class="headerlink" title="Rating"></a>Rating</h2><p>显然可以把数据范围缩小到$[1,20]$。    </p>
<p>$(0, 0) \rightarrow (0,1) \rightarrow (1,1) \rightarrow (1,2) \rightarrow (2,2)$</p>
<p>考虑当前的一个状态$(x,y) | y\leq x$<br>$dp[x][y] &#x3D; dp[x][y + 2] \times (1-p) + dp[x][y - 1] \times p + 1$<br>$\rightarrow dp[x][y]-dp[x][y+2]\times (1 - p) - dp[x][y - 1] \times p &#x3D; 1$</p>
<h2 id="游走"><a href="#游走" class="headerlink" title="游走"></a>游走</h2><p>如果把边权看做已知条件。    </p>
<p>设$dp[u]$表示从$u$为初始节点，走到$n$结束的期望值。    </p>
<p>$dp[u] &#x3D; val(u, v) + \frac{1}{deg[u]} \sum_{(v,u)\in G} dp[v]$</p>
<p>$-dp[u] + val(u, v) + \frac{1}{deg[u]} \sum_{(v,u)\in G} dp[v] &#x3D; 0$</p>
<p>瓶颈在于给每条边赋权。    </p>
<p>如果把边权挪到点上？    </p>
<p>如果考虑点的话断然是行不通的。    </p>
<p>那么设$dp[(u,v)]$表示从$(u,v)$这条边出发，走到$n$结束的期望值。    </p>
<p>$dp[(u,v)] &#x3D; val(u,v) + \frac{1}{deg[u]}\sum_{(x, u)\in G}dp[x] + \frac{1}{deg[v]}\sum_{(y, v) \in G}dp[y]$</p>
<p>不行。    </p>
<hr>
<p>根据上面式子，最后的贡献与每边的边权和经过的概率有关。    </p>
<p>贪心一下，经过次数越多的边的边权应该赋得越大。    </p>
<p>那么要找出每条边贡献的次数。    </p>
<p>即是经过的次数。    </p>
<p>在这道题中，概率就等同于期望。    </p>
<p>求出每条边的概率即可。    </p>
<p><del>复杂度不对？</del>    </p>
<p>然后找到经过每个点的概率就好了。    </p>
<p>边$(u, v)$的概率就是$P[u]\times \frac{1}{deg[u]} + P[v] \times \frac{1}{deg[v]}$</p>
<p>然后排序，从大到小依次赋值。</p>
<p>$-dp[u] + \frac{1}{deg[u]} \sum_{(v,u)\in G} dp[v] &#x3D; 0$</p>
<p>边界注意$dp[1] &#x3D; dp[n] &#x3D; 1$</p>
<p>高斯消元可以解决。</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」二项式定理与组合恒等式</title>
    <url>/2021/11/13/2021-11-13-%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86%E4%B8%8E%E7%BB%84%E5%90%88%E6%81%92%E7%AD%89%E5%BC%8F/</url>
    <content><![CDATA[<span id="more"></span>



<h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><p><strong>定理$1$:</strong> $(x+y)^n&#x3D;\sum_{k&#x3D;0}^n(^n_k)x^ky^{n - k}$</p>
<p><strong>证明$1$</strong>:<br>$$<br>当n&#x3D;1时,公式显然成立.假设公式对于n成立\<br>(x+y)^{n+1} &#x3D; (x + y)^n \times (x+y)\<br>&#x3D;(x+y) \times \sum_{k&#x3D;0}^n \dbinom {n}{k} x^ky^{n - k}\<br>&#x3D;x\sum_{k&#x3D;0}^n \dbinom {n}{k} x^ky^{n - k} + y\sum_{k&#x3D;0}^n \dbinom {n}{k} x^ky^{n - k}\<br>&#x3D;\sum_{k&#x3D;0}^n \dbinom {n}{k} x^{k + 1}y^{n - k} + \sum_{k&#x3D;0}^n \dbinom {n}{k} x^ky^{n - k + 1}\<br>&#x3D;\sum_{k&#x3D;1}^{n+1} \dbinom {n}{k} x^ky^{n - k + 1} + \sum_{k&#x3D;0}^n \dbinom {n}{k} x^ky^{n - k + 1}\<br>&#x3D;\sum_{k&#x3D;1}^n \dbinom {n}{k} x^ky^{n - k+1} + x^{n+1}+y^{n+1} \<br>&#x3D;\sum_{k&#x3D;0}^{n + 1} \dbinom {n}{k} x^ky^{n+ 1 - k} \<br>即公式对n+1成立<br>$$</p>
<h2 id="组合恒等式"><a href="#组合恒等式" class="headerlink" title="组合恒等式"></a>组合恒等式</h2><p><strong>定理$1$:</strong> $\dbinom{n}{k}&#x3D;\dbinom{n}{n-k}$</p>
<p>**证明$1$:**从组合意义证明，$\dbinom{n}{k}$表示从$n$个物品中留下$k$个的方案数，$\dbinom{n}{n - k}$表示从$n$个物品中拿走$n-k$个的方案数，两者是等价的。</p>
<hr>
<p><strong>定理$2$:</strong>$\dbinom{n}{k}&#x3D;\frac{n}{k}\dbinom{n-1}{k-1}$</p>
<p>**证明$2$:**可以用公式法。$\dbinom{n}{k}&#x3D;\frac{n!}{k!(n-k)!}&#x3D;\frac{n}{k}\times \frac{(n - 1)!}{(k-1)![(n - 1) - (k - 1)]!} &#x3D; \frac{n}{k}\dbinom{n-1}{k-1}$</p>
<hr>
<p><strong>定理$3$:</strong>$\dbinom{n}{k}&#x3D;\dbinom{n - 1}{k} + \dbinom{n - 1}{k - 1}$</p>
<p>**证明$3$:**从组合意义证明，$\dbinom{n}{k}$表示从$n$个物品中选$k$个的方案数，考虑当前的物品，有选它与不选两种情况，如果选它，就等价于从$n - 1$个物品中选$k - 1$的方案数$\dbinom{n - 1}{k}$；如果不选，就等价于从$n - 1$个物品中选$k$个的方案数$\dbinom{n - 1}{k - 1}$，相加即是总方案数。</p>
<hr>
<p><strong>定理$4$:</strong> $\sum_{k &#x3D; 0} ^ {n} \dbinom{n}{k} &#x3D; 2^n$</p>
<p>**证明$4$:**从组合意义证明，$\sum_{k &#x3D; 0} ^ {n} \dbinom{n}{k}$表示从$n$个物品中任意选任意个的方案数，考虑每个物品，有选与不选两种情况，一共就有$2^n$种方案数。</p>
<hr>
<p><strong>定理$5$:</strong> $\sum_{k &#x3D; 0} ^ {n} (-1) ^k \dbinom{n}{k} &#x3D; 0$</p>
<p>**证明$5$:**因为$\dbinom{n}{k}&#x3D;\dbinom{n}{n-k}$,且$$\dbinom{n}{k}$$ 和$\dbinom{n}{n-k}$必定反号，所以等于$0$.</p>
<hr>
<p><strong>定理$6$:</strong>$\sum_{k &#x3D; 0} ^ {n} k \dbinom{n}{k} &#x3D; n 2 ^ {n - 1}$</p>
<p>**证明$6$:**因为$\dbinom{n}{k}&#x3D;\frac{n}{k}\dbinom{n-1}{k-1}$，$\sum_{k &#x3D; 0} ^ {n} k \dbinom{n}{k} &#x3D; \sum_0^n n \dbinom{n - 1}{k - 1}&#x3D;n\sum_0^n\dbinom{n - 1}{k - 1} &#x3D; n2^{n - 1}$</p>
<hr>
<p><strong>定理$7$:</strong>$\sum_{l&#x3D;0}^n\dbinom{l}{k} &#x3D; \dbinom{n + 1}{k + 1} n, k \in \mathrm{N}$</p>
<p>**证明$7$:**从组合意义证明，依次考虑每个元素$A_i$是否包含在集合$\mathrm{S}|\mathrm{S} \in \mathrm{A},|\mathrm{S}|&#x3D;k+1$中,含$A_1$，方案数为$\dbinom{n}{k}$,不含$A_1$,含$A_2$,方案数为$\dbinom{n - 1}{k}$,$\dots$,不含$A_1, A_2, \dots, A_{n}$,含$A_{n+1}$，方案数为$\dbinom{0}{k}$。转换为变下项求和。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」二项式相关数学题</title>
    <url>/2021/11/15/2021-11-15-%E4%BA%8C%E9%A1%B9%E5%BC%8F%E7%9B%B8%E5%85%B3%E6%95%B0%E5%AD%A6%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>    

<p><strong>1.</strong> $(3x-2y)^{18}$的展开式中，$x^5y^{13}$系数是什么？$x^8y^9$ 的系数是什么？</p>
<blockquote>
<p>$x^5y^{13}$是第$6$项，系数是$\dbinom{18}{6} \times 3^{5} \times 2^{5}$</p>
<p>$x^8y^9$是第$9$项，系数是$\dbinom{18}{9} \times 3^{8} \times 2 ^ {9}$</p>
</blockquote>
<p>**2.**用二项式定理证明：$3^n&#x3D;\sum\limits_{k&#x3D;0}^n2^k$,扩展此结果，对任意实数$r$ 求和 $\sum\limits_{k&#x3D;0}^nr^k$</p>
<blockquote>
<p>$3^{n} &#x3D; (2 + 1) ^ n &#x3D; \sum_{k &#x3D; 0} ^ n \dbinom{n}{k} 2 ^ {k} \times 1 ^ {n - k} &#x3D; \sum\limits_{k&#x3D;0}^n2^k$</p>
<p>扩展：$\sum_{k &#x3D; 0} ^ n r ^k &#x3D; (r + 1) ^ n$</p>
</blockquote>
<p>**3.**用二项式定理证明：$2^n&#x3D;\sum\limits_{k&#x3D;0}^n(-1)^k\dbinom{n}{k}3^{n-k}$</p>
<blockquote>
<p>$2 ^ n &#x3D; (3 - 1) ^ n &#x3D; (3 + (-1)) ^ n &#x3D; \sum_{k &#x3D; 0} ^ n \dbinom{n}{k} \times 3 ^ {n - k} \times (-1) ^ k &#x3D; \sum_{k &#x3D; 0} ^ n(-1) ^ k \dbinom{n}{k} 3 ^ {n - k}$</p>
</blockquote>
<p>**4.**求和：$\sum\limits_{k&#x3D;0}^n(-1)^k\dbinom{n}{k}10^k$</p>
<blockquote>
<p>$\sum_{k &#x3D; 0} ^ n (-1) ^ k \dbinom{n}{k} 10 ^ k &#x3D; (-10 + 1) ^ n &#x3D; (-9) ^ n$</p>
</blockquote>
<p>**5.**使用组合分析的方法证明：$\dbinom{n}{k} - \dbinom{n-3}{k} &#x3D; \dbinom{n-1}{k-1}+\dbinom{n-2}{k-1}+ \dbinom{n-3}{k-1}$</p>
<blockquote>
<p>$\dbinom{n}{k}$ 表示前$n$个选择$k$个的方案数，$\dbinom{n - 3}{k}$表示前$n - 3$个选择$k$个的方案数，相减就表示至少在$[n - 2, n]$中选择了一个的方案数，相当于依次枚举在前$[n - 3, n - 1]$个中只选择$k - 1$个方案数的和。</p>
</blockquote>
<p>**6.**设 $n$ 是正整数，证明：$\sum\limits_{k&#x3D;0}^n(-1)^k\dbinom{n}{k}^2 &#x3D; \begin{cases} 0，若n是奇数\ (-1)^m\dbinom{2m}{m}， 若n&#x3D;2m\end{cases}$</p>
<blockquote>
<p>当$n$为奇数时，前后可以抵消。   </p>
<p>当$n$为偶数时，$???$</p>
</blockquote>
<p>**7.**求出等于下列表达式的二项式系数：$\dbinom{n}{k} &#x3D; 3\dbinom{n}{k-1}+3\dbinom{n}{k-2}+\dbinom{n}{k-3}$</p>
<blockquote>
</blockquote>
<p>**8.**证明：$\dbinom{r}{k}&#x3D;\frac{r}{r-k}\dbinom{r-1}{k}$,其中$r$为实数，$k$是实数且 $r \neq k$</p>
<blockquote>
<p>$\dbinom{r}{k} &#x3D; \frac{r}{k} \dbinom{r - 1}{k - 1} &#x3D; \frac{r}{k} \times \frac{(r - 1)!}{(k - 1)!(r- k)!} &#x3D; \frac{r}{r-k} \times \dfrac{(r - 1)!}{k!(r-1-k)!} &#x3D; \dfrac{r(r-1)!}{k!(r - k)!} &#x3D; \frac{r}{r - k} \dbinom{r - 1}{k}$</p>
</blockquote>
<p>**9.**求和：$1-\frac{1}{2}\dbinom{n}{1}+\frac{1}{3}\dbinom{n}{2}-\frac{1}{4}\dbinom{n}{3}+…+(-1)^n\frac{1}{n+1}\dbinom{n}{n}$</p>
<blockquote>
<p>$$<br>1-\frac{1}{2}\dbinom{n}{1}+\frac{1}{3}\dbinom{n}{2}-\frac{1}{4}\dbinom{n}{3}+…+(-1)^n\frac{1}{n+1}\dbinom{n}{n} \<br>&#x3D;1 - \dfrac{1 \times n!}{2 \times 1! \times (n - 1)!} + \dfrac{1 \times n!}{3 \times 2! \times (n - 2)!} - \dfrac{1\times n!}{4\times 3! \times(n - 3)}! + \dots + (-1) ^ n \dfrac{1 \times n!}{(n + 1) \times n! \times (n - n)!}\<br>&#x3D; \dfrac{\sum_{k&#x3D;0}^{n} (-1) ^ k \dbinom{n+1}{k+1}}{n + 1}\<br>&#x3D; \dfrac{1}{n+1}<br>$$</p>
</blockquote>
<p>**10.**证明：$\dbinom{n+1}{k+1}&#x3D;\dbinom{0}{k}+\dbinom{1}{k}+…+\dbinom{n-1}{k}+\dbinom{n}{k} 以及m^2&#x3D;2\dbinom{m}{2}+\dbinom{m}{1}$</p>
<blockquote>
<p>从组合意义证明，左式表示从$a_1,a_2,a_3,\dots a_{n + 1}$中选出$k + 1$个元素的方案数。    </p>
<p>那么对于$\dbinom{i}{k}$表示不选前$n - i - 1$个元素，但一定选择第$i$元素，那么就只能从剩下的$i$个元素中再选出$k$个。   </p>
<hr>
<p>从组合意义证明，左式表示从$m$个元素中选出两个元素(可相同)组成有序坐标数，右式表示从$m$个元素中选出两个元素(可相同)组成有序坐标数与横纵坐标相同的坐标数。两式显然相等。</p>
</blockquote>
<p>**11.**求整数 $a$、$b$和$c$，使得对所有的$m$有：$m^3 &#x3D; a\dbinom{m}{3}+b\dbinom{m}{2}+c\dbinom{m}{1}$</p>
<blockquote>
<p>即是 $a &#x3D; 6, b &#x3D; 6, c &#x3D; 1$</p>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」Devu and Flowers</title>
    <url>/2021/11/18/2021-11-18-Devu%20and%20Flowers%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>居然调了半天的组合数？</p>
</blockquote>
<span id="more"></span>    

<h2 id="Devu-and-Flowers"><a href="#Devu-and-Flowers" class="headerlink" title="Devu and Flowers"></a>Devu and Flowers</h2><p><a href="https://vjudge.net/contest/469401#problem/C">link</a></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到$n$很小，第一反应是要状压。   </p>
<p>如果直接求解不太舒服，考虑求补集。   </p>
<p>在不考虑个数的限制下的总方案数是$\dbinom{n+m-1}{n-1}$。   </p>
<p>考虑选择一个种类的花不合法，设为$S_i$。   </p>
<p>$Ans &#x3D; \dbinom{n + m - 1}{n - 1} - \sum_\limits{i &#x3D; 1}^n S_i + \sum_\limits{i,j \in n} (S_i \cup S_j) - \dits$</p>
<p>$S_i &#x3D; \dbinom{n+m-1-a_i-1}{n-1}$   </p>
<p>$S_i \cup S_j &#x3D; \dbinom{n + m - 1 - a_i - 1 - a_j - 1}{n - 1}$</p>
<hr>
<p>结果问题是看到数据范围后求不来组合数了，想了要到一个小时怎么对$1e12$范围里的数求组合数。。。   </p>
<p>其实用$\dbinom{n}{k} &#x3D; \dbinom{n}{n - k}$就行了。</p>
<p>可以看到式子中即使暴力算只会循环不到$20$次。。。   </p>
<p>然后到处都要取模。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">25</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line">LL n, m, a[MAXN], inv[MAXN], ans;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL y)</span> </span>&#123;</span><br><span class="line">	LL res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % Mod;</span><br><span class="line">		x = x * x % Mod;</span><br><span class="line">		y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL x, LL y)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (y &gt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	y = x - y;</span><br><span class="line">	LL res = <span class="number">1ll</span>;</span><br><span class="line">	<span class="keyword">for</span> (LL i = y + <span class="number">1ll</span>; i &lt;= x; i++) &#123;</span><br><span class="line">		res = (res * (i % Mod)) % Mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1ll</span>; i &lt;= x - y; i++) &#123;</span><br><span class="line">		res = res * inv[i] % Mod;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">		inv[i] = <span class="built_in">qpow</span>(i, Mod - <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, sta = <span class="number">1</span>, cnt = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++, sta = <span class="number">1</span>, cnt = <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">		LL tot = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>) &amp; i) &#123;</span><br><span class="line">			cnt++;</span><br><span class="line">			tot += a[j] + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cnt &amp; <span class="number">1</span>) sta = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">		ans = (ans + sta * <span class="built_in">C</span>(n + m - <span class="number">1</span> - tot, n - <span class="number">1</span>) % Mod + Mod) % Mod;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// printf(&quot;%d %lld %lld\n&quot;, cnt, ans, sta * C(n + m - 1 - tot, n - 1));</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」A Simple Chess</title>
    <url>/2021/11/26/2021-11-26-A%20Simple%20Chess%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>可能就只有我会把$i,j$写反吧。。。</p>
<span id="more"></span>

<h2 id="A-Simple-Chess"><a href="#A-Simple-Chess" class="headerlink" title="A Simple Chess"></a>A Simple Chess</h2><p><a href="https://vjudge.net/contest/470752#problem/E">link</a></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先对于每个读进来的坐标从左上到右下排序。  </p>
<p>总方案数是明确的，考虑不合法的方案数。  </p>
<p>因为给定的棋子走的方式比较奇怪，先考虑如何计算出某两个点之间的到达的方案数。<br>假设两个点之间的横距离为$a$，纵距离为$b$，并且走了$x$步**右$2$下$1$<strong>的操作，走了$y$步</strong>右$1$下$2$**的操作。<br>可以列出方程<br>$\begin {cases} 2x + y &#x3D; a \ 2y + x &#x3D; b \end {cases}$<br>$\rightarrow \begin {cases} x &#x3D; \frac{2a-b}{3} \ y &#x3D; \frac{2b-a}{3} \end {cases}$<br>如果$x,y \notin \mathbb{Z}$表示方案数为$0$，直接返回即可。如果满足要求则方案数为$\dbinom{x+y}{x}$</p>
<p>对于每个点$(x_i, y_i)$，考虑从起点到它且不经过其他点的方案数是$dp_i$。如果单纯计算从$(1,1)$到$(x_i, y_i)$的路径数，其中可能会经过排序在它前面的点，这时需要容斥，容斥的系数为先前一个点$j$到$i$的路径数。    </p>
<p>即是 $dp_i &#x3D; \sum_{j &#x3D; 1}^{i - 1} Dist(j, i) \times dp_j$  </p>
<p>最后答案 $Ans &#x3D; \dbinom{n + m}{n} - \sum_{i &#x3D; 1} ^ {cnt} Dist(i, (n, m)) \times dp_i$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><details>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">205</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">110119</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt, cas;</span><br><span class="line"><span class="type">int</span> ans, n, m, sum, fac[Mod + <span class="number">5</span>], dp[Mod + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125; s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % Mod;</span><br><span class="line">        x = x * x % Mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span> || y == x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[x] * <span class="built_in">qpow</span>(fac[y], Mod - <span class="number">2</span>) % Mod * <span class="built_in">qpow</span>(fac[x - y], Mod - <span class="number">2</span>) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Lucas</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1ll</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">C</span>(x % Mod, y % Mod) * <span class="built_in">Lucas</span>(x / Mod, y / Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dis</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = s[q].x - s[p].x, b = s[q].y - s[p].y;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">2</span> * a - b) % <span class="number">3</span> != <span class="number">0</span> || (<span class="number">2</span> * b - a) % <span class="number">3</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x = (<span class="number">2</span> * a - b) / <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> y = (<span class="number">2</span> * b - a) / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Lucas</span>(x + y, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x == b.x) ? a.y &lt; b.y : a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"></span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; Mod - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % Mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;n, &amp;m, &amp;cnt) != EOF) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cnt + <span class="number">5</span>; i++) &#123;</span><br><span class="line">            s[i].x = s[i].y = dp[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;s[i].x, &amp;s[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        s[++cnt].x = <span class="number">1</span>, s[cnt].y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(s + <span class="number">1</span>, s + <span class="number">1</span> + cnt, cmp);</span><br><span class="line"></span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1ll</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                dp[i] = (dp[i] - <span class="built_in">Dis</span>(j, i * dp[j] % Mod + Mod) % Mod; <span class="comment">// 此处的 i, j写反了!!!!!!</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s[++cnt].x = n, s[cnt].y = m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">            ans = ((ans + dp[i] * <span class="built_in">Dis</span>(i, cnt)) % Mod + Mod) % Mod;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%lld: %lld\n&quot;</span>, ++cas, ans);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」HDU-6314 Matrix</title>
    <url>/2021/11/17/2021-11-17-Matrix%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>确实可以推广到一般性题目</p>
<span id="more"></span>    

<h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h2><p><a href="https://vjudge.net/contest/469209#problem/B">link</a></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>原来一直不理解容斥，这道题可以作为一个一般性容斥题目的母题。   </p>
<hr>
<p>首先可以考虑只有行的时候。   </p>
<p>设$g_i$为<strong>至少</strong>有$i$行是黑色的方案数。   </p>
<p>显然$g_i &#x3D; \sum_\limits{i&#x3D;a}^{n} f_i \dbinom{n}{i} \times 2 ^ {n - i}$其中$f_k$为容斥系数。   </p>
<p>那么可以知道$\sum_\limits{i&#x3D;a}^n f_i\dbinom{n}{i} &#x3D; 1$</p>
<p>就可以开始推式子了。<br>$$<br>\begin{aligned}<br>1 &amp;&#x3D; \sum_\limits{i&#x3D;a}^n f_i\dbinom{n}{i} \<br>1 &amp;&#x3D; \sum_\limits{i&#x3D;a}^{n-1} f_i\dbinom{n}{i} + f_n\<br>1 &amp;&#x3D; \sum_\limits{i&#x3D;a}^{n-1} f_i\Big(\dbinom{n - 1}{i - 1} + \dbinom{n - 1}{i}\Big) + f_n \<br>f_n &amp;&#x3D; 1 - \sum_\limits{i&#x3D;a}^{n-1} f_i\Big(\dbinom{n - 1}{i - 1} + \dbinom{n - 1}{i}\Big)\<br>f_n &amp;&#x3D; 1 - \sum_\limits{i&#x3D;a}^{n-1}\dbinom{n - 1}{i - 1} f_i - \sum_\limits{i&#x3D;a}^{n-1} \dbinom{n - 1}{i} f_i \<br>f_n &amp;&#x3D; -\sum_\limits{i&#x3D;a}^{n-1} \dbinom{n - 1}{i - 1} f_i<br>\end{aligned}<br>$$</p>
<p>然后加入列的贡献。   </p>
<p>$g_i &#x3D; \sum_\limits{i&#x3D;a}^{n} \sum_\limits{j&#x3D;b}^{m} f_{1,i} \dbinom{n}{i} f_{2,j}\dbinom{m}{j} \times 2 ^ {(n - i) \times (m - j)}$</p>
<p>时间复杂度是$\mathcal{O(n^2 + m^2 + nm)}$</p>
<p>显然不会超时。   </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a, b;</span><br><span class="line"><span class="type">int</span> f[<span class="number">5</span>][MAXN];</span><br><span class="line"></span><br><span class="line">LL C[MAXN][MAXN], ans;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % Mod;</span><br><span class="line">        x = x * x % Mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1ll</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3000</span>; i++) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1ll</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            C[i][j] = (C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]) % Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;n, &amp;m, &amp;a, &amp;b) != EOF) &#123;</span><br><span class="line"></span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line"></span><br><span class="line">        f[<span class="number">1</span>][a] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a + <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = a; j &lt; i; j++) &#123;</span><br><span class="line">                f[<span class="number">1</span>][i] = (f[<span class="number">1</span>][i] - C[i - <span class="number">1</span>][j - <span class="number">1</span>] * f[<span class="number">1</span>][j] % Mod + Mod) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f[<span class="number">2</span>][b] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = b + <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = b; j &lt; i; j++) &#123;</span><br><span class="line">                f[<span class="number">2</span>][i] = (f[<span class="number">2</span>][i] - C[i - <span class="number">1</span>][j - <span class="number">1</span>] * f[<span class="number">2</span>][j] % Mod + Mod) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = b; j &lt;= m; j++) &#123;</span><br><span class="line">                ans = (ans + f[<span class="number">1</span>][i] * C[n][i] % Mod * f[<span class="number">2</span>][j] % Mod * C[m][j] % Mod * <span class="built_in">qpow</span>(<span class="number">2</span>, (n - i) * (m - j)) % Mod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans % Mod);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」组合数学测试</title>
    <url>/2021/11/27/2021-11-27-%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E6%B5%8B%E8%AF%95%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>组合数学测试题解</p>
<span id="more"></span>

<h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="jump"><a href="#jump" class="headerlink" title="jump"></a>jump</h3><p><a href="http://222.180.160.110:1024/problem/17260">link</a></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>感性观察+手玩可以在<code>5min</code>内得到结论。<br>走的路径如下图所示。<br><img data-src="https://chenjg41.gitee.io/assets/images/2021-11-27Pic1.png" alt="T1"><br>如果行比列多，就把行列反过来。<br>得到式子是:$\dbinom{n + m + 1}{m + 1} + m$，上下项的差很小，可以暴力求。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2000005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % Mod;</span><br><span class="line">		x = x * x % Mod;</span><br><span class="line">		y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ((x - y) &gt; (x - (x - y))) y = x - y;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> res = <span class="number">1ll</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = y + <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">		res = (res * (i % Mod)) % Mod;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x - y; i++) &#123;</span><br><span class="line">		res = (res * <span class="built_in">qpow</span>(i, Mod - <span class="number">2</span>) % Mod);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;jump.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;jump.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">if</span> (n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line"></span><br><span class="line">    ans = (<span class="built_in">C</span>(n + m + <span class="number">1</span>, m + <span class="number">1</span>) + m) % Mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p><a href="http://222.180.160.110:1024/problem/3081">link</a></p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>其实就是个康托展开。    </p>
<p> <del>考试时真心没搞清楚题意，于是放弃了。。。</del><br>但是有重复元素。        可以用如下流程操作。   </p>
<ul>
<li>用桶记录每个数的个数。</li>
<li>对于每一位，枚举小于当前位的数字</li>
<li>如果还有可用的，填进去，计算后面的数字产生全排列的贡献</li>
<li>把当前位的数字个数减一</li>
</ul>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="type">int</span> n, ans, tot[MAXN], C[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;count.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;count.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            C[i][j] = C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        tot[s[i] - <span class="number">48</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s[i] - <span class="number">48</span>; j++) <span class="keyword">if</span>(tot[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            tot[j]--;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">1</span>, sum = n - i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">9</span>; k++) &#123;</span><br><span class="line">                res *= C[sum][sum - tot[k]];</span><br><span class="line">                sum -= tot[k];</span><br><span class="line">            &#125;</span><br><span class="line">            tot[j]++;</span><br><span class="line">            ans += res;</span><br><span class="line">        &#125;</span><br><span class="line">        tot[s[i] - <span class="number">48</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h3><p><a href="...">link</a><br>我是真的脑子进水了。<br>居然忘了乘每项前的系数，看了半天还没发现。   </p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>直接隔板法。<br>方案中如果不考虑数字的limit，那么可以有$\dbinom{m + k - 1}{m - 1}$。<br>然后枚举有多少个填进去的数不合法。  </p>
<p>方案数是 $\dbinom{k + m - 1 - i \times n}{m - 1}$，注意不合法的板子可以插的地方不唯一，要乘上系数 $\dbinom{m}{i}$。<br>结果写着写着就忘了。    </p>
<p>本题就可以直接奇减偶加容斥求解。    </p>
<p>$Ans &#x3D; \dbinom{k + m - 1}{m - 1} - {\Large\sum_{i &#x3D; 1}^n} \dbinom{k + m - 1 - i \times n}{m - 1} \dbinom{m}{i} \times (-1)^i$</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, m, k;</span><br><span class="line"></span><br><span class="line">LL fac[MAXN &lt;&lt; <span class="number">1</span>], inv[MAXN &lt;&lt; <span class="number">1</span>], ans;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	LL res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % Mod;</span><br><span class="line">		x = x * x % Mod;</span><br><span class="line">		y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> fac[x] * inv[y] % Mod * inv[x - y] % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;encoding.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;encoding.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2e5</span>; i++) fac[i] = fac[i - <span class="number">1</span>] * i % Mod;</span><br><span class="line">	inv[<span class="number">200000</span>] = <span class="built_in">qpow</span>(fac[<span class="number">200000</span>], Mod - <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2e5</span> - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) inv[i] = inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % Mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">        LL ans = <span class="built_in">C</span>(k + m - <span class="number">1</span>, m - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, sta = <span class="number">-1</span>; i &lt;= m; i++, sta *= <span class="number">-1</span>) &#123;</span><br><span class="line">            ans = (ans + <span class="built_in">C</span>(k + m - <span class="number">1</span> - i * n, m - <span class="number">1</span>) * <span class="built_in">C</span>(m, i) * (sta) + Mod) % Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><h3 id="against"><a href="#against" class="headerlink" title="against"></a>against</h3><p><a href="...">link</a>   </p>
<p>数组开小了 + <code>cmp</code>函数自带大场数 + 忘记处理循环后的遗留数据 &#x3D; 0</p>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>没什么好说的。。。   </p>
<p>在代码里把错误标出来吧。。。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, tot[MAXN], cnt, ans, sum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> v[<span class="number">6</span>], wid;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> key;</span><br><span class="line">&#125; s[MAXN], tmp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) <span class="keyword">if</span>(tmp[x].v[i] != tmp[y].v[i]) &#123;</span><br><span class="line">		flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x.wid != y.wid) <span class="keyword">return</span> x.wid &lt; y.wid;</span><br><span class="line">    <span class="comment">// 哈哈，sort直接TLE</span></span><br><span class="line">	<span class="comment">// for (int i = 1; i &lt;= 5; i++) &#123;</span></span><br><span class="line">	<span class="comment">// 	if (x.v[i] != y.v[i]) &#123;</span></span><br><span class="line">	<span class="comment">// 		return x.v[i] &lt; y.v[i];</span></span><br><span class="line">	<span class="comment">// 	&#125;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">// return true;</span></span><br><span class="line">	<span class="keyword">return</span> x.key &lt; y.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;against.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;against.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">read</span>(n);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// double st1 = time(0);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">read</span>(s[i].v[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(s[i].v + <span class="number">1</span>, s[i].v + <span class="number">1</span> + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> sta = <span class="number">1</span>; sta &lt; (<span class="number">1</span> &lt;&lt; <span class="number">5</span>); sta++) &#123;</span><br><span class="line">			cnt++; <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">5</span>; k++) <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; k - <span class="number">1</span>) &amp; sta) &#123;</span><br><span class="line">				tmp[cnt].v[++p] = s[i].v[k];</span><br><span class="line">				tmp[cnt].key = tmp[cnt].key * <span class="number">13331</span> + s[i].v[k]; <span class="comment">// 考试没有hash，直接cmp自带大常数</span></span><br><span class="line">			&#125;</span><br><span class="line">			tmp[cnt].wid = p;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// double st = time(0);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// printf(&quot;%ld\n&quot;, st - st1);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(tmp + <span class="number">1</span>, tmp + <span class="number">1</span> + cnt, cmp);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// double ed = time(0);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// printf(&quot;%lf\n&quot;, ed - st);  没有hash的排序跑了 9ms 哈哈哈哈。。。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// for (int i = 1; i &lt;= cnt; i++) &#123;</span></span><br><span class="line">	<span class="comment">//     printf(&quot;%d : &quot;, i);</span></span><br><span class="line">	<span class="comment">//     for (int j = 1; j &lt;= 5; j++) &#123;</span></span><br><span class="line">	<span class="comment">//         printf(&quot;%d &quot;, tmp[i].v[j]);</span></span><br><span class="line">	<span class="comment">//     &#125;</span></span><br><span class="line">	<span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">check</span>(i, i - <span class="number">1</span>)) &#123;</span><br><span class="line">			sum++;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			tot[tmp[i - <span class="number">1</span>].wid] += (sum * (sum - <span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">			sum = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	tot[tmp[cnt - <span class="number">1</span>].wid] += (sum * (sum - <span class="number">1</span>)) / <span class="number">2</span>;  <span class="comment">// 考试时没写，结果过样例了。哈哈哈哈。</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, sta = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++, sta *= <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="comment">// printf(&quot;%lld\n&quot;, tot[i]);</span></span><br><span class="line">		ans += sta * tot[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// printf(&quot;%d\n&quot;, ans);</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ((<span class="type">long</span> <span class="type">long</span>)n * (n - <span class="number">1</span>) / <span class="number">2</span>) - ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」二项式反演乱搞</title>
    <url>/2021/11/29/2021-11-29-%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94%E4%B9%B1%E6%90%9E/</url>
    <content><![CDATA[<p>均为口胡</p>
<span id="more"></span>

]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」文理分科 &amp; 圈地计划</title>
    <url>/2021/12/09/2021-12-09-%E6%96%87%E7%90%86%E5%88%86%E7%A7%91%20&amp;%20%E5%9C%88%E5%9C%B0%E8%AE%A1%E5%88%92%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>网络流建图</p>
<span id="more"></span>



<h2 id="文理分科"><a href="#文理分科" class="headerlink" title="文理分科"></a>文理分科</h2><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p><a href="https://www.luogu.com.cn/problem/P4313">link</a></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可以知道，每个点只能选择 <strong>文</strong>&#x2F;<strong>理</strong> 中的一种，那么可以将其转化为一个二分图最小割的问题。   </p>
<p>把每个点的贡献拆开，一部分是自己选科后的贡献 <code>art_i</code>或<code>science_i</code> ，一部分是与相邻同学在一起产生的贡献 <code>same_art_i</code> 或 <code>same_science_i</code>。</p>
<p>那么把点分成 <code>i</code> ， <code>i&#39;</code> ， <code>i&#39;&#39;</code>。   </p>
<p>如下图</p>
<p><img data-src="https://chenjg41.gitee.io/assets/images/2021-12-09-1.png" alt="pic"></p>
<p>将<code>i&#39;</code>向周围的四个点<code>j1~j4</code>连边，边权为<code>same_art_i</code>，再将<code>j1~j4</code>向<code>i&#39;&#39;</code></p>
<p>连边，边权为<code>same_science_i</code>。   </p>
<p>为什么是对的呢？</p>
<p>因为根据最小割定义，它会将图分成两个集合。    </p>
<p>由于题目中二选一的限制，划分后可以保证每个学生只选一门。   </p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, st, ed, now, ans, tmp, d[MAXM], cur[MAXM];</span><br><span class="line"><span class="type">int</span> art[MAXN][MAXN], sci[MAXN][MAXN], sa[MAXN][MAXN], ss[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>, head[MAXM], ver[MAXM], edge[MAXM], nxt[MAXM];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">// printf(&quot;%d %d %d\n&quot;, u, v, c);</span></span><br><span class="line">    ver[++tot] = v, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">    ver[++tot] = u, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">push</span>(st), d[st] = <span class="number">1</span>, cur[st] = head[st];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = ver[i];</span><br><span class="line">            <span class="keyword">if</span> (!edge[i] || d[v] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(v); cur[v] = head[v];</span><br><span class="line">            d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line"><span class="comment">//  printf(&quot;%d %d %d\n&quot;, now, u, d[u]);</span></span><br><span class="line">    <span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> res = flow, k, i;</span><br><span class="line">    <span class="keyword">for</span> (i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = ver[i];</span><br><span class="line">        <span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        now++;</span><br><span class="line">        k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">        now--;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) d[v] = <span class="number">0</span>;</span><br><span class="line">        edge[i] -= k, edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">        res -= k;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ind</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - <span class="number">1</span>) * m + y; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ind1</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - <span class="number">1</span>) * m + y + n * m; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ind2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - <span class="number">1</span>) * m + y + n * m * <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// freopen(&quot;B.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">	st = n * m * <span class="number">3</span> + <span class="number">1</span>, ed = n * m * <span class="number">3</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;art[i][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sci[i][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sa[i][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ss[i][j]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="built_in">AddEdge</span>(st, <span class="built_in">ind</span>(i, j), art[i][j]);</span><br><span class="line">			<span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(i, j), ed, sci[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="built_in">AddEdge</span>(st, <span class="built_in">ind1</span>(i, j), sa[i][j]);</span><br><span class="line">			<span class="built_in">AddEdge</span>(<span class="built_in">ind2</span>(i, j), ed, ss[i][j]);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">4</span>; k++) &#123;</span><br><span class="line">				<span class="type">int</span> nx = i + dx[k], ny = j + dy[k];</span><br><span class="line">				<span class="comment">// printf(&quot;%d %d\n&quot;, nx, ny);</span></span><br><span class="line">				<span class="keyword">if</span> (nx &lt; <span class="number">1</span> || ny &lt; <span class="number">1</span> || nx &gt; n || ny &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="built_in">AddEdge</span>(<span class="built_in">ind1</span>(i, j), <span class="built_in">ind</span>(nx, ny), INF);</span><br><span class="line">				<span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(nx, ny), <span class="built_in">ind2</span>(i, j), INF);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			ans += art[i][j] + sci[i][j] + sa[i][j] + ss[i][j];	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) &#123;</span><br><span class="line">            ans -= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="圈地计划"><a href="#圈地计划" class="headerlink" title="圈地计划"></a>圈地计划</h2><h3 id="link-1"><a href="#link-1" class="headerlink" title="link"></a>link</h3><p><a href="https://www.luogu.com.cn/problem/P1935">link</a></p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>其实可以转换到与上一道题差不多。<br>但是它对周围造成的贡献是反的。   </p>
<p>考虑黑白染色。<br>如果当前点是黑的，那么就把 <code>a_i</code> 和 <code>b_i</code> 交换，即可完成反向。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5</span> * <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[MAXN][MAXN], b[MAXN][MAXN], c[MAXN][MAXN], cur[MAXM], d[MAXM];</span><br><span class="line"><span class="type">int</span> st, ed, ans, tmp, tot = <span class="number">1</span>, head[MAXM], nxt[MAXM], edge[MAXM], ver[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ind</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x - <span class="number">1</span>) * m + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    ver[++tot] = v, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">    ver[++tot] = u, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">push</span>(st), d[st] = <span class="number">1</span>, cur[st] = head[st];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = ver[i];</span><br><span class="line">            <span class="keyword">if</span> (!edge[i] || d[v] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(v); cur[v] = head[v];</span><br><span class="line">            d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> res = flow, k, i;</span><br><span class="line">    <span class="keyword">for</span> (i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = ver[i];</span><br><span class="line">        <span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) d[v] = <span class="number">0</span>;</span><br><span class="line">        edge[i] -= k, edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">        res -= k;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">	st = n * m * <span class="number">4</span> + <span class="number">1</span>, ed = n * m * <span class="number">4</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">			ans += a[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i][j]);</span><br><span class="line">			ans += b[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == (j &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">				<span class="built_in">swap</span>(a[i][j], b[i][j]);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">AddEdge</span>(st, <span class="built_in">ind</span>(i, j), a[i][j]);</span><br><span class="line">			<span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(i, j), ed, b[i][j]);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k++) &#123;</span><br><span class="line">				<span class="type">int</span> nx = i + dx[k];</span><br><span class="line">				<span class="type">int</span> ny = j + dy[k];</span><br><span class="line">				<span class="keyword">if</span> (nx &lt; <span class="number">1</span> || ny &lt; <span class="number">1</span> || nx &gt; n || ny &gt; m) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">				<span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(i, j), <span class="built_in">ind</span>(nx, ny), c[i][j] + c[nx][ny]);</span><br><span class="line"></span><br><span class="line">				ans += c[i][j];</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">bfs</span>()) &#123;</span><br><span class="line">		<span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans -= tmp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络流</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」最大权闭合子图 习题</title>
    <url>/2021/12/11/2021-12-11-%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE%20%E4%B9%A0%E9%A2%98%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>做题记录</p>
<span id="more"></span>

<h2 id="小M的作物"><a href="#小M的作物" class="headerlink" title="小M的作物"></a>小M的作物</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P1361">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p><del>直接用文理分科思路直接碾过去</del>   </p>
<p>如果非要用最大权闭合子图解释也是可以的。<br>那么可以先把每个点分别向 $A,B$ 集合连边， 可以清晰地看到其中的依赖关系， 即是每个额外价值依赖于其中的作物。   </p>
<p>然后建虚点表示额外价值向每个作物连边即可。   </p>
<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, cnt, cur[MAXM], d[MAXM], deg[MAXN];</span><br><span class="line"><span class="type">int</span> st, ed, ans, tmp, tot = <span class="number">1</span>, head[MAXM], nxt[MAXM], edge[MAXM], ver[MAXM];</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// printf(&quot;--%d %d %d\n&quot;, u, v, c);</span></span><br><span class="line">	ver[++tot] = v, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">    ver[++tot] = u, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">push</span>(st), d[st] = <span class="number">1</span>, cur[st] = head[st];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = ver[i];</span><br><span class="line">            <span class="keyword">if</span> (!edge[i] || d[v] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(v); cur[v] = head[v];</span><br><span class="line">            d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> res = flow, k, i;</span><br><span class="line">    <span class="keyword">for</span> (i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = ver[i];</span><br><span class="line">        <span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) d[v] = <span class="number">0</span>;</span><br><span class="line">        edge[i] -= k, edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">        res -= k;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// freopen(&quot;1.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;D.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    st = n + <span class="number">1</span>, ed = cnt = n + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="built_in">AddEdge</span>(st, i, x);</span><br><span class="line">        ans += x;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="built_in">AddEdge</span>(i, ed, x);</span><br><span class="line">        ans += x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k, c1, c2; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;k, &amp;c1, &amp;c2);</span><br><span class="line">        cnt++; </span><br><span class="line">        <span class="built_in">AddEdge</span>(st, cnt, c1);</span><br><span class="line">        <span class="built_in">AddEdge</span>(cnt + <span class="number">1</span>, ed, c2);</span><br><span class="line">        ans += c1, ans += c2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, v; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v);</span><br><span class="line">            <span class="built_in">AddEdge</span>(cnt, v, INF);</span><br><span class="line">            <span class="built_in">AddEdge</span>(v, cnt + <span class="number">1</span>, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;, ans);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans -= tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Strange-Set"><a href="#Strange-Set" class="headerlink" title="Strange Set"></a>Strange Set</h2><h3 id="mathcal-Link-1"><a href="#mathcal-Link-1" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://codeforces.com/problemset/problem/1473/F">link</a></p>
<h3 id="mathcal-Sol-1"><a href="#mathcal-Sol-1" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>体验 $5 \ minutes’ \ time$ 快速切掉 <code>2700</code> 的 <code>F</code> 的快感。   </p>
<p>显然的依赖关系，即是 $a_i$ 依赖于 $a_j \mid a_i (1 \le j &lt; i)$。<br>没看空限，直接 $\mathbb{MLE \ on \ test \ 14}$      </p>
<p>寻求思辨。<br>发现对于每个因数，只需要连最后的那个就行了。   </p>
<h3 id="mathcal-Code-1"><a href="#mathcal-Code-1" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">6e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">6e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, cnt, cur[MAXM], d[MAXM], a[MAXN], b[MAXN];</span><br><span class="line"><span class="type">int</span> st, ed, ans, tmp, tot = <span class="number">1</span>, head[MAXM], nxt[MAXM], edge[MAXM], ver[MAXM];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// printf(&quot;--%d %d %d\n&quot;, u, v, c);</span></span><br><span class="line">	ver[++tot] = v, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">	ver[++tot] = u, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">	q.<span class="built_in">push</span>(st), d[st] = <span class="number">1</span>, cur[st] = head[st];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">			<span class="type">int</span> v = ver[i];</span><br><span class="line">			<span class="keyword">if</span> (!edge[i] || d[v] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(v); cur[v] = head[v];</span><br><span class="line">			d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line">	<span class="type">int</span> res = flow, k, i;</span><br><span class="line">	<span class="keyword">for</span> (i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">		<span class="type">int</span> v = ver[i];</span><br><span class="line">		<span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">0</span>) d[v] = <span class="number">0</span>;</span><br><span class="line">		edge[i] -= k, edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">		res -= k;</span><br><span class="line">		cur[u] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	st = n + <span class="number">1</span>, ed = n + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (b[i] &gt; <span class="number">0</span>) <span class="built_in">AddEdge</span>(st, i, b[i]), ans += b[i];</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">AddEdge</span>(i, ed, -b[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] % a[j] == <span class="number">0</span> &amp;&amp; vis[a[j]] == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">AddEdge</span>(i, j, INF);</span><br><span class="line">				vis[a[j]] = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">bfs</span>()) &#123;</span><br><span class="line">		<span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans -= tmp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络流</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」二项式反演</title>
    <url>/2021/12/13/2021-12-13-%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/</url>
    <content><![CDATA[<p>对于推广的证明</p>
<span id="more"></span>

<p>$$<br>\Large f(n) &#x3D; \sum_{i &#x3D; n}^m \dbinom{i}{n} g(i)<br>\<br>\rightarrow g(n) &#x3D; \sum_{i&#x3D;n}^m (−1)^{i - n} \dbinom{i}{n} f(i)<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」最小割测试</title>
    <url>/2021/12/18/2021-12-18-%E6%9C%80%E5%B0%8F%E5%89%B2%E6%B5%8B%E8%AF%95%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="mathbb-Destroy"><a href="#mathbb-Destroy" class="headerlink" title="$\mathbb{Destroy}$"></a>$\mathbb{Destroy}$</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="http://222.180.160.110:1024/problem/15322">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>没什么好说的，将点拆成两个，注意输入的顺序。   </p>
<p>形式化地，有<br>$$<br>V_N &#x3D; V \cup {s,t}\<br>E_N &#x3D; E \cup {&lt;s, u&gt; \mid u \in V} \cup {&lt;u’, t&gt; \mid u’ \in V’}\<br>\begin{cases}<br>c(s, u) &#x3D; w’_u\<br>c(v’, t) &#x3D; w_v\<br>c(u, v’) &#x3D; \infty\<br>\end{cases}<br>$$</p>
<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e4</span> + <span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXMAP = <span class="number">1e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>); c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tmp, ans, n, m, st, ed, a[MAXN], b[MAXN], d[MAXN], cur[MAXN];</span><br><span class="line"><span class="type">bool</span> vis_st[MAXN], vis_ed[MAXN], linked[MAXMAP][MAXMAP];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>, head[MAXN], nxt[MAXN], edge[MAXN], ver[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ind</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + n * k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">// printf(&quot;%d %d %d\n&quot;, u, v, c);</span></span><br><span class="line">	ver[++tot] = v, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">	ver[++tot] = u, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> st)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">	q.<span class="built_in">push</span>(st), d[st] = <span class="number">1</span>, cur[st] = head[st];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">			<span class="type">int</span> v = ver[i];</span><br><span class="line">			<span class="keyword">if</span> (!edge[i] || d[v] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(v); cur[v] = head[v];</span><br><span class="line">			d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line">	<span class="type">int</span> res = flow, k, i;</span><br><span class="line">	<span class="keyword">for</span> (i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">		<span class="type">int</span> v = ver[i];</span><br><span class="line">		<span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">0</span>) d[v] = <span class="number">0</span>;</span><br><span class="line">		edge[i] -= k, edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">		res -= k;</span><br><span class="line">		cur[u] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;destroy.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;destroy.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">	st = <span class="number">2</span> * n + <span class="number">1</span>, ed = <span class="number">2</span> * n + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">read</span>(b[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (vis_st[u] == <span class="number">0</span>) <span class="built_in">AddEdge</span>(st, <span class="built_in">ind</span>(u, <span class="number">0</span>), b[u]), vis_st[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (linked[<span class="built_in">ind</span>(u, <span class="number">0</span>)][<span class="built_in">ind</span>(v, <span class="number">1</span>)] == <span class="number">0</span>) <span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(u, <span class="number">0</span>), <span class="built_in">ind</span>(v, <span class="number">1</span>), INF), linked[<span class="built_in">ind</span>(u, <span class="number">0</span>)][<span class="built_in">ind</span>(v, <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (vis_ed[v] == <span class="number">0</span>) <span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(v, <span class="number">1</span>), ed, a[v]), vis_ed[v] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">bfs</span>(st)) &#123;</span><br><span class="line">		<span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans += tmp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-Lotus"><a href="#mathbb-Lotus" class="headerlink" title="$\mathbb{Lotus}$"></a>$\mathbb{Lotus}$</h2><h3 id="mathcal-Link-1"><a href="#mathcal-Link-1" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/AT25680">link</a></p>
<h3 id="mathcal-Sol-1"><a href="#mathcal-Sol-1" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>真的吐了，怎么一堆人用$1e6$的点的暴力跑过去。。。<br>其实和<a href="http://222.180.160.110:1024/problem/6454">棋盘上的守卫</a>很相似。   </p>
<p>对于一个点$(x,y)$，从它可以到达第$x$行，第$y$列的所有其他可行的点。<br>那么可以将横纵坐标连接，边的容量为$1$表示这两行&#x2F;列上可行点组成的联通快是可达的。<br>建一个大源&#x2F;汇点，分别连向初始&#x2F;终止点的横纵坐标。边的容量为$+\infty$。   </p>
<p>所以最后整张图只有$n + m$个点。</p>
<p>形式化地，设$V$为所有行列编号组成的点集，$P$为可行点的点集，有<br>$$<br>P &#x3D; {(x,y) \mid map(x,y) &#x3D; o } \<br>V_N &#x3D; V \cup {S,T}\<br>E_N &#x3D; {&lt;u,v’&gt; \mid (u,v) \in P } \cup {&lt;v’,u&gt; \mid (u,v) \in P } \cup &lt;S, s_x&gt; \cup &lt;S, s_y&gt; \cup &lt;t_x, T&gt; \cup &lt;t_y, T&gt;\<br>\begin{cases}<br>c(S, s_x) &#x3D; c(S, s_y) &#x3D; c(t_x, T) &#x3D; c(t_y, T) &#x3D; \infty \<br>c(u, v’) &#x3D; c(v’, u) &#x3D; 1<br>\end{cases}<br>$$</p>
<h3 id="mathcal-Code-1"><a href="#mathcal-Code-1" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXMAP = <span class="number">2e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">4e4</span> + <span class="number">500</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>); c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, st, ed, ans, tmp, cnt = <span class="number">2</span>, d[MAXN], cur[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXMAP][MAXMAP];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>, head[MAXN], nxt[MAXN], edge[MAXN], ver[MAXN];</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">// printf(&quot;%d %d %d\n&quot;, u, v, c);</span></span><br><span class="line">	ver[++tot] = v, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">	ver[++tot] = u, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> st)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">	q.<span class="built_in">push</span>(st), d[st] = <span class="number">1</span>, cur[st] = head[st];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">			<span class="type">int</span> v = ver[i];</span><br><span class="line">			<span class="keyword">if</span> (!edge[i] || d[v] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(v); cur[v] = head[v];</span><br><span class="line">			d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line">	<span class="type">int</span> res = flow, k, i;</span><br><span class="line">	<span class="keyword">for</span> (i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">		<span class="type">int</span> v = ver[i];</span><br><span class="line">		<span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">0</span>) d[v] = <span class="number">0</span>;</span><br><span class="line">		edge[i] -= k, edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">		res -= k;</span><br><span class="line">		cur[u] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;lotus.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;lotus.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">	st = n + m + <span class="number">1</span>, ed = n + m + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="keyword">if</span> (s[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">			<span class="built_in">AddEdge</span>(i, j + n, <span class="number">1</span>); <span class="built_in">AddEdge</span>(j + n, i, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;S&#x27;</span>) <span class="built_in">AddEdge</span>(st, i, INF), <span class="built_in">AddEdge</span>(st, j + n, INF);</span><br><span class="line">			<span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;T&#x27;</span>) <span class="built_in">AddEdge</span>(i, ed, INF), <span class="built_in">AddEdge</span>(j + n, ed, INF);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">bfs</span>(st)) &#123;</span><br><span class="line">		<span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans += tmp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ans &gt;= INF) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-Mincut"><a href="#mathbb-Mincut" class="headerlink" title="$\mathbb{Mincut}$"></a>$\mathbb{Mincut}$</h2><h3 id="mathcal-Link-2"><a href="#mathcal-Link-2" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P4126">link</a></p>
<h3 id="mathcal-Sol-2"><a href="#mathcal-Sol-2" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>读完题，感觉一脸不可做的样子。。。<br>然后考试时写了个暴力，乱开数组，直接$\mathtt{MLE \ \ 0}$。。。   </p>
<p>首先跑一遍最小割，那么，所有的可行边一定满流了。<br>再在残余网络上面跑$\mathtt{SCC}$，如果对于一条必须边，它一定分属于两个集合，否则就是一条可行边。   </p>
<p><del>更形式化的，有</del></p>
<h3 id="mathcal-Code-2"><a href="#mathcal-Code-2" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e5</span> + <span class="number">2e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>); c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, st, ed, now, ans, tmp, cnt[MAXN], d[MAXM], cur[MAXM];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>, head[MAXN], ver[MAXM], edge[MAXM], nxt[MAXM], fr[MAXM], scc;</span><br><span class="line"><span class="type">int</span> dfn[MAXN], low[MAXN], stk[MAXN], vis[MAXN], tp, dn;</span><br><span class="line"><span class="type">bool</span> ex[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">// printf(&quot;%d %d %d\n&quot;, u, v, c);</span></span><br><span class="line">	ver[++tot] = v, fr[tot] = u, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">	ver[++tot] = u, fr[tot] = v, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">	q.<span class="built_in">push</span>(st), d[st] = <span class="number">1</span>, cur[st] = head[st];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="comment">// printf(&quot;%d\n&quot;, u);</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">			<span class="type">int</span> v = ver[i];</span><br><span class="line">			<span class="keyword">if</span> (!edge[i] || d[v] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(v); cur[v] = head[v];</span><br><span class="line">			d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line">	<span class="type">int</span> res = flow, k, i;</span><br><span class="line">	<span class="keyword">for</span> (i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">		<span class="type">int</span> v = ver[i];</span><br><span class="line">		<span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		now++;</span><br><span class="line">		k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">		now--;</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">0</span>) d[v] = <span class="number">0</span>;</span><br><span class="line">		edge[i] -= k, edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">		res -= k;</span><br><span class="line">		cur[u] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">	dfn[u] = low[u] = ++dn; ex[u] = <span class="number">1</span>, stk[++tp] = u;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">		<span class="type">int</span> v = ver[i];</span><br><span class="line">		<span class="keyword">if</span> (!edge[i]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">			<span class="built_in">Tarjan</span>(v, u);</span><br><span class="line">			low[u] = <span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex[v]) &#123;</span><br><span class="line">			low[u] = <span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (low[u] == dfn[u]) &#123;</span><br><span class="line">		<span class="type">int</span> v; scc++;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			v = stk[tp--]; vis[v] = scc; ex[v] = <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">while</span> (v != u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;mincut.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;mincut.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(st), <span class="built_in">read</span>(ed);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; i++) <span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(w), <span class="built_in">AddEdge</span>(u, v, w);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">bfs</span>()) &#123;</span><br><span class="line">		<span class="comment">// printf(&quot;ok\n&quot;);</span></span><br><span class="line">		<span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans += tmp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">			<span class="built_in">Tarjan</span>(i, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">	<span class="comment">// 	printf(&quot;%d &quot;, vis[i]);</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= tot; i += <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// printf(&quot;%d %d %d\n&quot;, fr[i], ver[i], edge[i]);</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (edge[i] != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;0 0\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (vis[fr[i]] != vis[ver[i]]) &#123;</span><br><span class="line">				<span class="keyword">if</span> (vis[ver[i]] == vis[ed] &amp;&amp; vis[fr[i]] == vis[st]) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;1 1\n&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;1 0\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;0 0\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>考试</tag>
        <tag>网络流</tag>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」KM</title>
    <url>/2021/12/23/2021-12-23-KM%20%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>便于记忆。。。</p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">505</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, la[MAXN], lb[MAXN], sl[MAXN], match[MAXN], w[MAXN][MAXN], fa[MAXN], ans, re[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(sl, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(sl)); <span class="comment">// 将 slack 标记清空</span></span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis)); <span class="comment">// 清 vis</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> pos = <span class="number">0</span>, x, p, delta;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (match[pos] = u; match[pos]; pos = p) &#123; <span class="comment">// 迭代模拟递归</span></span><br><span class="line"></span><br><span class="line">		vis[pos] = <span class="number">1</span>, x = match[pos], delta = INF; <span class="comment">// 初始化 置标记,从右部图节点到匹配的左部图,把 delta 置为无穷</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; y++) &#123; <span class="comment">// 遍历右部的节点</span></span><br><span class="line">			<span class="keyword">if</span> (vis[y]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span> (la[x] + lb[y] - w[x][y] &lt; sl[y]) &#123; <span class="comment">// 更新 sl 标记</span></span><br><span class="line">				sl[y] = la[x] + lb[y] - w[x][y];</span><br><span class="line">				fa[y] = pos; <span class="comment">// 记录前驱</span></span><br><span class="line">			&#125; </span><br><span class="line">			<span class="keyword">if</span> (sl[y] &lt; delta) &#123;</span><br><span class="line">				delta = sl[y]; <span class="comment">// 更新 delta</span></span><br><span class="line">				p = y; <span class="comment">// 把 y 丢进去扩展 相当于 dfs(y)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt;= n; y++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (vis[y]) la[match[y]] -= delta, lb[y] += delta; <span class="comment">// 把经过的顶点权值更新</span></span><br><span class="line">			<span class="keyword">else</span> sl[y] -= delta; <span class="comment">// 更新 slack 此处可以消掉一个 n</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (; pos; pos = fa[pos]) match[pos] = match[fa[pos]]; <span class="comment">// 增广重置匹配</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KM</span><span class="params">()</span> </span>&#123; <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">bfs</span>(i); &#125;</span><br></pre></td></tr></table></figure>

<p>整个算法的时间复杂度是 $\mathcal{O(n ^ 3)}$</p>
]]></content>
      <tags>
        <tag>图论</tag>
        <tag>模板</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」二分图多重匹配 习题集</title>
    <url>/2021/12/24/2021-12-24-%E4%BA%8C%E5%88%86%E5%9B%BE%E5%A4%9A%E9%87%8D%E5%8C%B9%E9%85%8D%20%E9%A2%98%E8%A7%A3%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>题解集合</p>
<span id="more"></span>

<h2 id="mathbb-Jamie’s-Contact-Groups"><a href="#mathbb-Jamie’s-Contact-Groups" class="headerlink" title="$\mathbb{Jamie’s Contact Groups}$"></a>$\mathbb{Jamie’s Contact Groups}$</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://vjudge.net/problem/UVALive-3268">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>模板题，对于此类问题，解决方案可以是网络流。<br>对于匈牙利算法，有部分代码需要变动。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[v] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (cnt[v] &lt; limit[v]) &#123; match[v][++cnt[v]] = u; <span class="keyword">return</span> <span class="literal">true</span>; &#125; <span class="comment">//如果还可以继续匹配则继续</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt[v]; j++) &#123; <span class="comment">// 否则就在已匹配的点中增广</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">dfs</span>(match[v][j])) &#123;</span><br><span class="line">				match[v][j] = u; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, l, r, mid, cnt[MAXN], match[MAXN][MAXN];</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">15</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[v] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (cnt[v] &lt; mid) &#123; match[v][++cnt[v]] = u; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt[v]; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">dfs</span>(match[v][j])) &#123;</span><br><span class="line">				match[v][j] = u; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt)); <span class="built_in">memset</span>(match, <span class="number">0</span>, <span class="built_in">sizeof</span>(match));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">dfs</span>(i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// freopen(&quot;E.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="comment">// freopen(&quot;E.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m) &amp;&amp; (n + m)) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j; i &lt;= n; i++) &#123;</span><br><span class="line">			G[i].<span class="built_in">clear</span>();</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tmp); <span class="type">char</span> emsp;</span><br><span class="line">			<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d%c&quot;</span>, &amp;j, &amp;emsp);</span><br><span class="line">				G[i].<span class="built_in">push_back</span>(j); <span class="keyword">if</span> (emsp == <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		l = <span class="number">1</span>, r = n;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">			mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">			<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, l);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-Optimal-Milking"><a href="#mathbb-Optimal-Milking" class="headerlink" title="$\mathbb{Optimal Milking}$"></a>$\mathbb{Optimal Milking}$</h2><h3 id="mathcal-Link-1"><a href="#mathcal-Link-1" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://vjudge.net/problem/OpenJ_Bailian-2112">link</a></p>
<h3 id="mathcal-Sol-1"><a href="#mathcal-Sol-1" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>其实和网络流中奶牛躲雨棚一个思路。   </p>
<p>首先$\mathcal{Floyd}$出来两两点之间的最短路。<br>然后二分答案。用匈牙利判匹配即可。   </p>
<h3 id="mathcal-Code-1"><a href="#mathcal-Code-1" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = (<span class="number">200</span> &lt;&lt; <span class="number">1</span>) + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, l, r, mid, limit, dis[MAXN][MAXN], cnt[MAXN], match[MAXN][MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[v] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (cnt[v] &lt; limit) &#123; match[v][++cnt[v]] = u; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt[v]; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">dfs</span>(match[v][j])) &#123;</span><br><span class="line">				match[v][j] = u; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// printf(&quot;--%d--\n&quot;, mid);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= n + m; i++) G[i].<span class="built_in">clear</span>(); </span><br><span class="line">	<span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt)); <span class="built_in">memset</span>(match, <span class="number">0</span>, <span class="built_in">sizeof</span>(match));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = n + <span class="number">1</span>; j &lt;= n + m; j++) <span class="keyword">if</span> (dis[i][j] &lt;= mid) &#123;</span><br><span class="line">			G[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">			<span class="comment">// printf(&quot;%d %d\n&quot;, j, i);</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">dfs</span>(i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// freopen(&quot;D:\\ChenJiage\\2021-12-23\\F.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="comment">// freopen(&quot;F.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;limit);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n + m; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;dis[i][j]);</span><br><span class="line">			<span class="keyword">if</span> (dis[i][j] == <span class="number">0</span>) dis[i][j] = INF;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n + m; k++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n + m; j++) <span class="keyword">if</span> (i != j)</span><br><span class="line">				dis[i][j] = <span class="built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = n + <span class="number">1</span>; j &lt;= n + m; j++)</span><br><span class="line">			r = <span class="built_in">max</span>(r, dis[i][j]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="comment">// printf(&quot;%d %d %d\n&quot;, l, mid, r);</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, l);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-Steady-Cow-Assignment"><a href="#mathbb-Steady-Cow-Assignment" class="headerlink" title="$\mathbb{Steady Cow Assignment}$"></a>$\mathbb{Steady Cow Assignment}$</h2><h3 id="mathcal-Link-2"><a href="#mathcal-Link-2" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://vjudge.net/problem/SPOJ-STEAD">link</a></p>
<h3 id="mathcal-Sol-2"><a href="#mathcal-Sol-2" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>哈哈哈哈，这个阴间输入，哈哈哈。   </p>
<p>输入挂了，一直$\mathtt{WA \ Test \ 6}$，总共就 $\mathtt{7}$个点。<br>什么鬼东西。。。   </p>
<p>然后值域很小，直接枚举区间就能过。   </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">25</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, ans, limit[MAXM], p[MAXN][MAXM], match[MAXM][MAXN], cnt[MAXM];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[v] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (cnt[v] &lt; limit[v]) &#123; match[v][++cnt[v]] = u; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt[v]; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">dfs</span>(match[v][j])) &#123;</span><br><span class="line">				match[v][j] = u; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line">	<span class="built_in">memset</span>(match, <span class="number">0</span>, <span class="built_in">sizeof</span>(match));</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) G[i].<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="keyword">if</span> (p[i][j] &gt;= l &amp;&amp; p[i][j] &lt;= r) &#123;</span><br><span class="line">			G[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">dfs</span>(i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// freopen(&quot;G.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="comment">// freopen(&quot;G.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, x; j &lt;= m; j++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), p[i][x] = j;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;limit[i]);</span><br><span class="line"></span><br><span class="line">	ans = INF;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= m; l++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> r = l; r &lt;= m; r++) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">check</span>(l, r)) ans = <span class="built_in">min</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>图论,二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」[BJOI2012]连连看</title>
    <url>/2022/01/06/2022-01-06-%5BBJOI2012%5D%E8%BF%9E%E8%BF%9E%E7%9C%8B%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>顺带练习 $dij + EK$ 求费用流</p>
<span id="more"></span> 

<h2 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h2><p><a href="https://www.luogu.com.cn/problem/P4134">link</a></p>
<h2 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h2><p>这种两两配对的题盲猜是二分图。<br>但事实证明是这道题只在 $1≤a,b≤1000$ 的情况下成立。。。   </p>
<p>可是并不妨碍做题。   </p>
<p>看到分数最大考虑把它转化为一个费用流解决的问题，那么先拆点，从源向每个数的入点连边，从每个数的出点向汇点连边，容量为 $1$，费用为 $0$， 如果两两点之间可以产生贡献，就交叉连边，容量为 $1$， 费用为点权。   </p>
<p>形式化地有:</p>
<p>$$<br>V_N &#x3D; V \cup V’ \cup {s,t}\<br>E &#x3D; {&lt;u, v&gt; \mid (u, v) \ \mathrm{satisfies \ the \ requirement \ above} } \<br>E_N &#x3D; E \cup {&lt;s, u&gt; \mid u \in V} \cup {&lt;u’, t&gt; \mid u’ \in V’}\<br>\begin{cases}<br>c(s, u) &#x3D; 1, w(s, u) &#x3D; 0\<br>c(u’, t) &#x3D; 1, w(u’, t) &#x3D; 0\<br>c(u, v’) &#x3D; 1, w(u, v’) &#x3D; u + v\<br>c(v, u’) &#x3D; 1, w(v, u’) &#x3D; u + v\<br>\end{cases}<br>$$</p>
<p>建完图跑一个最大费用最大流就好了。</p>
<h2 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h2><p>关于 $dij + EK$ 写法。   </p>
<p>因为 $dij$ 无法处理负权， 可以给每个点加上势能函数 $h_u$ ，然后把 $w_{u, v}$ 替换成 $h_u - h_v + w_{u, v}$。 只要可以保证 $w_{u, v} \le h_u - h_v + w_{u, v}$ 就可以把负边干掉。 那么可以先跑一次 $\mathrm{SPFA}$，把$h_i$设成$dis_i$就可以了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> con make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, st, ed, ans, tmp, mincost, mark[MAXN * MAXN], h[MAXN], pre[MAXN], flow[MAXN];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>, head[MAXN], edge[MAXM], cost[MAXM], nxt[MAXM], ver[MAXM], dis[MAXN], cur[MAXN], d[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt; &gt; que; </span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    ver[++tot] = v, edge[tot] = c, cost[tot] = w, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">    ver[++tot] = u, edge[tot] = <span class="number">0</span>, cost[tot] = -w, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> st)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * m + <span class="number">2</span>; i++) dis[i] = INF;</span><br><span class="line"></span><br><span class="line">	dis[st] = <span class="number">0</span>, q.<span class="built_in">push</span>(st), vis[st] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		vis[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">			<span class="type">int</span> v = ver[i];</span><br><span class="line">			<span class="keyword">if</span> (!edge[i] || dis[v] &lt;= dis[u] + cost[i]) <span class="keyword">continue</span>;</span><br><span class="line">			dis[v] = dis[u] + cost[i];</span><br><span class="line">			<span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">				vis[v] = <span class="number">1</span>; q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * m + <span class="number">2</span>; i++) h[i] = dis[i];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (dis[ed] &lt; INF);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dijstra</span><span class="params">(<span class="type">int</span> st)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) que.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * m + <span class="number">2</span>; i++) dis[i] = INF;</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="built_in">sizeof</span>(pre));</span><br><span class="line"></span><br><span class="line">    que.<span class="built_in">push</span>(<span class="built_in">con</span>(<span class="number">0</span>, st)), dis[st] = <span class="number">0</span>, flow[st] = INF;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = que.<span class="built_in">top</span>().second; que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = ver[i];</span><br><span class="line">            <span class="keyword">if</span> (!edge[i] || dis[v] &lt;= dis[u] + cost[i] + h[u] - h[v]) <span class="keyword">continue</span>;</span><br><span class="line">            dis[v] = dis[u] + cost[i] + h[u] - h[v]; pre[v] = i; flow[v] = <span class="built_in">min</span>(flow[u], edge[i]);</span><br><span class="line">            que.<span class="built_in">push</span>(<span class="built_in">con</span>(dis[v], v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (dis[ed] &lt; INF);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mark[y * y - x * x] != <span class="number">0</span> &amp;&amp; <span class="built_in">gcd</span>(x, mark[y * y - x * x]) == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) mark[i * i] = i;</span><br><span class="line"></span><br><span class="line">    st = <span class="number">2</span> * m + <span class="number">1</span>, ed = <span class="number">2</span> * m + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">AddEdge</span>(st, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">AddEdge</span>(i + m, ed, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= m; j++) <span class="keyword">if</span> (<span class="built_in">check</span>(i, j)) &#123;</span><br><span class="line">			<span class="comment">// printf(&quot;--%d %d\n&quot;, i, j);</span></span><br><span class="line">			<span class="built_in">AddEdge</span>(i, j + m, <span class="number">1</span>, -(i + j));</span><br><span class="line">			<span class="built_in">AddEdge</span>(j, i + m, <span class="number">1</span>, -(i + j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">spfa</span>(st);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">dijstra</span>(st)) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * m + <span class="number">2</span>; i++) h[i] = <span class="built_in">min</span>(h[i] + dis[i], INF);</span><br><span class="line">        ans += flow[ed]; mincost += flow[ed] * h[ed];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = ed; i != st; i = ver[pre[i] ^ <span class="number">1</span>]) &#123;</span><br><span class="line">            edge[pre[i]] -= flow[ed], edge[pre[i] ^ <span class="number">1</span>] += flow[ed];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans / <span class="number">2</span>, -mincost / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>图论,二分图,网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」Fairy</title>
    <url>/2021/12/28/2021-12-28-CF19E%20Fairy%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><del>十年前的紫题?</del></p>
<span id="more"></span>

<h2 id="mathbb-Fairy"><a href="#mathbb-Fairy" class="headerlink" title="$\mathbb{Fairy}$"></a>$\mathbb{Fairy}$</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="http://codeforces.com/problemset/problem/19/E">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>这道题充分说明我二分图没整抻抖。   </p>
<p>考察了一个基本的性质，如果这张图是二分图，那么图中一定不含奇环。<br>然而我再知道性质的情况下不会做。。。   </p>
<p>再重新理一遍思路。   </p>
<h4 id="mathcal-Part-1-Dfs"><a href="#mathcal-Part-1-Dfs" class="headerlink" title="$\mathcal{Part \ 1 \ Dfs}$"></a>$\mathcal{Part \ 1 \ Dfs}$</h4><p>首先染色，根据染色规律可以知道，如果一个点与它相邻的某个点染上了同样的颜色，则它存在于奇环上。<br>于是可以树上差分维护。<br>注意判断返租边应该是<code>dep[v] &lt; dep[u] - 1</code>。<br>顺便记录奇环的个数。   </p>
<h4 id="mathcal-Part-2-Check"><a href="#mathcal-Part-2-Check" class="headerlink" title="$\mathcal{Part \ 2 \ Check}$"></a>$\mathcal{Part \ 2 \ Check}$</h4><ul>
<li>如果有偶环，<strong>偶环上的所有边都不能删</strong></li>
<li>如果没有奇环，所有边都可以删</li>
<li>如果有一个奇环，这个奇环上的所有边都能删</li>
<li>如果有多个奇环，所有奇环上的边都能删</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, cut, col[MAXN], dep[MAXN], sum1[MAXN], sum2[MAXN], ind[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> v, id;</span><br><span class="line">	<span class="built_in">Edge</span>() &#123;&#125; <span class="built_in">Edge</span>(<span class="type">int</span> V, <span class="type">int</span> Id) &#123; v = V, id = Id; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Edge&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	col[u] = c; dep[u] = dep[fa] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i].v;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!col[v]) &#123;</span><br><span class="line">			<span class="built_in">paint</span>(v, col[u] * <span class="number">-1</span>, u);</span><br><span class="line">			ind[v] = G[u][i].id;</span><br><span class="line">			sum1[u] += sum1[v]; sum2[u] += sum2[v];</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dep[v] &lt; dep[u] - <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (col[v] == col[u]) cut = G[u][i].id, sum1[u]++, sum1[v]--, tot++;</span><br><span class="line">			<span class="keyword">else</span> sum2[u]++, sum2[v]--;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// freopen(&quot;CF19E.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="comment">// freopen(&quot;CF19E.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		G[u].<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(v, i)); G[v].<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(u, i));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!col[i]) <span class="built_in">paint</span>(i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tot == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, m); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tot == <span class="number">1</span>) &#123;</span><br><span class="line">		ans.<span class="built_in">push_back</span>(cut);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (sum1[i] == tot &amp;&amp; !sum2[i]) &#123;</span><br><span class="line">		ans.<span class="built_in">push_back</span>(ind[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">	ans.<span class="built_in">resize</span>(<span class="built_in">unique</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>()) - ans.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>图论,二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」有源汇有上下界最小流</title>
    <url>/2022/01/03/2022-01-03-%E6%9C%89%E6%BA%90%E6%B1%87%E6%9C%89%E4%B8%8A%E4%B8%8B%E7%95%8C%E6%9C%80%E5%B0%8F%E6%B5%81/</url>
    <content><![CDATA[<p>网上的模板乱七八糟的，找的的两种 $\mathrm{reliable}$ 的版本</p>
<span id="more"></span>

<h2 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h2><p><a href="https://loj.ac/p/117">link</a></p>
<h2 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h2><p>具体的证明不写了，主要是网上对于这种题的写法都不一样。重新理一遍思路。<br>有些东西或许是错的，如果有疑问的可以留言。   </p>
<p>约定: $nowst$ 和 $nowed$ 表示原图指定的 源&#x2F;汇 点， $st$ 和 $ed$ 表示建的虚点。</p>
<h5 id="mathcal-Step-1"><a href="#mathcal-Step-1" class="headerlink" title="$\mathcal{Step \ 1}$"></a>$\mathcal{Step \ 1}$</h5><p>对于原图进行建边 <code>Connect(u, v, lower, upper)</code><br>统计每个点可浮动的流量 <code>balance[i]</code></p>
<h5 id="mathcal-Step-2"><a href="#mathcal-Step-2" class="headerlink" title="$\mathcal{Step \ 2}$"></a>$\mathcal{Step \ 2}$</h5><ul>
<li>case 1 <code>balance[i] &gt; 0</code> 则 <code>Connect(i, ed, balance[i])</code></li>
<li>case 2 <code>balance[i] &lt; 0</code> 则 <code>Connect(st, i, -balance[i])</code><h5 id="mathcal-Step-3"><a href="#mathcal-Step-3" class="headerlink" title="$\mathcal{Step \ 3}$"></a>$\mathcal{Step \ 3}$</h5>从这一步开始就很<em>神奇</em>了。。。   <h6 id="mathcal-Way-1"><a href="#mathcal-Way-1" class="headerlink" title="$\mathcal{Way \ 1}$"></a>$\mathcal{Way \ 1}$</h6></li>
<li>直接<code>Connect(nowed, nowst, 0, INF)</code>，以$st$为源，$ed$为汇做一遍最大流。</li>
<li>以$nowed$为源，$nowst$为汇做一遍最大流 （退流）</li>
<li>用 $ans$ 累加上面左右最大流的和，答案是$INF - ans$ (反向边)</li>
</ul>
<p>正常人的写法。<br>其实就是退流<br>思想是将残量网络中不需要的流退掉，将最大流与可行流相加即可（类似于有源汇上下界最大流）。   </p>
<hr>
<h6 id="mathcal-Way-2"><a href="#mathcal-Way-2" class="headerlink" title="$\mathcal{Way \ 2}$"></a>$\mathcal{Way \ 2}$</h6><ul>
<li>以$st$为源，$ed$为汇做一遍最大流</li>
<li><code>Connect(nowed, nowst, 0, INF)</code></li>
<li>以$st$为源，$ed$为汇做一遍最大流</li>
<li>答案是 $&lt;nowst, nowed&gt;$ 的反向边现存流量</li>
</ul>
<p>这就很<em>神奇</em>了。<br>我似乎没有看到退流，但是代码写起来令人心情愉悦。<br>并且没有把 源汇 和 虚源汇写错的风险。   </p>
<p>问题是为什么是对的。。。<br>@<a href="http://222.180.160.110:1024/user/143">FlowerDream</a> 需要您透彻的讲解，似乎机房里就您比较懂了。   </p>
<h2 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h2><h6 id="mathcal-Way-1-1"><a href="#mathcal-Way-1-1" class="headerlink" title="$mathcal{Way \ 1}$"></a>$mathcal{Way \ 1}$</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, sum, ans, tmp, nowst, nowed, balance[MAXN], d[MAXN], cur[MAXN], base[MAXM];</span><br><span class="line"><span class="type">int</span> st, ed, tot = <span class="number">1</span>, head[MAXN], edge[MAXM], nxt[MAXM], ver[MAXM];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    ver[++tot] = v, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">    ver[++tot] = u, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> st)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    d[st] = <span class="number">1</span>, q.<span class="built_in">push</span>(st), cur[st] = head[st];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = ver[i];</span><br><span class="line">            <span class="keyword">if</span> (!edge[i] || d[v]) <span class="keyword">continue</span>;</span><br><span class="line">            d[v] = d[u] + <span class="number">1</span>, cur[v] = head[v];</span><br><span class="line">            q.<span class="built_in">push</span>(v);</span><br><span class="line">            <span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = flow;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = ver[i];</span><br><span class="line">        <span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">        <span class="keyword">if</span> (!k) d[v] = <span class="number">0</span>;</span><br><span class="line">        edge[i] -= k, edge[i ^ <span class="number">1</span>] += k, res -= k;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flow - res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// freopen(&quot;7.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld %lld&quot;</span>, &amp;n, &amp;m, &amp;nowst, &amp;nowed);</span><br><span class="line">    </span><br><span class="line">    st = n + <span class="number">1</span>, ed = n + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v, lower, upper; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld %lld&quot;</span>, &amp;u, &amp;v, &amp;lower, &amp;upper);</span><br><span class="line">        balance[u] += lower, balance[v] -= lower, base[i] = lower;</span><br><span class="line">        <span class="built_in">AddEdge</span>(u, v, upper - lower);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (balance[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += balance[i];</span><br><span class="line">            <span class="built_in">AddEdge</span>(i, ed, balance[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">AddEdge</span>(st, i, -balance[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">AddEdge</span>(nowed, nowst, INF);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>(st)) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans += tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ans &lt; sum) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;please go home to sleep\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        st = nowed, ed = nowst, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// printf(&quot;%lld\n&quot;, ans);</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(st)) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, INF - ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="mathcal-Way-2-1"><a href="#mathcal-Way-2-1" class="headerlink" title="$\mathcal{Way \ 2}$"></a>$\mathcal{Way \ 2}$</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, sum, ans, tmp, nowst, nowed, balance[MAXN], d[MAXN], cur[MAXN], base[MAXM];</span><br><span class="line"><span class="type">int</span> st, ed, tot = <span class="number">1</span>, head[MAXN], edge[MAXM], nxt[MAXM], ver[MAXM];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    ver[++tot] = v, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">    ver[++tot] = u, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Connect</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> lower, <span class="type">int</span> upper)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">AddEdge</span>(u, v, upper - lower);</span><br><span class="line">    balance[u] += lower, balance[v] -= lower;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> st)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    d[st] = <span class="number">1</span>, q.<span class="built_in">push</span>(st), cur[st] = head[st];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = ver[i];</span><br><span class="line">            <span class="keyword">if</span> (!edge[i] || d[v]) <span class="keyword">continue</span>;</span><br><span class="line">            d[v] = d[u] + <span class="number">1</span>, cur[v] = head[v];</span><br><span class="line">            q.<span class="built_in">push</span>(v);</span><br><span class="line">            <span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = flow;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = ver[i];</span><br><span class="line">        <span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">        <span class="keyword">if</span> (!k) d[v] = <span class="number">0</span>;</span><br><span class="line">        edge[i] -= k, edge[i ^ <span class="number">1</span>] += k, res -= k;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flow - res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// freopen(&quot;7.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld %lld&quot;</span>, &amp;n, &amp;m, &amp;nowst, &amp;nowed);</span><br><span class="line">    </span><br><span class="line">    st = n + <span class="number">1</span>, ed = n + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v, lower, upper; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld %lld&quot;</span>, &amp;u, &amp;v, &amp;lower, &amp;upper);</span><br><span class="line">        <span class="built_in">Connect</span>(u, v, lower, upper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (balance[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += balance[i];</span><br><span class="line">            <span class="built_in">AddEdge</span>(i, ed, balance[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">AddEdge</span>(st, i, -balance[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>(st)) <span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans += tmp;</span><br><span class="line">    <span class="built_in">Connect</span>(nowed, nowst, <span class="number">0</span>, INF);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>(st)) <span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) ans += tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ans &lt; sum) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;please go home to sleep\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, edge[tot]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>图论,网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」扩展欧拉定理</title>
    <url>/2022/01/11/2022-01-11-%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>真是令人自闭。</p>
<span id="more"></span>

<h2 id="mathcal-Theorem"><a href="#mathcal-Theorem" class="headerlink" title="$\mathcal{Theorem}$"></a>$\mathcal{Theorem}$</h2><p>$$<br>a^x\equiv<br>\begin{cases}<br>a^{x\bmod\varphi(m)} &amp; (a,m)&#x3D;1 \<br>a^{x\bmod\varphi(m)+\varphi(m)} &amp; (a,m)\neq1,x\ge\varphi(m)<br>\end{cases}<br>\pmod m<br>$$</p>
<h2 id="mathcal-Pro"><a href="#mathcal-Pro" class="headerlink" title="$\mathcal{Pro}$"></a>$\mathcal{Pro}$</h2><p>writing…</p>
<h2 id="mathbb-CF17D-Notepad"><a href="#mathbb-CF17D-Notepad" class="headerlink" title="$\mathbb{CF17D \ Notepad}$"></a>$\mathbb{CF17D \ Notepad}$</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/CF17D">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>就是求 $b ^ {n - 1} \times (b - 1) \ \mathrm{mod} \ c$。<br>那么套上去就行。</p>
<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b, n, c, phi, tmp, ans, flag;</span><br><span class="line">string bs, ns;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x, <span class="type">int</span> Mod, string str)</span> </span>&#123; </span><br><span class="line">	flag = <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">length</span>(); i++) x = ((x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (str[i] ^ <span class="number">48</span>)), flag |= (x &gt;= Mod), x %= Mod;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> Mod)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % Mod;</span><br><span class="line">		x = x * x % Mod, y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; bs &gt;&gt; ns &gt;&gt; c, tmp = phi = c, <span class="built_in">read</span>(b, c, bs);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= tmp; i++) <span class="keyword">if</span> (tmp % i == <span class="number">0</span>) &#123;</span><br><span class="line">		phi = phi / i * (i - <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">while</span> (tmp % i == <span class="number">0</span>) tmp /= i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tmp &gt; <span class="number">1</span>) phi = phi / tmp * (tmp - <span class="number">1</span>); <span class="built_in">read</span>(n, phi, ns);</span><br><span class="line"></span><br><span class="line">	ans = ((b - <span class="number">1</span>) * <span class="built_in">qpow</span>(b, (n - <span class="number">1</span>) % phi + flag * phi, c) % c + c) % c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans ? ans : c);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」关于斜率优化维护内容的推导</title>
    <url>/2022/01/28/2022-01-28-%E5%85%B3%E4%BA%8E%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96%E7%BB%B4%E6%8A%A4%E5%86%85%E5%AE%B9%E7%9A%84%E6%8E%A8%E5%AF%BC/</url>
    <content><![CDATA[<p>追求<del>乱搞</del>科学严谨证明，拒绝对于 不等号方向 与 单调 队列 &#x2F; 栈 的排列组合。</p>
<span id="more"></span>

<p>哈哈哈，今天上台直接乱说，好像以前都是盲猜单调队列维护下凸壳过的。。。</p>
<h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>对于一般形式 $T(j_1, j_2) \le &#x2F;\geq g(i)$ 中 $g(i)$ 有单调性的情况进行讨论。<br>结合图像还是很清晰的。</p>
<h3 id="mathrm-I-T-j-1-j-2-le-g-i-g-i-uparrow"><a href="#mathrm-I-T-j-1-j-2-le-g-i-g-i-uparrow" class="headerlink" title="$\mathrm{I}. \ T(j_1, j_2) \le g(i), g(i) \uparrow$"></a>$\mathrm{I}. \ T(j_1, j_2) \le g(i), g(i) \uparrow$</h3><p><img data-src="https://chenjg41.gitee.io/assets/images/case1.PNG" alt="case1"><br>$g(i)$ 斜率一直变大，最优的决策点即是让 $g(i)$ 在 $y$ 轴上截距最小，移动过程中发现 $j_4$ 显然不可能成为决策点。所以应该维护一个下凸壳。<br>于是我们维护的数据结构里的东西满足下面的关系。<br>$T(j_1, j_2) \le T(j_2, j_3) \le T(j_4, j_5) \le \dots \le T(j_{k - 1}, j_k) \le g(i)$。<br>那么可以发现，越靠前的决策点越不可能成为切点，于是我们应该从头将决策点弹出，所以是单调队列。   </p>
<h3 id="mathrm-II-T-j-1-j-2-le-g-i-g-i-downarrow"><a href="#mathrm-II-T-j-1-j-2-le-g-i-g-i-downarrow" class="headerlink" title="$\mathrm{II}. \ T(j_1, j_2) \le g(i), g(i) \downarrow$"></a>$\mathrm{II}. \ T(j_1, j_2) \le g(i), g(i) \downarrow$</h3><p><img data-src="https://chenjg41.gitee.io/assets/images/case2.PNG" alt="case2"><br>$g(i)$ 斜率一直变小，最优的决策点即是让 $g(i)$ 在 $y$ 轴上截距最小，移动过程中发现 $j_4$ 显然不可能成为决策点。所以应该维护一个下凸壳。<br>于是我们维护的数据结构里的东西满足下面的关系。<br>$T(j_1, j_2) \le T(j_2, j_3) \le T(j_4, j_5) \le \dots \le T(j_{k - 1}, j_k) \le g(i)$。<br>然后看出来在 $g(i)$ 一开始时，斜率很大 $j_3$ 是一个很优的决策点，但是当斜率变小之后，在 $j_3$ 之前的 $j_2$ 会优于 $j_3$，这时从尾把 $j_3$ 弹出，可以看出，斜率变得更小时，$j_3$ 只会更劣，弹出 $j_3$ 不影响正确性，所以我们应该维护一个单调栈。</p>
<h3 id="mathrm-III-T-j-1-j-2-ge-g-i-g-i-uparrow"><a href="#mathrm-III-T-j-1-j-2-ge-g-i-g-i-uparrow" class="headerlink" title="$\mathrm{III}. \ T(j_1, j_2) \ge g(i), g(i) \uparrow$"></a>$\mathrm{III}. \ T(j_1, j_2) \ge g(i), g(i) \uparrow$</h3><p><img data-src="https://chenjg41.gitee.io/assets/images/case3.PNG" alt="case3"><br>$g(i)$ 斜率一直变大，最优的决策点即是让 $g(i)$ 在 $y$ 轴上截距最大，移动过程中发现 $j_2$ 显然不可能成为决策点。所以应该维护一个上凸壳。<br>于是我们维护的数据结构里的东西满足下面的关系。<br>$T(j_1, j_2) \ge T(j_2, j_3) \ge T(j_4, j_5) \ge \dots \ge T(j_{k - 1}, j_k) \ge g(i)$。<br>观察图像可以发现，在斜率比较小的时候，$j_3$ 是一个很优的决策点，但是当斜率变大时，前面的 $j_4$ 会替代掉 $j_3$，并且我们可以肯定，在斜率越来越大时，$j_4$ 一定优于 $j_3$，所以可以把 $j_3$ 从尾部弹出，我们应该维护一个单调栈。</p>
<h3 id="mathrm-IV-T-j-1-j-2-ge-g-i-g-i-downarrow"><a href="#mathrm-IV-T-j-1-j-2-ge-g-i-g-i-downarrow" class="headerlink" title="$\mathrm{IV}. \ T(j_1, j_2) \ge g(i), g(i) \downarrow$"></a>$\mathrm{IV}. \ T(j_1, j_2) \ge g(i), g(i) \downarrow$</h3><p><img data-src="https://chenjg41.gitee.io/assets/images/case4.PNG" alt="case4"><br>$g(i)$ 斜率一直变小，最优的决策点即是让 $g(i)$ 在 $y$ 轴上截距最大，移动过程中发现 $j_2$ 显然不可能成为决策点。所以应该维护一个上凸壳。<br>于是我们维护的数据结构里的东西满足下面的关系。<br>$T(j_1, j_2) \ge T(j_2, j_3) \ge T(j_4, j_5) \ge \dots \ge T(j_{k - 1}, j_k) \ge g(i)$。<br>可以看到，斜率很大时 $j_1$ 是最优的，当斜率在变小后，右上角的 $j_4$ 会比 $j_1$ 更优，并且在斜率不断变小中，$j_4$ 永远比 $j_1$ 优。   </p>
]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」后缀数组</title>
    <url>/2022/01/24/2022-01-24-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>上课直接听晕过去。。。</p>
<span id="more"></span>

<h2 id="mathbb-Problem"><a href="#mathbb-Problem" class="headerlink" title="$\mathbb{Problem}$"></a>$\mathbb{Problem}$</h2><p>给定一个字符串，要求对其所有的后缀进行排序。<br>朴素做法直接是按字典序写一个 <code>cmp</code> 函数，但是两两之间比较的复杂度会飙升到 $\Theta(n)$，<code>sort</code> 一遍下来是 $\Theta(n ^ 2 log_2^n)$ 的时间复杂度，显然不够优，此时可以引进 <strong>后缀数组</strong> 求解。</p>
<h2 id="mathbb-Definitions"><a href="#mathbb-Definitions" class="headerlink" title="$\mathbb{Definitions}$"></a>$\mathbb{Definitions}$</h2><p><strong>后缀数组</strong> $\mathtt{Suffix Array}$ 由两个主要的数组组成。一个是 <strong>后缀编号</strong> $\mathtt{sa}$ ，一个是 <strong>数组排名</strong> $\mathtt{rnk}$。   </p>
<p>其实是顾名思义， $\mathtt{sa_i}$ 表示 <em>排名为</em> $i$ <em>的后缀的编号</em>， $\mathtt{rnk_i}$ 表示 <em>编号为</em> $i$ <em>的后缀的排名</em>。<br>表示可能和课上略有所出入，最终目的是便于理解。   </p>
<h2 id="mathbb-Build"><a href="#mathbb-Build" class="headerlink" title="$\mathbb{Build}$"></a>$\mathbb{Build}$</h2><p>思想和 <strong>基数排序</strong> 类似。<br>如果不会基排，其实也无所谓。   </p>
<p>既然提到 <strong>基数排序</strong> 和 上面的 <strong>朴素做法</strong>， 那么可以考虑对于 $\Theta(n ^ 2 log_2^n)$ 的算法进行优化。   </p>
<p>这里直接给出做法。   </p>
<p><img data-src="https://chenjg41.gitee.io/assets/images/2022-01-24-sa1.PNG" alt="lj"></p>
<p>当时上课时看到就傻了，这个倍增是个什么鬼哟？   其实 <code>ppt</code> 上有一句</p>
<blockquote>
<p>利用上一轮比较的结果</p>
</blockquote>
<p>也不难想到对于后缀 $[i, n]$ 的长度为 $len$ 的前缀实际上相当于 后缀 $[i + 2, n]$ 的长度为 $\frac{len}{2}$ 的前缀 拼上 后缀 $[i + 4, n]$ 的长度为 $\frac{len}{2}$ 的前缀。   </p>
<p>而这两个前缀的信息已经在上一层处理过，那么可以直接拿来用。   </p>
<p>说着确实很玄，放一张 <code>oi-wiki</code> 上的图应该就很清晰了。   </p>
<p><img data-src="https://next.oi-wiki.org/0c07e0596b7e68539446840c7ddaaca1/sa2.png" alt="sa"></p>
<h2 id="mathbb-Code"><a href="#mathbb-Code" class="headerlink" title="$\mathbb{Code}$"></a>$\mathbb{Code}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m, w[MAXN], sa[MAXN], now[MAXN], rnk[MAXN], tmp[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="comment">// w[i] 记录当前排名为 &lt;= i 的后缀个数, now 和 tmp 是 未成形的 sa 和 rnk</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123; <span class="comment">// n 是 |string|, m 是字符集大小</span></span><br><span class="line">	<span class="comment">// w[i] 记录当前排名为 &lt;= i 的后缀个数，所有最后来了一边前缀和</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) w[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) w[rnk[i]]++;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; i++) w[i] += w[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 功能是排序装桶（对于当前）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_in</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123; <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) sa[w[rnk[now[i]]]--] = now[i]; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sa</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rnk[i] = s[i], now[i] = i; <span class="comment">// 进行第一次单字符排序</span></span><br><span class="line">	<span class="built_in">init</span>(n, m), <span class="built_in">push_in</span>(n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">1</span>; len &lt; n; len &lt;&lt;= <span class="number">1</span>) &#123; <span class="comment">// 当前比较长度为 len * 2</span></span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> pos = <span class="number">0</span>; <span class="built_in">init</span>(n, m); <span class="comment">// 每次要重新计算桶的大小</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n - len + <span class="number">1</span>; i &lt;= n; i++) now[++pos] = i; <span class="comment">// 如果倍增后 len + i 爆出去了，相当于低位补空，直接排在前面</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (sa[i] &gt; len) now[++pos] = sa[i] - len; <span class="comment">// 拼 计算 now</span></span><br><span class="line">		<span class="built_in">push_in</span>(n), <span class="built_in">memcpy</span>(tmp, rnk, <span class="built_in">sizeof</span>(rnk)), pos = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (tmp[sa[i]] != tmp[sa[i - <span class="number">1</span>]] || tmp[sa[i] + len] != tmp[sa[i - <span class="number">1</span>] + len]) pos++; <span class="comment">// 拼</span></span><br><span class="line">			rnk[sa[i]] = pos; <span class="comment">// 标记排名</span></span><br><span class="line">		&#125;</span><br><span class="line">		m = pos; <span class="comment">// 重新分配桶的空间</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」离散概率 复习</title>
    <url>/2022/01/12/2022-01-12-%E7%A6%BB%E6%95%A3%E6%A6%82%E7%8E%87%20%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>Just a review.</p>
<span id="more"></span>

<h1 id="离散概率-mathtt-discrete-probability"><a href="#离散概率-mathtt-discrete-probability" class="headerlink" title="离散概率 $\mathtt{discrete \ probability}$"></a>离散概率 $\mathtt{discrete \ probability}$</h1><p>离散 $\mathtt{discrete}$，即是非连续性，意味着不用微积分而只用和式即可以计算。<br>对于这类可直接用和式计算的概率，就称为 <strong>离散概率</strong>。   </p>
<h2 id="定义-mathtt-definitions"><a href="#定义-mathtt-definitions" class="headerlink" title="定义 $\mathtt{definitions}$"></a>定义 $\mathtt{definitions}$</h2><p>如同函数有定义域一样，先给出概率的“定义域”，即是 <strong>概率空间</strong> $\mathtt{probability \ space}$，概率空间是指由在一个给定问题中能发生的所有事件，以及赋予每个 <strong>基本事件</strong> $\mathtt{elementrary \ event}$ $\omega \in \Omega$ 一个概率 $\mathrm{Pr(\omega)}$ 的规则所组成的集合 $\Omega$。   </p>
<p>上面的定义提到了 <strong>事件</strong> $\mathtt{event}$，一个 <strong>事件</strong> 即是 $\Omega$ 的一个子集，我们把 $\Omega$ 中的每一个单元素 $\omega$ 成为 $\Omega$ 的一个 <strong>基本事件</strong> 。   </p>
<p>再对于上述的所有定义给出限制（即是满足的公理）   </p>
<ol>
<li><strong>非负性</strong>: $\forall \ \omega \in \Omega, \ \ \mathrm{Pr(\omega)} \in [0, 1]$</li>
<li><strong>规范性</strong>: $\sum_\limits{\omega \in \Omega} \mathrm{Pr(\omega)} &#x3D; 1$</li>
<li><strong>可加性</strong>: $\exists X,Y \in \Omega, X \cap Y &#x3D; \varnothing \rightarrow \mathrm{Pr(X \cup Y)} &#x3D; \mathrm{Pr(X)} + \mathrm{Pr(Y)}$</li>
</ol>
<p>再定义 <strong>随机变量</strong> $\mathtt{random \ variable}$ 是定义在 基本事件 $\omega$ 上 <strong>函数</strong> 。<br>形象化地理解，当基本事件 为 $\mathtt{\omega}$ 时，对应的随机变量取值 $\alpha$。   </p>
<h2 id="独立性-mathtt-independent"><a href="#独立性-mathtt-independent" class="headerlink" title="独立性 $\mathtt{independent}$"></a>独立性 $\mathtt{independent}$</h2><p>现在对 <strong>独立性</strong> $\mathtt{independent}$ 进行定义。$\exists X,Y \in \Omega, \mathrm{Pr(X \cap Y)} &#x3D; \mathrm{Pr(X) \times Pr(Y)}$ 则称事件 $X$ 和事件 $Y$ 是独立的。<br>如果有多个事件 $X_{1 \dots n}$ 组成集合 $C$ ，若 $\mathrm{Pr(\bigcap_\limits{A \subseteq C} A)} &#x3D; \prod_\limits{A \subseteq C} \mathrm{Pr(A)} , \forall \ A \subseteq C$，则称 $X_{1 \dots n}$是互相独立的。</p>
<h2 id="mathtt-an-example-between-definitions"><a href="#mathtt-an-example-between-definitions" class="headerlink" title="$\mathtt{an \ example \ between \ definitions }$"></a>$\mathtt{an \ example \ between \ definitions }$</h2><p>抛骰子太复杂了，可以举抛硬币的例子。   </p>
<p>发生的动作是 把一枚硬币抛两次。   </p>
<p><strong>概率空间</strong> 是 ${ HH, HT, TH, TT }$。<br>可以令事件 $A &#x3D; { HH, HT }$， $B &#x3D; { HH, TH }$， $C &#x3D; { HH, TT }$。<br>$\mathrm{A \cap B &#x3D; A \cap C &#x3D; B \cap C} &#x3D; \mathrm{A \cap B \cap C} &#x3D; {HH, TT}$。<br>可知 $\mathrm{Pr(A) &#x3D; Pr(B) &#x3D; Pr(C) &#x3D; \frac{1}{2}}$，$\mathrm{Pr(A \cap B) &#x3D; Pr(A) \times Pr(B) &#x3D; Pr(A \cap C) &#x3D; Pr(A) \times Pr(C) &#x3D; Pr(B \cap C)} &#x3D; Pr(B) \times Pr(C) &#x3D; \frac{1}{4}$<br>则事件 $A, B$ 两两独立，$A, C$ 两两独立，$B, C$ 两两独立。<br>可知 $\mathrm{Pr(A \cap B \cap C)} &#x3D; \frac{1}{4} \neq Pr(A) \times Pr(B) \times Pr(C)$。<br>则事件 $A, B, C$ 并不互相独立。</p>
<h2 id="期望-mathtt-expected-value"><a href="#期望-mathtt-expected-value" class="headerlink" title="期望 $\mathtt{expected \ value}$"></a>期望 $\mathtt{expected \ value}$</h2><p>先引入 <strong>均值</strong> $\mathtt{mean}$，它是所有值的和除以值的个数。   </p>
<p>如果我们去计算 <strong>概率空降</strong> 上某个 <strong>随机变量</strong> $X$ 的 <strong>均值</strong> , 可以得到下面的式子。<br>$$<br>\sum_\limits{x \in X(\Omega)} x \times \mathrm{Pr}(X &#x3D; x)<br>$$<br>此处的  $X(\Omega)$ 表示使</p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」诗人小G题解</title>
    <url>/2022/02/06/2022-02-06-%E8%AF%97%E4%BA%BA%E5%B0%8FG%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><del>这题和斜率优化放一起就很离谱</del></p>
<span id="more"></span>

<h2 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h2><p><a href="https://www.luogu.com.cn/problem/P1912">link</a></p>
<h2 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h2><p>题目已经很清楚了，不难想到一个朴素的 <code>dp</code>。定义 $sum_i$ 为诗句长度的前缀和， $dp_i$ 为以 $i$ 结尾，已经排版好的诗歌的不和谐度。   </p>
<p>则有<br>$$<br>dp_i &#x3D; \min{ dp_j + | sum_i - sum_j + i - j - 1 - l | ^ p \mid 0 \le j &lt; i }<br>$$<br>这样是一个 $\mathcal{O(n^2)}$ 的时间复杂度。   </p>
<p>打满有 <code>30pts</code> 。   </p>
<hr>
<p>看到 $n \le 1e5$ ，意味着 $\mathcal{O(n)}$ 或 $\mathcal{O(n \log n)}$ 这样的时间复杂度比较正确。   </p>
<p>其实分析数据范围都能猜到这道题的决策大概率是有单调性的。    </p>
<p>结论是这道题确实有决策单调性的性质。</p>
<h3 id="mathcal-Pro"><a href="#mathcal-Pro" class="headerlink" title="$\mathcal{Pro}$"></a>$\mathcal{Pro}$</h3><p>对于两个决策点 $i&lt;j$ ，有且仅有一个划分点 $k$， 当决策点 $k’ &gt; k$ 时 $j$ 优于 $i$ ，当决策点 $k’ &lt; k$ 时 $i$ 优于 $j$ 。</p>
<p>我们定义以 $k$ 为决策点的函数为 $g_k$ 。   </p>
<p>那么 $g_k(i) &#x3D; dp_k + \mid sum_i - sum_k + i - k - 1 - l\mid ^ p$ 。   </p>
<p>可以看到 $g_k(i)$ 以 $sum_k + k + 1 + l$ 为对称轴，且 $p$ 是定值，$sum_i + i$ 单调递增。   </p>
<p>如果你把中间的 $sum_i + i$ 视作连续的，或者干脆把 $sum_i + i$ 换成 $i$ ，那么这一堆函数是可以通过平移转化的。   </p>
<p>在满足函数间能平移转换后，就可以保证两两之间只有一个交点。   </p>
<h2 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h2><p>重点在如何套路化地写这种决策单调性的题。   </p>
<p>那么把每个点作为决策点可以找的属于它的决策区间。   </p>
<p>可以用一个结构体保存决策区间的信息。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, pos;</span><br><span class="line">&#125; q[MAXN];</span><br></pre></td></tr></table></figure>

<p>首先初始化，塞一个决策点 <code>0</code> ，决策区间是 <code>[1, n]</code> 。   </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">head = <span class="number">1</span>, tail = <span class="number">0</span>, q[++tail] = Node&#123;<span class="number">1</span>, n, <span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>对于每个当前点，首先计算当前的 <code>dp[i]</code> 值。   </p>
<p>这时检查队头，如果队首元素的决策区间的右端点够不到当前点（就是说当前点不会队首元素更新）， <code>q[tail].r &lt; i</code> ，那么就弹掉它。等拿到可行的队首后，用队首元素计算 <code>dp[i]</code> 。   </p>
<p>考虑加入当前的决策点 <code>i</code> 。   </p>
<p>从后往前考虑，如果当前决策点对队尾元素的左区间比队尾元素的决策点对队尾元素的左区间更优，直接弹掉队尾。换句话说，当前决策点的 “管辖范围” 比队尾的更广，能更快地把队尾更前面的决策点顶掉。   </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (head &lt; tail &amp;&amp; <span class="built_in">cal</span>(q[tail].l, i) &lt;= <span class="built_in">cal</span>(q[tail].l, q[tail].pos)) tail--;</span><br></pre></td></tr></table></figure>

<p>在不断弹出队尾后，会发现一个情况，当前决策点管不到队尾的左端点，但是对于队尾的右端点来说，当前的决策点会更优。也就是队尾的 “管辖范围” 需要割开。   </p>
<p><img data-src="https://chenjg41.gitee.io/assets/images/2022-02-07Pic1.png"></p>
<p>因为已知单调性，所以可以对 <code>[q[tail].l, q[tail].r]</code> 这段区间进行二分，找到划分点，最后加入当前的决策点的决策区间即可。   </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> l = q[tail].l, r = q[tail].r;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">    <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cal</span>(mid, q[tail].pos) &gt; <span class="built_in">cal</span>(mid, i)) r = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l &gt; q[tail].l) q[tail].r = l;</span><br><span class="line"><span class="keyword">else</span> tail--;</span><br><span class="line"></span><br><span class="line">q[++tail] = Node&#123;l, n, i&#125;;</span><br></pre></td></tr></table></figure>



<p>给个完整代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LD long double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> poe[<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> t, n, p, head, tail;</span><br><span class="line">LD l, sum[MAXN], dp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function">LD <span class="title">qpow</span><span class="params">(LD x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	LD res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x;</span><br><span class="line">		x = x * x;</span><br><span class="line">		y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> l, r, pos; &#125; q[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function">LD <span class="title">Abs</span><span class="params">(LD num)</span> </span>&#123; <span class="keyword">return</span> num &lt; <span class="number">0</span> ? -num : num; &#125;</span><br><span class="line"><span class="function">LD <span class="title">cal</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (y &gt; x) <span class="built_in">swap</span>(x, y);</span><br><span class="line">	<span class="keyword">return</span> dp[y] + <span class="built_in">qpow</span>(<span class="built_in">Abs</span>(sum[x] - sum[y] + x - y - <span class="number">1</span> - l), p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %Lf %d&quot;</span>, &amp;n, &amp;l, &amp;p);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, poe);</span><br><span class="line">			sum[i] = sum[i - <span class="number">1</span>] + <span class="built_in">strlen</span>(poe);</span><br><span class="line">		&#125;</span><br><span class="line">		head = <span class="number">1</span>, tail = <span class="number">0</span>, q[++tail] = Node&#123;<span class="number">1</span>, n, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> (head &lt; tail &amp;&amp; q[head].r &lt; i) head++;</span><br><span class="line">			<span class="type">int</span> j = q[head].pos;</span><br><span class="line">			dp[i] = <span class="built_in">cal</span>(j, i);</span><br><span class="line">			<span class="keyword">while</span> (head &lt; tail &amp;&amp; <span class="built_in">cal</span>(q[tail].l, i) &lt;= <span class="built_in">cal</span>(q[tail].l, q[tail].pos)) tail--;</span><br><span class="line"></span><br><span class="line">			<span class="type">int</span> l = q[tail].l, r = q[tail].r;</span><br><span class="line">			<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">				<span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">				<span class="comment">// printf(&quot;%d %d %d %d\n&quot;, i, l, mid, r);</span></span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">cal</span>(mid, q[tail].pos) &gt; <span class="built_in">cal</span>(mid, i)) r = mid - <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> l = mid;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (l &gt; q[tail].l) q[tail].r = l;</span><br><span class="line">			<span class="keyword">else</span> tail--;</span><br><span class="line"></span><br><span class="line">			q[++tail] = Node&#123;l, n, i&#125;;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// printf(&quot;dp[%d] = %.0Lf\n&quot;, i, dp[i]);</span></span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dp[n] &gt; INF) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Too hard to arrange\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%.0Lf\n&quot;</span>, dp[n]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;--------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>斜率优化</tag>
        <tag>决策单调性</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」拦截导弹</title>
    <url>/2022/02/06/2022-02-12-%E6%8B%A6%E6%88%AA%E5%AF%BC%E5%BC%B9%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p><del>我爱调代码</del></p>
</blockquote>
<span id="more"></span>

<h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P2487">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>定义 $f_0(i)$ 为以 $i$ 为终点的最长上升子序列的长度， $g_0(i)$ 为 $f_0$ 的个数。<br>同样地，定义 $f_1(i)$ 为以 $i$ 为起点的最长上升子序列的长度， $g_1(i)$ 为 $f_1$ 的个数。<br>那么记方案总数为 $tot$ ，第二问的答案即是 $\frac{g_0(i) \times g_1(i)}{tot}$<br>暴力转是 $\mathcal{O}(n^2)$ 的。<br>因为是个三维的偏序，可以用 <code>cdq</code> 来优化。<br>代码要想清楚再写，注意细节，手不要乱抖。。。</p>
<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, cnt, maxl, num[MAXN], f[MAXN][<span class="number">3</span>];</span><br><span class="line"><span class="type">double</span> g[MAXN][<span class="number">3</span>], tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> h, v, t; &#125; a[MAXN];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; h;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线段树维护区间最大值以及最大值的个数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Result</span> &#123; <span class="type">int</span> f; <span class="type">double</span> g; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123; <span class="type">int</span> l, r, dat; <span class="type">double</span> sum; &#125; s[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	s[p].dat = <span class="built_in">max</span>(s[p &lt;&lt; <span class="number">1</span>].dat, s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].dat), s[p].sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (s[p &lt;&lt; <span class="number">1</span>].dat == s[p].dat) s[p].sum += s[p &lt;&lt; <span class="number">1</span>].sum;</span><br><span class="line">	<span class="keyword">if</span> (s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].dat == s[p].dat) s[p].sum += s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].dat == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	s[p].dat = <span class="number">0</span>, <span class="built_in">clear</span>(p &lt;&lt; <span class="number">1</span>), <span class="built_in">clear</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>), <span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	s[p].l = l, s[p].r = r;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123; s[p].dat = <span class="number">0</span>, s[p].sum = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x, <span class="type">int</span> val, <span class="type">double</span> num)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l == s[p].r) &#123; </span><br><span class="line">		<span class="keyword">if</span> (val == s[p].dat) s[p].sum += num;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (val &gt; s[p].dat) s[p].dat = val, s[p].sum = num;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (x &lt;= mid) <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span>, x, val, num);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, val, num);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Result <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) &#123; <span class="keyword">return</span> Result&#123;s[p].dat, s[p].sum&#125;; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>; Result res = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, tmp1 = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, tmp2 = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span> (l &lt;= mid) tmp1 = <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">	<span class="keyword">if</span> (r &gt; mid) tmp2 = <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">	res.f = <span class="built_in">max</span>(tmp1.f, tmp2.f);</span><br><span class="line">	res.g += (res.f == tmp1.f) * tmp1.g + (res.f == tmp2.f) * tmp2.g;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, pos = l;</span><br><span class="line">	<span class="built_in">sort</span>(a + l, a + r + <span class="number">1</span>, [](<span class="type">const</span> Node&amp; x, <span class="type">const</span> Node&amp; y) &#123; <span class="keyword">return</span> x.t &lt; y.t; &#125;);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cdq</span>(l, mid, opt);  <span class="comment">// 注意要算完左边的贡献后立即与右边合并，保证转移从左向右不中断</span></span><br><span class="line">	<span class="built_in">sort</span>(a + l, a + mid + <span class="number">1</span>, [](<span class="type">const</span> Node&amp; x, <span class="type">const</span> Node&amp; y) &#123; <span class="built_in">return</span> (x.h == y.h) ? x.t &lt; y.t : x.h &gt; y.h; &#125;);</span><br><span class="line">	<span class="built_in">sort</span>(a + mid + <span class="number">1</span>, a + r + <span class="number">1</span>, [](<span class="type">const</span> Node&amp; x, <span class="type">const</span> Node&amp; y) &#123; <span class="built_in">return</span> (x.h == y.h) ? x.t &lt; y.t : x.h &gt; y.h; &#125;);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">clear</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (pos &lt;= mid &amp;&amp; a[pos].h &gt;= a[i].h) <span class="built_in">update</span>(<span class="number">1</span>, a[pos].v, f[a[pos].t][opt], g[a[pos].t][opt]), pos++; <span class="comment">// 第一遍居然把 a[pos].v 写成了 a[pos].t 。。。</span></span><br><span class="line">		Result res = <span class="built_in">query</span>(<span class="number">1</span>, a[i].v, n);</span><br><span class="line">		<span class="keyword">if</span> (!res.f) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// dp 转移最大值</span></span><br><span class="line">		<span class="keyword">if</span> (f[a[i].t][opt] == res.f + <span class="number">1</span>) g[a[i].t][opt] += res.g;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (f[a[i].t][opt] &lt; res.f + <span class="number">1</span>) f[a[i].t][opt] = res.f + <span class="number">1</span>, g[a[i].t][opt] = res.g;</span><br><span class="line">		<span class="comment">// printf(&quot;--%d %d\n&quot;, a[i].t, g[a[i].t][opt]);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cdq</span>(mid + <span class="number">1</span>, r, opt); <span class="comment">// 开始写掉了。。。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;a[i].h, &amp;a[i].v), a[i].t = i, num[i] = a[i].v, m = <span class="built_in">max</span>(m, a[i].h);</span><br><span class="line">	<span class="built_in">sort</span>(num + <span class="number">1</span>, num + <span class="number">1</span> + n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (num[i] != num[i - <span class="number">1</span>]) h[num[i]] = ++cnt;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i].v = h[a[i].v], f[i][<span class="number">0</span>] = f[i][<span class="number">1</span>] = <span class="number">1</span>, g[i][<span class="number">0</span>] = g[i][<span class="number">1</span>] = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n), <span class="built_in">cdq</span>(<span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i].v = cnt - a[i].v + <span class="number">1</span>, a[i].h = m - a[i].h + <span class="number">1</span>, a[i].t = n - a[i].t + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, [](<span class="type">const</span> Node&amp; x, <span class="type">const</span> Node&amp; y) &#123; <span class="keyword">return</span> x.t &lt; y.t; &#125;);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) maxl = <span class="built_in">max</span>(maxl, f[i][<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, maxl);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n), <span class="built_in">cdq</span>(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) tot += (f[i][<span class="number">0</span>] == maxl) * g[i][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">	<span class="comment">// 	printf(&quot;%d %d\n&quot;, g[i][0], g[i][1]);</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">// printf(&quot;%d\n&quot;, tot);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (f[i][<span class="number">0</span>] + f[n - i + <span class="number">1</span>][<span class="number">1</span>] - <span class="number">1</span> != maxl) <span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.6lf &quot;</span>, g[i][<span class="number">0</span>] * (g[n - i + <span class="number">1</span>][<span class="number">1</span>] / tot));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>分治</tag>
        <tag>cdq</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」cdq斜率优化</title>
    <url>/2022/02/13/2022-02-13-cdq%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>All in one.</p>
<span id="more"></span>

<h2 id="mathcal-Template"><a href="#mathcal-Template" class="headerlink" title="$\mathcal{Template}$"></a>$\mathcal{Template}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, que[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> ind; LL x, y; &#125; a[MAXN], tmp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">K</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a[x].x == a[y].x) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[x].y &lt; a[y].y) <span class="keyword">return</span> INF;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> -INF;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ((<span class="type">long</span> <span class="type">double</span>)(a[y].y - a[x].y) / (<span class="type">long</span> <span class="type">double</span>)(a[y].x - a[x].x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		a[l].y = <span class="comment">/**/</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l, p = l, q = mid + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i].ind &lt;= mid) tmp[p++] = a[i];</span><br><span class="line">		<span class="keyword">else</span> tmp[q++] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line">	<span class="built_in">cdq</span>(l, mid);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= mid; i++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (head &lt; tail &amp;&amp; <span class="built_in">K</span>(que[tail - <span class="number">1</span>], que[tail]) &gt;= / &lt;= <span class="built_in">K</span>(que[tail - <span class="number">1</span>], i)) tail--;</span><br><span class="line">		que[++tail] = i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (head &lt; tail &amp;&amp; <span class="built_in">K</span>(que[head], que[head + <span class="number">1</span>]) &gt;= / &lt;= <span class="comment">/**/</span>) head++;</span><br><span class="line">		<span class="type">int</span> j = que[head];</span><br><span class="line">		dp[a[i].ind] = <span class="comment">/**/</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="type">int</span> p = l, q = mid + <span class="number">1</span>, pos = l;</span><br><span class="line">	<span class="keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= r) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[p].x &lt; a[q].x) tmp[pos++] = a[p++];</span><br><span class="line">		<span class="keyword">else</span> tmp[pos++] = a[q++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (p &lt;= mid) tmp[pos++] = a[p++];</span><br><span class="line">	<span class="keyword">while</span> (q &lt;= r) tmp[pos++] = a[q++];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathcal-Building-Bridges"><a href="#mathcal-Building-Bridges" class="headerlink" title="$\mathcal{Building \ Bridges}$"></a>$\mathcal{Building \ Bridges}$</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P4655">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>方程直接一眼: 记 $w_i$ 的前缀和为 $sum_i$ 。<br>$$<br>\begin{aligned}<br>dp_i &amp;&#x3D; dp_j + (sum_{i-1} - sum_j) + (h_i - h_j) ^ 2 \<br>     &amp;&#x3D; dp_j + sum_{i-1} - sum_j + h_i^2 + h_j^2 - 2h_ih_j<br>\end{aligned}<br>$$<br>然后假设 $k_1$ 比 $k_2$ 更优。<br>那么<br>$$<br>\begin{aligned}<br>dp_{k_1} + sum_{i-1} - sum_{k_1} + h_i^2 + h_{k_1}^2 - 2h_ih_{k_1} &amp;&lt; dp_{k_2} + sum_{i-1} - sum_{k_2} + h_i^2 + h_{k_2}^2 - 2h_ih_{k_2} \<br>\rightarrow dp_{k_1} - dp_{k_2} - sum_{k_1} + sum_{k_2} + h_{k_1}^2 - h_{k_2}^2 - 2h_ih_{k_1} + 2h_ih_{k_2} &amp;&lt; 0 \<br>dp_{k_1} - dp_{k_2} - sum_{k_1} + sum_{k_2} + h_{k_1}^2 - h_{k_2}^2 &amp;&lt; 2h_ih_{k_1} - 2h_ih_{k_2} \<br>\frac{(dp_{k_1} - sum_{k_1} + h_{k_1}^2) - (dp_{k_2} - sum_{k_2} + h_{k_2}^2)}{h_{k_1} - h_{k_2}} &amp;&lt; 2h_i<br>\end{aligned}<br>$$<br>这是个下凸壳。<br>结果发现 $h_i$ 没有单调性。<br>带进来就是说 $x$ 和 $k$ 都没有单调性。<br>所以要用 <code>cdq</code> 来维护。   </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, que[MAXN];</span><br><span class="line">LL h[MAXN], w[MAXN], sum[MAXN], dp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> ind; LL x, y; &#125; a[MAXN], tmp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">K</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a[x].x == a[y].x) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[x].y &lt; a[y].y) <span class="keyword">return</span> INF;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> -INF;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ((<span class="type">long</span> <span class="type">double</span>)(a[y].y - a[x].y) / (<span class="type">long</span> <span class="type">double</span>)(a[y].x - a[x].x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		a[l].y = dp[a[l].ind] - sum[a[l].ind] + h[a[l].ind] * h[a[l].ind];</span><br><span class="line">		<span class="keyword">return</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l, p = l, q = mid + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i].ind &lt;= mid) tmp[p++] = a[i];</span><br><span class="line">		<span class="keyword">else</span> tmp[q++] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line">	<span class="built_in">cdq</span>(l, mid);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= mid; i++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (head &lt; tail &amp;&amp; <span class="built_in">K</span>(que[tail - <span class="number">1</span>], que[tail]) &gt;= <span class="built_in">K</span>(que[tail - <span class="number">1</span>], i)) tail--;</span><br><span class="line">		que[++tail] = i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">		<span class="comment">// if (a[i].ind == 5) &#123;</span></span><br><span class="line">		<span class="comment">// 	printf(&quot;debug\n&quot;);</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="keyword">while</span> (head &lt; tail &amp;&amp; <span class="built_in">K</span>(que[head], que[head + <span class="number">1</span>]) &lt;= <span class="number">2</span> * h[a[i].ind]) head++;</span><br><span class="line">		<span class="type">int</span> j = que[head];</span><br><span class="line">		dp[a[i].ind] = <span class="built_in">min</span>(dp[a[i].ind], dp[a[j].ind] + (sum[a[i].ind - <span class="number">1</span>] - sum[a[j].ind]) + (h[a[i].ind] - h[a[j].ind]) * (h[a[i].ind] - h[a[j].ind]));</span><br><span class="line">		<span class="comment">// printf(&quot; dp[%d] = %d %d\n&quot;, a[i].ind, dp[a[i].ind], a[j].ind);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="type">int</span> p = l, q = mid + <span class="number">1</span>, pos = l;</span><br><span class="line">	<span class="keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= r) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[p].x &lt; a[q].x) tmp[pos++] = a[p++];</span><br><span class="line">		<span class="keyword">else</span> tmp[pos++] = a[q++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (p &lt;= mid) tmp[pos++] = a[p++];</span><br><span class="line">	<span class="keyword">while</span> (q &lt;= r) tmp[pos++] = a[q++];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;h[i]);</span><br><span class="line">		dp[i] = INF, a[i].x = h[i], a[i].ind = i;</span><br><span class="line">	&#125;</span><br><span class="line">	dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;w[i]), sum[i] = sum[i - <span class="number">1</span>] + w[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, [](<span class="type">const</span> Node&amp; x, <span class="type">const</span> Node&amp; y) &#123; <span class="keyword">return</span> x.x &lt; y.x; &#125;);</span><br><span class="line">	<span class="built_in">cdq</span>(<span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dp[n]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathcal-BZOJ4700-适者"><a href="#mathcal-BZOJ4700-适者" class="headerlink" title="$\mathcal{BZOJ4700. 适者}$"></a>$\mathcal{BZOJ4700. 适者}$</h2><h3 id="mathcal-Link-1"><a href="#mathcal-Link-1" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://hydro.ac/d/bzoj/p/4700">link</a></p>
<h3 id="mathcal-Sol-1"><a href="#mathcal-Sol-1" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>先考虑没有开局双杀这个操作时的答案。<br>基本的贪心思路，考虑相邻的两个敌人， $(d_1,a_1)$ 和 $(d_2,a_2)$ 。<br>不交换攻击顺序时造成的代价为 $a_1 \times \frac{d_1}{atk} + a_2 \times \frac{d_2+d_1}{atk}$ 。<br>如果交换，则代价为 $a_2 \times \frac{d_2}{atk} + a_1 \times \frac{d_2+d_1}{atk}$ 。<br>如果交换后更优，则有<br>$$<br>\begin{aligned}<br>    a_1 \times \frac{d_1}{atk} + a_2 \times \frac{d_2+d_1}{atk} &amp;\le a_2 \times \frac{d_2}{atk} + a_1 \times \frac{d_2+d_1}{atk} \<br>    a_2 \times \frac{d_1}{atk} &amp;\le a_1 \times \frac{d_2}{atk} \<br>    \frac{a_2}{d_2} &amp;\le \frac{a_1}{d_1}<br>\end{aligned}<br>$$<br>那么把 $\frac{d}{a}$ 作为关键字排序就可以算出答案。<br>考虑开局双杀操作，你会发现，直接移除某个人后，其他的人的相对击败顺序并不会变，也就是说，可以直接计算移除某一个人后的贡献。<br>记前缀血量 $sum_i &#x3D; \sum_{j &#x3D; 1}^{i} d_i$ 。<br>不移除人的答案是 $Ans &#x3D; \sum_{i &#x3D; 1}^n \frac{sum_i}{atk}a_i$ 当移除掉第 $j$ 个人后，分前后两部分计算<br>$$<br>\begin{aligned}<br>    Ans &amp;&#x3D; (\sum_{i&#x3D;1}^{j-1} \frac{sum_i}{atk}a_i) + (\sum_{i&#x3D;j+1}^{n} \frac{sum_i - d_j}{atk} a_i) \<br>    &amp;&#x3D; (\sum_{i&#x3D;1}^{j-1} \frac{sum_i}{atk}a_i) + (\sum_{i&#x3D;j+1}^{n} \frac{sum_i}{atk} a_i) - (\sum_{i&#x3D;j+1}^{n} \frac{d_j}{atk} a_i) \<br>    &amp;&#x3D; (\sum_{i &#x3D; 1}^n \frac{sum_i}{atk}a_i) - \frac{sum_j}{atk}a_j - d_j\sum_{i&#x3D;j+1}^{n} \frac{a_i}{atk}<br>\end{aligned}<br>$$<br>可以看到改变的值为 $\frac{sum_j}{atk}a_j + d_j\sum_{i&#x3D;j+1}^{n} \frac{a_i}{atk}$ 。<br>如果再干掉一个人，假设位置为 $k (k &gt; j)$ 。他会改变 $\frac{sum_k - d_j}{atk}a_k + d_k\sum_{i&#x3D;k+1}^{n} \frac{a_i}{atk}$ 。<br>把两次操作合在一起得到<br>$$<br>\begin{aligned}<br>    Ans &#x3D; (\sum_{i &#x3D; 1}^n \frac{sum_i}{atk}a_i) - (\frac{sum_j}{atk}a_j + d_j\sum_{i&#x3D;j+1}^{n} \frac{a_i}{atk}) - (\frac{sum_k - d_j}{atk}a_k + d_k\sum_{i&#x3D;k+1}^{n} \frac{a_i}{atk})<br>\end{aligned}<br>$$<br>然后可以莽一个 $\mathcal{O}(n^2)$ 的暴力 <code>dp</code> 。<br>可以直接预处理出所有的单杀局面，记为 $dp_{i, 0}$ 。<br>然后考虑双杀局面 $dp_{i, 1}&#x3D; \min_{j&#x3D;1}^{i-1} {dp_{j, 0} - \frac{sum_i - d_j}{atk}a_i - d_i\sum_{k &#x3D; i + 1}^n \frac{a_k}{atk}}$ 。<br>看起来可以优化。<br>记 $g_i &#x3D; \sum_{j &#x3D; i + 1}^n \frac{a_j}{atk}$ ，假设两个决策点 $k_1$ , $k_2$ , 如果 $k_1$ 优于 $k_2$ 。<br>$$<br>\begin{aligned}<br>    dp_{k_1, 0} - \frac{sum_i - d_{k_1}}{atk}a_i - d_i g(i) &amp;\le dp_{k_2, 0} - \frac{sum_i - d_{k_2}}{atk}a_i - d_ig(i) \<br>    dp_{k_1, 0} - dp_{k_2, 0} &amp;\le \frac{d_{k_2} - d_{k_1}}{atk} a_i \<br>\end{aligned}<br>$$<br>结果发现 $d_{k_2} - d_{k_1}$ 正负不定，挪不过去。<br>就强制写一个 <code>cdq</code> 。   </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>dp</tag>
        <tag>cdq</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」Mobius &amp; Dirichlet Solution Set</title>
    <url>/2022/02/06/2022-02-10-Mobius%20&amp;%20Dirichlet%20Solution%20Set/</url>
    <content><![CDATA[<p>All in one… updating…</p>
<span id="more"></span>

<h2 id="mathcal-Theorem"><a href="#mathcal-Theorem" class="headerlink" title="$\mathcal{Theorem}$"></a>$\mathcal{Theorem}$</h2><p>$$<br>[\gcd(i, j) &#x3D; 1] &#x3D; \sum_{d | \gcd(i, j)} \mu(d)<br>$$</p>
<h2 id="mathbb-完全平方数"><a href="#mathbb-完全平方数" class="headerlink" title="$\mathbb{完全平方数}$"></a>$\mathbb{完全平方数}$</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P4318">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>二分 + 莫比乌斯函数<br>$$<br>Ans &#x3D; \sum_{i &#x3D; 1}^{\sqrt{n}} \lfloor \frac{n}{i^2} \rfloor<br>$$</p>
<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, cnt, mu[MAXN], pr[MAXN];</span><br><span class="line">LL l, r, mid;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Euler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1e5</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">			pr[++cnt] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= <span class="number">1e5</span>; j++) &#123;</span><br><span class="line">			vis[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123;</span><br><span class="line">				mu[i * pr[j]] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mu[i * pr[j]] = -mu[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i * i &lt;= x; i++) &#123;</span><br><span class="line">		sum += (x / (i * i)) * mu[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Euler</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for (int i = 2; i &lt;= 20; i++) &#123;</span></span><br><span class="line">	<span class="comment">// 	printf(&quot;%d &quot;, mu[i]);</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// printf(&quot;test %d\n&quot;, count(19));</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">		l = <span class="number">1</span>, r = <span class="number">2e9</span>;</span><br><span class="line">		<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">			mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">count</span>(mid) &gt;= n) r = mid;</span><br><span class="line">			<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, l);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-GCD"><a href="#mathbb-GCD" class="headerlink" title="$\mathbb{GCD}$"></a>$\mathbb{GCD}$</h2><h3 id="mathcal-Link-1"><a href="#mathcal-Link-1" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="http://222.180.160.110:1024/contest/2387/problem/2">link</a></p>
<h3 id="mathcal-Sol-1"><a href="#mathcal-Sol-1" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>$$<br>\begin{aligned}<br>    &amp;\sum_{i &#x3D; 1}^{n} \sum_{j &#x3D; 1}^{m} [\gcd(i, j) &#x3D; k] \<br>    &#x3D; &amp;\sum_{i &#x3D; 1}^{\lfloor \frac{n}{k} \rfloor} \sum_{j &#x3D; 1}^{\lfloor \frac{m}{k} \rfloor} [\gcd(i, j) &#x3D; 1] \<br>    &#x3D; &amp;\sum_{i &#x3D; 1}^{\lfloor \frac{n}{k} \rfloor} \sum_{j &#x3D; 1}^{\lfloor \frac{m}{k} \rfloor} \sum_{d \mid \gcd(i, j)} \mu(d) \<br>    &#x3D; &amp;\sum_{d &#x3D; 1}^{\min(\lfloor \frac{n}{k} \rfloor, \lfloor \frac{m}{k} \rfloor)} \mu(d) \lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor<br>\end{aligned}<br>$$<br>然后可以直接枚举 $d$ 。   </p>
<h3 id="mathcal-Code-1"><a href="#mathcal-Code-1" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> vis[MAXN], pr[MAXN], cnt, mu[MAXN], sum[MAXN];</span><br><span class="line"><span class="type">int</span> a, b, c, d, k, t, cas;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Euler</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1e5</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">			pr[++cnt] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= <span class="number">1e5</span>; j++) &#123;</span><br><span class="line">			vis[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123;</span><br><span class="line">				mu[i * pr[j]] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mu[i * pr[j]] = -mu[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++) sum[i] = sum[i - <span class="number">1</span>] + mu[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Euler</span> ();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;t);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(t--) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld %lld %lld&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;k);</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Case %lld: 0&quot;</span>, ++cas); <span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		b = b / k, d = d / k;</span><br><span class="line">		<span class="keyword">if</span> (b &gt; d) <span class="built_in">swap</span>(b, d);</span><br><span class="line"></span><br><span class="line">		LL all, del, last, ans;</span><br><span class="line">		all = del = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b; i = last + <span class="number">1</span>) &#123;</span><br><span class="line">			last = <span class="built_in">min</span>(b / (b / i), d / (d / i));</span><br><span class="line">			all += (sum[last] - sum[i - <span class="number">1</span>]) * (b / i) * (d / i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b; i = last + <span class="number">1</span>) &#123;</span><br><span class="line">			last = b / (b / i);</span><br><span class="line">			del += (sum[last] - sum[i - <span class="number">1</span>]) * (b / i) * (b / i);</span><br><span class="line">		&#125;</span><br><span class="line">		ans = all - (del / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case %lld: %lld\n&quot;</span>, ++cas, ans);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-HAOI2011-Problem-b"><a href="#mathbb-HAOI2011-Problem-b" class="headerlink" title="$\mathbb{[HAOI2011]Problem \ b}$"></a>$\mathbb{[HAOI2011]Problem \ b}$</h2><h3 id="mathcal-Link-2"><a href="#mathcal-Link-2" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P2522">link</a></p>
<h3 id="mathcal-Sol-2"><a href="#mathcal-Sol-2" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>$$<br>\begin{aligned}<br>    &amp;\sum_{i &#x3D; 1}^{n} \sum_{j &#x3D; 1}^{m} [\gcd(i, j) &#x3D; k] \<br>    &#x3D; &amp;\sum_{i &#x3D; 1}^{\lfloor \frac{n}{k} \rfloor} \sum_{j &#x3D; 1}^{\lfloor \frac{m}{k} \rfloor} [\gcd(i, j) &#x3D; 1] \<br>    &#x3D; &amp;\sum_{i &#x3D; 1}^{\lfloor \frac{n}{k} \rfloor} \sum_{j &#x3D; 1}^{\lfloor \frac{m}{k} \rfloor} \sum_{d \mid \gcd(i, j)} \mu(d) \<br>    &#x3D; &amp;\sum_{d &#x3D; 1}^{\min(\lfloor \frac{n}{k} \rfloor, \lfloor \frac{m}{k} \rfloor)} \mu(d) \lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor<br>\end{aligned}<br>$$</p>
<p>然后应该用整除分块，时间复杂度 $\mathcal{O}(n + \sqrt{n})$ 。   </p>
<h3 id="mathcal-Code-2"><a href="#mathcal-Code-2" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, a, b, c, d, k, pr[MAXN], cnt, ans;</span><br><span class="line"><span class="type">int</span> mu[MAXN], sum[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Euler</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">5e4</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">			pr[++cnt] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= <span class="number">5e4</span>; j++) &#123;</span><br><span class="line">			vis[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123;</span><br><span class="line">				mu[i * pr[j]] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mu[i * pr[j]] = -mu[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++) sum[i] = sum[i - <span class="number">1</span>] + mu[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span> <span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, last = <span class="number">1</span>; i &lt;= n; i = last + <span class="number">1</span>) &#123;</span><br><span class="line">		last = <span class="built_in">min</span>(n / (n / i), m / (m / i));</span><br><span class="line">		res += (sum[last] - sum[i - <span class="number">1</span>]) * (n / (i * k)) * (m / (i * k));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">read</span>(t);</span><br><span class="line">	<span class="built_in">Euler</span> ();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">read</span>(a), <span class="built_in">read</span>(b), <span class="built_in">read</span>(c), <span class="built_in">read</span>(d), <span class="built_in">read</span>(k);</span><br><span class="line">		ans = <span class="built_in">query</span> (b, d) - <span class="built_in">query</span> (a - <span class="number">1</span>, d) - <span class="built_in">query</span> (c - <span class="number">1</span>, b) + <span class="built_in">query</span> (a - <span class="number">1</span>, c - <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-YY的GCD"><a href="#mathbb-YY的GCD" class="headerlink" title="$\mathbb{YY的GCD}$"></a>$\mathbb{YY的GCD}$</h2><h3 id="mathcal-Link-3"><a href="#mathcal-Link-3" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P2257">link</a></p>
<h3 id="mathcal-Sol-3"><a href="#mathcal-Sol-3" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>令所有素数组成的集合为 $\mathbb{P}$ 。   </p>
<p>$$<br>\begin{aligned}<br>    &amp; \sum_{i &#x3D; 1}^{n} \sum_{j &#x3D; 1}^{m} [\gcd(i, j) \in \mathbb{P}] \<br>    &#x3D; &amp; \sum_{p \in \mathbb{P}} \sum_{i &#x3D; 1}^{n} \sum_{j &#x3D; 1}^{m} [\gcd(i, j) &#x3D; p] \<br>    &#x3D; &amp; \sum_{p \in \mathbb{P}} \sum_{i &#x3D; 1}^{\lfloor \frac{n}{p} \rfloor} \sum_{i &#x3D; 1}^{\lfloor \frac{n}{p} \rfloor} [\gcd(i, j) &#x3D; 1] \<br>    &#x3D; &amp; \sum_{p \in \mathbb{P}} \sum_{d &#x3D; 1}^{\min(\lfloor \frac{n}{p} \rfloor, \lfloor \frac{m}{p} \rfloor)} \mu(d) \lfloor \frac{n}{pd} \rfloor \lfloor \frac{m}{pd} \rfloor<br>\end{aligned}<br>$$</p>
<p>令 $pd &#x3D; T$ 。<br>$$<br>\begin{aligned}<br>    &#x3D; &amp; \sum_{p \in \mathbb{P}} \sum_{d &#x3D; 1}^{\min(\lfloor \frac{n}{p} \rfloor, \lfloor \frac{m}{p} \rfloor)} \mu(d) \lfloor \frac{n}{pd} \rfloor \lfloor \frac{m}{pd} \rfloor \<br>    &#x3D; &amp; \sum_{T &#x3D; 1}^{n} \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor \sum_{p \mid T} \mu(\frac{T}{p}) \<br>\end{aligned}<br>$$</p>
<p>后面的 ${p \mid T} \mu(\frac{T}{p})$ 可以于预处理。<br>然后又是喜闻乐见的整除分块。   </p>
<h3 id="mathcal-Code-3"><a href="#mathcal-Code-3" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, m, pr[MAXN], cnt, ans;</span><br><span class="line"><span class="type">int</span> mu[MAXN], h[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Euler</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1e7</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">			pr[++cnt] = i;</span><br><span class="line">			mu[i] = <span class="number">-1</span>;</span><br><span class="line">			h[i] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= <span class="number">1e7</span>; j++) &#123;</span><br><span class="line">			vis[i * pr[j]] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123;</span><br><span class="line">				h[i * pr[j]] = mu[i];</span><br><span class="line">				mu[i * pr[j]] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				h[i * pr[j]] = -h[i] + mu[i];</span><br><span class="line">				mu[i * pr[j]] = -mu[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		h[i] += h[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;t);</span><br><span class="line">	<span class="built_in">Euler</span> ();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span> (<span class="string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">		<span class="keyword">if</span> (n &gt; m) <span class="built_in">swap</span> (n, m);</span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">			r = <span class="built_in">min</span> (n / (n / l), m / (m / l));</span><br><span class="line">            ans = ans + (h[r] - h[l - <span class="number">1</span>]) * (n / l) * (m / l);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-Multiplicative-Functions"><a href="#mathbb-Multiplicative-Functions" class="headerlink" title="$\mathbb{Multiplicative Functions}$"></a>$\mathbb{Multiplicative Functions}$</h2><h3 id="mathcal-Link-4"><a href="#mathcal-Link-4" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://vjudge.net/contest/480220#problem/A">link</a></p>
<h3 id="mathcal-Sol-4"><a href="#mathcal-Sol-4" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>$$<br>\begin{aligned}<br>    f * f^{-1} &#x3D; \epsilon \<br>    f^{-1}(1) &amp;&#x3D; \frac{1}{f(1)} \<br>    f^{-1}(n) * f(n) &amp;&#x3D; \sum_{d \mid n} f^{-1}(d)f(\frac{n}{d}) \<br>    &amp; &#x3D; f^{-1}(n)f(1) + \sum_{d \mid n, d \not &#x3D; n} f^{-1}(d) f(\frac{n}{d}) \<br>    &amp; &#x3D; \epsilon(n) \<br>    &amp; &#x3D; 0\<br>    f^{-1}(n) &#x3D; -\frac{\sum_{d \mid n, d \not &#x3D; n} f^{-1}(d) f(\frac{n}{d})}{f(1)}<br>\end{aligned}<br>$$</p>
<h3 id="mathcal-Code-4"><a href="#mathcal-Code-4" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">2007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, f[MAXN], invf[MAXN], pr[MAXN], cnt;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Euler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		invf[i] = (-invf[i] + Mod) % Mod;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, invf[i]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j * i &lt;= n; j++) &#123;</span><br><span class="line">			invf[i * j] = (invf[i * j] + f[j] * invf[i]) % Mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;f[i]);</span><br><span class="line">	invf[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">Euler</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-Clarke-and-math"><a href="#mathbb-Clarke-and-math" class="headerlink" title="$\mathbb{Clarke \ and \ math}$"></a>$\mathbb{Clarke \ and \ math}$</h2><h3 id="mathcal-Link-5"><a href="#mathcal-Link-5" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="http://222.180.160.110:1024/contest/2387/problem/5">link</a></p>
<h3 id="mathcal-Sol-5"><a href="#mathcal-Sol-5" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>$$<br>\begin{aligned}<br>    1(x) &#x3D; 1 \<br>    g_i&amp;&#x3D;\sum_{i_1\mid i}\sum_{i_2 \mid i_1}\sum_{i_3 \mid i_2}⋯\sum_{i_k\mid i_{k−1}}f(i_k) \<br>       &amp;&#x3D;\sum_{i_1\mid i}\sum_{i_2 \mid i_1}\sum_{i_3 \mid i_2}⋯\sum_{i_k\mid i_{k−1}}f(i_k) \times 1(\frac{i_{k - 1}}{i_{k}}) \<br>       &amp;&#x3D;\sum_{j \mid i} f(j) * 1^k \<br>\end{aligned}<br>$$</p>
<h3 id="mathcal-Code-5"><a href="#mathcal-Code-5" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, k, f[MAXN], ans[MAXN], tmp[MAXN], x[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dirichlet</span><span class="params">(<span class="type">int</span>* ans, <span class="type">int</span>* x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="built_in">sizeof</span>(tmp));</span><br><span class="line">	<span class="type">int</span> up = <span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= up; i++) &#123;</span><br><span class="line">		tmp[i * i] = (tmp[i * i] + ans[i] * x[i] % Mod) % Mod;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n / i; j++) &#123;</span><br><span class="line">			tmp[i * j] = (tmp[i * j] + ans[i] * x[j] % Mod) % Mod;</span><br><span class="line">			tmp[i * j] = (tmp[i * j] + ans[j] * x[i] % Mod) % Mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;f[i]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans[i] = <span class="number">0</span>, x[i] = <span class="number">1</span>;</span><br><span class="line">		ans[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (k) &#123;</span><br><span class="line">			<span class="keyword">if</span> (k &amp; <span class="number">1</span>) <span class="built_in">dirichlet</span>(ans, x);</span><br><span class="line">			<span class="built_in">dirichlet</span>(x, x);</span><br><span class="line">			k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dirichlet</span>(ans, f);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-BZOJ4407-于神之怒加强版"><a href="#mathbb-BZOJ4407-于神之怒加强版" class="headerlink" title="$\mathbb{BZOJ4407 \ 于神之怒加强版}$"></a>$\mathbb{BZOJ4407 \ 于神之怒加强版}$</h2><h3 id="mathcal-Link-6"><a href="#mathcal-Link-6" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P4449">link</a></p>
<h3 id="mathcal-Sol-6"><a href="#mathcal-Sol-6" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>$$<br>\begin{aligned}<br>      &amp; \sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m \gcd(i,j)^k \<br>    &#x3D; &amp; \sum_{g &#x3D; 1}^{\min(n, m)} g^k \sum_{i&#x3D;1}^{\lfloor \frac{n}{g} \rfloor} \sum_{j&#x3D;1}^{\lfloor \frac{m}{g} \rfloor} [\gcd(i, j) &#x3D; 1] \<br>    &#x3D; &amp; \sum_{g}^{\min(n, m)} g^k \sum_{i&#x3D;1}^{\lfloor \frac{n}{g} \rfloor} \sum_{j&#x3D;1}^{\lfloor \frac{m}{g} \rfloor} \sum_{d \mid \gcd(i, j)} \mu(d) \<br>    &#x3D; &amp; \sum_{d&#x3D;1}^{\min(n, m)} \sum_{t &#x3D; 1}^{\lfloor \frac{n}{d} \rfloor} dt^k \sum_{i&#x3D;1}^{\lfloor \frac{n}{dt} \rfloor} \sum_{j&#x3D;1}^{\lfloor \frac{m}{dt} \rfloor} \sum_{d \mid \gcd(i, j)} \mu(d) \<br>\end{aligned}<br>$$</p>
<p>令 $T &#x3D; dt$ 。   </p>
<p>$$<br>\begin{aligned}<br>    &amp; &#x3D; \sum_{T &#x3D; 1}^{\min(n, m)} \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor \sum_{d \mid T} d^k \mu(\frac{T}{d}) \<br>    &amp; &#x3D; \sum_{T &#x3D; 1}^{\min(n, m)} \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor \sum_{d \mid T} id_k(d) \mu(\frac{T}{d}) \<br>\end{aligned}<br>$$<br>令 $f(T) &#x3D; \sum_{d \mid T} id_k(d) \mu(\frac{T}{d})$。<br>$$<br>\begin{aligned}<br>    f(n) &amp; &#x3D; f(\prod p_i ^ {x_i}) \<br>         &amp; &#x3D; \prod f(p_i^{x_i}) \<br>    f(p_i^{x_i}) &amp;&#x3D; \sum_{j &#x3D; 1}^{x_i} id_k(p_i^j) \times \mu(p_i^{x_i - j}) \<br>    &amp;&#x3D; f(p_i^{x_i})\times \mu(1) + f(p_i^{x_i - 1})\times\mu(p_i) \<br>    &amp;&#x3D; (p_i^k - 1)\times p_i^{k\times (x_i - 1)}<br>\end{aligned}<br>$$<br>然后《发现》递推关系: $f(p_i^{x_i}) &#x3D; f(p_i^{x_i - 1}) \times p_i^k$ 。<br>当 $x_i &#x3D; 1$ 时，$f(p_i) &#x3D; p_i^k - 1$ 。   </p>
<p>在线性筛的时候，首先得到 $f(i)$ ，目前要求 $f(i \times p_j)$ 。   </p>
<p>$$<br>f(i \times p_j) &#x3D;<br>\begin{cases}<br>    f(i) \times (p_j^k - 1) \ , \ p_j \nmid i \<br>    f(i) \times p_j^k \ , \ p_j \mid i<br>\end{cases}<br>$$</p>
<h3 id="mathcal-Code-6"><a href="#mathcal-Code-6" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, k, n, m, cnt, mu[MAXN], pr[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line">LL f[MAXN], ans;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	LL res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % Mod;</span><br><span class="line">		x = x * x % Mod;</span><br><span class="line">		y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Euler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>, f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">5e6</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">			pr[++cnt] = i, mu[i] = <span class="number">-1</span>, f[i] = (<span class="built_in">qpow</span>(i, k) - <span class="number">1</span> + Mod) % Mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= <span class="number">5e6</span>; j++) &#123;</span><br><span class="line">			vis[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123; </span><br><span class="line">				f[i * pr[j]] = (f[i] * <span class="built_in">qpow</span>(pr[j], k)) % Mod;</span><br><span class="line">				mu[i * pr[j]] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				f[i * pr[j]] = (f[i] * (<span class="built_in">qpow</span>(pr[j], k) - <span class="number">1</span> + Mod)) % Mod;</span><br><span class="line">				mu[i * pr[j]] = -mu[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">5e6</span>; i++) f[i] = (f[i] + f[i - <span class="number">1</span>] + Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;t, &amp;k);</span><br><span class="line">	<span class="built_in">Euler</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> up = <span class="built_in">min</span>(n, m);</span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, last = <span class="number">1</span>; i &lt;= up; i = last + <span class="number">1</span>) &#123;</span><br><span class="line">			last = <span class="built_in">min</span>(n / (n / i), m / (m / i));</span><br><span class="line">			ans = (ans + ((n / i) * (m / i) % Mod) * ((f[last] - f[i - <span class="number">1</span>] + Mod) % Mod)) % Mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-Crash的数字表格"><a href="#mathbb-Crash的数字表格" class="headerlink" title="$\mathbb{Crash的数字表格}$"></a>$\mathbb{Crash的数字表格}$</h2><h3 id="mathcal-Link-7"><a href="#mathcal-Link-7" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P1829">link</a></p>
<h3 id="mathcal-Sol-7"><a href="#mathcal-Sol-7" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>$$<br>\begin{aligned}<br>    &amp;\sum \limits <em>{i &#x3D; 1} ^{n} \sum \limits <em>{j &#x3D; 1} ^{m} \mathrm{lcm}( i,j)\<br>    &#x3D;&amp;\sum \limits <em>{i &#x3D; 1} ^{n} \sum \limits <em>{j &#x3D; 1} ^{m} \frac{i\times j}{\gcd(i,j)} \<br>    &#x3D;&amp;\sum \limits <em>{i &#x3D; 1} ^{n} \sum \limits <em>{j &#x3D; 1} ^{m} \sum</em>{d \mid i, d\mid j, \gcd(\frac{i}{d}, \frac{j}{d}) &#x3D; 1} \frac{i\times j}{d} \<br>    &#x3D;&amp;\sum</em>{d&#x3D;1}^{n} \sum</em>{i&#x3D;1}^{n} \sum</em>{j&#x3D;1}^{m} [\gcd(\frac{i}{d}, \frac{j}{d}) &#x3D; 1] \frac{i \times j}{d} \<br>    &#x3D;&amp;\sum</em>{d&#x3D;1}^{n} \sum</em>{i&#x3D;1}^{\lfloor \frac{n}{d} \rfloor} \sum_{j&#x3D;1}^{\lfloor \frac{m}{d} \rfloor} [\gcd(i, j) &#x3D; 1] i\times j \times d \<br>    &#x3D;&amp;\sum_{d&#x3D;1}^{n} d \sum_{i&#x3D;1}^{\lfloor \frac{n}{d} \rfloor} \sum_{j&#x3D;1}^{\lfloor \frac{m}{d} \rfloor} [\gcd(i, j) &#x3D; 1] i\times j\<br>    &#x3D;&amp;\sum_{d&#x3D;1}^{n} d \sum_{i&#x3D;1}^{\lfloor \frac{n}{d} \rfloor} \sum_{j&#x3D;1}^{\lfloor \frac{m}{d} \rfloor} \sum_{g \mid \gcd(i, j)} \mu(g) i\times j\<br>    &#x3D;&amp;\sum_{d&#x3D;1}^n d \sum_{g \mid d} \mu(g) \sum_{i&#x3D;1}^{\lfloor \frac{n}{d} \rfloor} [g \mid i] \sum_{j&#x3D;1}^{\lfloor \frac{m}{d} \rfloor} [g \mid j] i\times j \<br>    &#x3D;&amp;\sum_{d&#x3D;1}^n d \sum_{g &#x3D; 1}^n \mu(g) g^2 \sum_{i&#x3D;1}^{\lfloor \frac{n}{dg} \rfloor} \sum_{j&#x3D;1}^{\lfloor \frac{m}{dg} \rfloor} i\times j\<br>    &#x3D;&amp;\sum_{d&#x3D;1}^n d \sum_{g &#x3D; 1}^n \mu(g) g^2 \frac{(\lfloor \frac{n}{dg} \rfloor + 1) \times \lfloor \frac{n}{dg} \rfloor}{2} \frac{(\lfloor \frac{m}{dg} \rfloor + 1) \times \lfloor \frac{m}{dg} \rfloor}{2} \<br>\end{aligned}<br>$$<br>整除分块可以 $\mathcal{O}(n \log n)$ 处理掉。<br>普通版本就可以解决了。<br>对于多组数据的情况还要优化。<br>$$<br>\begin{aligned}<br>    &#x3D;&amp;\sum_{d&#x3D;1}^n d \sum_{g &#x3D; 1}^n \mu(g) g^2 \frac{(\lfloor \frac{n}{dg} \rfloor + 1) \times \lfloor \frac{n}{dg} \rfloor}{2} \frac{(\lfloor \frac{m}{dg} \rfloor + 1) \times \lfloor \frac{m}{dg} \rfloor}{2} \<br>    &#x3D;&amp;\sum_{T&#x3D;1}^{n} \sum_{d \mid T} d \times \mu(\frac{T}{d}) \times (\frac{T}{d})^2 \frac{(\lfloor \frac{n}{T} \rfloor + 1) \times \lfloor \frac{n}{T} \rfloor}{2} \frac{(\lfloor \frac{m}{T} \rfloor + 1) \times \lfloor \frac{m}{T} \rfloor}{2} \<br>    &#x3D;&amp;\sum_{T&#x3D;1}^{n} T \frac{(\lfloor \frac{n}{T} \rfloor + 1) \times \lfloor \frac{n}{T} \rfloor}{2} \frac{(\lfloor \frac{m}{T} \rfloor + 1) \times \lfloor \frac{m}{T} \rfloor}{2} \sum_{g \mid T} \mu(g) \times g\<br>    &#x3D;&amp;\sum_{T&#x3D;1}^{n} T\sum_{g \mid T} \mu(g) \times g \frac{(\lfloor \frac{n}{T} \rfloor + 1) \times \lfloor \frac{n}{T} \rfloor}{2} \frac{(\lfloor \frac{m}{T} \rfloor + 1) \times \lfloor \frac{m}{T} \rfloor}{2} \<br>\end{aligned}<br>$$<br>令 $f(x) &#x3D; \sum_{d \mid x} \mu(d) \times d$ 。<br>$$<br>f(i \times p_j) &#x3D;<br>\begin{cases}<br>    f(i) , p_j \mid i \<br>    f(i) \times f(p_j) , p_j \nmid i<br>\end{cases}<br>$$</p>
<h3 id="mathcal-Code-7"><a href="#mathcal-Code-7" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">100000009</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, m, ans, mu[MAXN], f[MAXN], pr[MAXN], sum[MAXN], inv, cnt;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Euler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	inv = (Mod * <span class="number">3</span> + <span class="number">1</span>) / <span class="number">4</span>;</span><br><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>, mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1e7</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">			pr[++cnt] = i, mu[i] = <span class="number">-1</span>, f[i] = (<span class="number">1</span> - i + Mod) % Mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= <span class="number">1e7</span>; j++) &#123;</span><br><span class="line">			vis[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123;</span><br><span class="line">				mu[i * pr[j]] = <span class="number">0</span>;</span><br><span class="line">				f[i * pr[j]] = f[i];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mu[i * pr[j]] = -mu[i];</span><br><span class="line">			f[i * pr[j]] = (f[i] * f[pr[j]] % Mod + Mod) % Mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e7</span>; i++) sum[i] = (sum[i - <span class="number">1</span>] + f[i] * i % Mod) % Mod;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Euler</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">read</span>(t);</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">		<span class="type">int</span> up = <span class="built_in">min</span>(n, m);</span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, last = <span class="number">1</span>; i &lt;= up; i = last + <span class="number">1</span>) &#123;</span><br><span class="line">			last = <span class="built_in">min</span>(<span class="built_in">min</span>(n / (n / i), m / (m / i)), up);</span><br><span class="line">			ans = (ans + (sum[last] - sum[i - <span class="number">1</span>] + Mod) % Mod * ((n / i + <span class="number">1</span>) * (n / i) % Mod) % Mod * ((m / i + <span class="number">1</span>) * (m / i) % Mod) % Mod) % Mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans * inv % Mod);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-数表"><a href="#mathbb-数表" class="headerlink" title="$\mathbb{数表}$"></a>$\mathbb{数表}$</h2><h3 id="mathcal-Link-8"><a href="#mathcal-Link-8" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P3312">link</a></p>
<h3 id="mathcal-Sol-8"><a href="#mathcal-Sol-8" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>$$<br>\begin{aligned}<br>     &amp;\sum_{i &#x3D; 1}^n \sum_{j &#x3D; 1}^m [f(\gcd(i, j)) \le a] f(\gcd(i, j)) \<br>    &#x3D;&amp;\sum_{d, f(d) \le a} f(d) \sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^{n} \gcd(i, j) &#x3D; 1; \<br>    &#x3D;&amp;\sum_{d, f(d) \le a} f(d) \sum_{i&#x3D;1}^{\lfloor \frac{n}{d} \rfloor} \sum_{j&#x3D;1}^{\lfloor \frac{m}{d} \rfloor} [\gcd(i, j) &#x3D; 1] \<br>    &#x3D;&amp;\sum_{d, f(d) \le a} f(d) \sum_{i&#x3D;1}^{\lfloor \frac{n}{d} \rfloor} \sum_{j&#x3D;1}^{\lfloor \frac{m}{d} \rfloor} \sum_{g}^{\min(\lfloor \frac{n}{d} \rfloor, \lfloor \frac{m}{d} \rfloor)} \<br>    &#x3D;&amp;\sum_{d, f(d) \le a} f(d) \sum_{g}^{\min(\lfloor \frac{n}{d} \rfloor, \lfloor \frac{m}{d} \rfloor)} \mu(g) \lfloor \frac{n}{dg} \rfloor \lfloor \frac{m}{dg} \rfloor \<br>    &#x3D;&amp;\sum_{T &#x3D; 1}^n \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor \sum_{d \mid T} [f(d) \le a] f(d) \mu(\frac{T}{d})<br>\end{aligned}<br>$$<br>然后可以把后面的一块抠出来。<br>令 $h(T) &#x3D; \sum_{d \mid T} [f(d) \le a] f(d) \mu(\frac{T}{d})$ 。然后随着 $a$ 的递增，可以动态维护，用 <code>bit</code> 即可。   </p>
<h3 id="mathcal-Code-8"><a href="#mathcal-Code-8" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = (<span class="number">1ll</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q, cnt, lev, pr[MAXN], mu[MAXN], f[MAXN], g[MAXN], sum[MAXN], h[MAXN], bit[MAXN], ans[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; re;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> val)</span> </span>&#123; <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt;= <span class="number">1e5</span>; i += <span class="built_in">lowbit</span>(i)) bit[i] = (bit[i] + val) % Mod; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; <span class="type">int</span> res = <span class="number">0</span>; <span class="keyword">for</span> (<span class="type">int</span> i = p; i; i -= <span class="built_in">lowbit</span>(i)) res += bit[i]; <span class="keyword">return</span> res; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Euler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	g[<span class="number">1</span>] = f[<span class="number">1</span>] = <span class="number">1</span>; mu[<span class="number">1</span>] = sum[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1e5</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">			pr[++cnt] = i, mu[i] = <span class="number">-1</span>, f[i] = g[i] = i + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pr[j] * i &lt;= <span class="number">1e5</span>; j++) &#123;</span><br><span class="line">			vis[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>) &#123;</span><br><span class="line">				mu[i * pr[j]] = <span class="number">0</span>;</span><br><span class="line">				g[i * pr[j]] = g[i] * pr[j] + <span class="number">1</span>;</span><br><span class="line">				f[i * pr[j]] = f[i] / g[i] * g[i * pr[j]];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				mu[i * pr[j]] = -mu[i];</span><br><span class="line">				f[i * pr[j]] = f[i] * f[pr[j]];</span><br><span class="line">				g[i * pr[j]] = <span class="number">1</span> + pr[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		sum[i] = sum[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Questions</span> &#123; <span class="type">int</span> a, n, m, ind; &#125;;</span><br><span class="line">Questions que[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Num</span> &#123; <span class="type">int</span> val, ind; &#125; tmp[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; add[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Euler</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e5</span>; i++) tmp[i].val = f[i], tmp[i].ind = i;</span><br><span class="line">	<span class="built_in">sort</span>(tmp + <span class="number">1</span>, tmp + MAXN - <span class="number">4</span>, [](<span class="type">const</span> Num&amp; x, <span class="type">const</span> Num&amp; y) &#123; <span class="keyword">return</span> x.val &lt; y.val; &#125;);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e5</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (tmp[i].val != tmp[i - <span class="number">1</span>].val) re[++lev] = tmp[i].val;</span><br><span class="line">		add[lev].<span class="built_in">push_back</span>(tmp[i].ind);</span><br><span class="line">		<span class="comment">// printf(&quot;%d %d %d\n&quot;, tmp[i].val, tmp[i].ind, re[tmp[i].val]);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">read</span>(q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) <span class="built_in">read</span>(que[i].n), <span class="built_in">read</span>(que[i].m), <span class="built_in">read</span>(que[i].a), que[i].ind = i;</span><br><span class="line">	<span class="built_in">sort</span>(que + <span class="number">1</span>, que + <span class="number">1</span> + q, [](<span class="type">const</span> Questions&amp; x, <span class="type">const</span> Questions&amp; y) &#123; <span class="keyword">return</span> x.a &lt; y.a; &#125;);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, last = <span class="number">0</span>; i &lt;= q; i++) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (que[i].a != que[i - <span class="number">1</span>].a) &#123;</span><br><span class="line">			<span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (pos = last + <span class="number">1</span>; re[pos] &lt;= que[i].a &amp;&amp; pos &lt;= lev; pos++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; add[pos].<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = add[pos][k];</span><br><span class="line">					<span class="comment">// printf(&quot;%d %d %d-\n&quot;, x, f[x], re[x]);</span></span><br><span class="line">					<span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t * x &lt;= <span class="number">1e5</span>; t++) &#123;</span><br><span class="line">						h[t * x] = (h[t * x] + f[x] * mu[t] + Mod) % Mod;</span><br><span class="line">						<span class="built_in">update</span>(t * x, (f[x] * mu[t] + Mod) % Mod);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			last = pos - <span class="number">1</span>;</span><br><span class="line">			<span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> res = <span class="number">0</span>, up = <span class="built_in">min</span>(que[i].n, que[i].m);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= up; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">			r = <span class="built_in">min</span>(que[i].n / (que[i].n / l), que[i].m / (que[i].m / l));</span><br><span class="line">			r = <span class="built_in">min</span>(r, up);</span><br><span class="line">			res = (res + (<span class="built_in">query</span>(r) - <span class="built_in">query</span>(l - <span class="number">1</span>)) * (que[i].n / l) % Mod * (que[i].m / l) % Mod + Mod) % Mod;</span><br><span class="line">		&#125;</span><br><span class="line">		ans[que[i].ind] = res;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-DZY-Loves-Math"><a href="#mathbb-DZY-Loves-Math" class="headerlink" title="$\mathbb{DZY \ Loves \ Math}$"></a>$\mathbb{DZY \ Loves \ Math}$</h2><h3 id="mathcal-Link-9"><a href="#mathcal-Link-9" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="http://222.180.160.110:1024/contest/2387/problem/10">link</a></p>
<h3 id="mathcal-Sol-9"><a href="#mathcal-Sol-9" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>定义 $f(n)$ 为 $n$ 所含质因子的最大幂指数。<br>$$<br>\begin{aligned}<br>    &amp;\sum_{i &#x3D; 1}^{a} \sum_{j &#x3D; 1}^b f(\gcd(i, j)) \<br>    &#x3D;&amp;\sum_{T &#x3D; 1}^n \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor \sum_{d \mid T}  f(d) \mu(\frac{T}{d})<br>\end{aligned}<br>$$<br><del>把 $f$ 预处理出来，用埃筛算贡献即可。</del><br>$1e7$ 的数据规模跑的过去个鬼啊。。。<br>这个玩意儿没有积性没办法搞啊。。。   </p>
<p>果断咕掉。</p>
<h3 id="mathcal-Code-9"><a href="#mathcal-Code-9" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gu&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> gu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Gu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Gu</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-约数个数和"><a href="#mathbb-约数个数和" class="headerlink" title="$\mathbb{约数个数和}$"></a>$\mathbb{约数个数和}$</h2><h3 id="mathcal-Link-10"><a href="#mathcal-Link-10" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P3327">link</a></p>
<h3 id="mathcal-Sol-10"><a href="#mathcal-Sol-10" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>$$<br>\begin{aligned}<br>     &amp;\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^m d(ij) \<br>    &#x3D;&amp;\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^m \frac{d(ij)}{\gcd(i, j)} \times (\gcd(i, j) + 1) \<br>    &#x3D;&amp;<br>\end{aligned}<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>莫比乌斯反演</tag>
        <tag>Dirichlet</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」整体二分</title>
    <url>/2022/02/16/2022-02-16-%5BNote%5D%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<p><del>比 cdq 阳间多了 ！！！1</del></p>
<span id="more"></span>

<h2 id="mathcal-Dynamic-Rankings"><a href="#mathcal-Dynamic-Rankings" class="headerlink" title="$\mathcal{Dynamic \ Rankings}$"></a>$\mathcal{Dynamic \ Rankings}$</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P2617">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>整体二分却也是个比较好懂的算法。<br>大概就是用递归代替 <code>while</code> ，实现多线程推进。<br>然后把修改替换成删除和添加。<br>注释写在代码里</p>
<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">6e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, cnt, qcnt, num[MAXN], ans[MAXN], bit[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Question</span> &#123; <span class="type">int</span> l, r, k, op, ind; &#125; q[MAXN], q1[MAXN], q2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> val)</span> </span>&#123; <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) bit[i] += val; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) res += bit[i];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> vall, <span class="type">int</span> valr, <span class="type">int</span> optl, <span class="type">int</span> optr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (optl &gt; optr) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (vall == valr) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = optl; i &lt;= optr; i++) <span class="keyword">if</span> (q[i].op == <span class="number">2</span>) ans[q[i].ind] = vall;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> mid = (vall + valr) &gt;&gt; <span class="number">1</span>, cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = optl; i &lt;= optr; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (q[i].op == <span class="number">1</span>) &#123; <span class="comment">// 对于  删 / 加  操作</span></span><br><span class="line">			<span class="keyword">if</span> (q[i].l &lt;= mid) q1[++cnt1] = q[i], <span class="built_in">update</span>(q[i].ind, q[i].r);  <span class="comment">// 统计 &lt;= mid 的做出贡献</span></span><br><span class="line">			<span class="keyword">else</span> q2[++cnt2] = q[i];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> tmp = <span class="built_in">query</span>(q[i].r) - <span class="built_in">query</span>(q[i].l - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (q[i].k &gt; tmp) q[i].k -= tmp, q2[++cnt2] = q[i];</span><br><span class="line">			<span class="keyword">else</span> q1[++cnt1] = q[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) q[optl + i - <span class="number">1</span>] = q1[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) q[optl + cnt1 + i - <span class="number">1</span>] = q2[i]; </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) <span class="keyword">if</span> (q1[i].op == <span class="number">1</span>) <span class="built_in">update</span>(q1[i].ind, -q1[i].r);  <span class="comment">// 注意每层都要还原</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>(vall, mid, optl, optl + cnt1 - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">solve</span>(mid + <span class="number">1</span>, valr, optl + cnt1, optr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); num[i] = x;</span><br><span class="line">		q[++cnt] = Question&#123;x, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, i&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l, r, k, x, y; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">char</span> opt; cin &gt;&gt; opt;</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="string">&#x27;Q&#x27;</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;r, &amp;k), q[++cnt] = Question&#123;l, r, k, <span class="number">2</span>, ++qcnt&#125;;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y); <span class="comment">// 拆成  删除 / 添加</span></span><br><span class="line">			q[++cnt] = Question&#123;num[x], <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, x&#125;, num[x] = y;</span><br><span class="line">			q[++cnt] = Question&#123;num[x], <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, x&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>(-INF, INF, <span class="number">1</span>, cnt);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= qcnt; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathcal-ZJOI2013-K大数查询"><a href="#mathcal-ZJOI2013-K大数查询" class="headerlink" title="$\mathcal{[ZJOI2013]K大数查询}$"></a>$\mathcal{[ZJOI2013]K大数查询}$</h2><h3 id="mathcal-Link-1"><a href="#mathcal-Link-1" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P3332">link</a></p>
<h3 id="mathcal-Sol-1"><a href="#mathcal-Sol-1" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>这道题要把上一题的单修改成区修就好了。<br>主要开 <code>long long</code> 。   </p>
<h3 id="mathcal-Code-1"><a href="#mathcal-Code-1" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, qcnt;</span><br><span class="line">LL ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123; <span class="type">int</span> l, r; LL dat, tag; &#125; s[MAXN &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; s[p].dat = (s[p &lt;&lt; <span class="number">1</span>].dat + s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].dat); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!s[p].tag) <span class="keyword">return</span>;</span><br><span class="line">	s[p &lt;&lt; <span class="number">1</span>].dat += (s[p &lt;&lt; <span class="number">1</span>].r - s[p &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>) * s[p].tag, s[p &lt;&lt; <span class="number">1</span>].tag += s[p].tag;</span><br><span class="line">	s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].dat += (s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>) * s[p].tag, s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tag += s[p].tag;</span><br><span class="line">	s[p].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	s[p].l = l, s[p].r = r;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123; s[p].dat = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, LL add)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) &#123;</span><br><span class="line">		s[p].dat += (s[p].r - s[p].l + <span class="number">1</span>) * add, s[p].tag += add;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_down</span>(p);</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (l &lt;= mid) <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span>, l, r, add);</span><br><span class="line">	<span class="keyword">if</span> (r &gt; mid) <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, add);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) <span class="keyword">return</span> s[p].dat;</span><br><span class="line">	<span class="built_in">push_down</span>(p);</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (l &lt;= mid) res += <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">	<span class="keyword">if</span> (r &gt; mid) res += <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Question</span> &#123; <span class="type">int</span> l, r, ind, op; LL c; &#125; q[MAXN], q1[MAXN], q2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(LL vall, LL valr, <span class="type">int</span> optl, <span class="type">int</span> optr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (optl &gt; optr) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (vall == valr) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = optl; i &lt;= optr; i++) <span class="keyword">if</span> (q[i].op == <span class="number">2</span>) ans[q[i].ind] = vall;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LL mid = (vall + valr) &gt;&gt; <span class="number">1</span>; <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = optl; i &lt;= optr; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (q[i].op == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (q[i].c &lt;= mid) q1[++cnt1] = q[i];</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">update</span>(<span class="number">1</span>, q[i].l, q[i].r, <span class="number">1</span>), q2[++cnt2] = q[i];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			LL tmp = <span class="built_in">query</span>(<span class="number">1</span>, q[i].l, q[i].r);</span><br><span class="line">			<span class="keyword">if</span> (q[i].c &gt; tmp) q[i].c -= tmp, q1[++cnt1] = q[i];</span><br><span class="line">			<span class="keyword">else</span> q2[++cnt2] = q[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) q[optl + i - <span class="number">1</span>] = q1[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) q[optl + cnt1 + i - <span class="number">1</span>] = q2[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) <span class="keyword">if</span> (q2[i].op == <span class="number">1</span>) <span class="built_in">update</span>(<span class="number">1</span>, q2[i].l, q2[i].r, <span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">solve</span>(vall, mid, optl, optl + cnt1 - <span class="number">1</span>), <span class="built_in">solve</span>(mid + <span class="number">1</span>, valr, optl + cnt1, optr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, opt, l, r; i &lt;= m; i++) &#123; LL c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %lld&quot;</span>, &amp;opt, &amp;l, &amp;r, &amp;c);</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">1</span>) q[i] = Question&#123;l, r, i, <span class="number">1</span>, c&#125;;</span><br><span class="line">		<span class="keyword">else</span> q[i] = Question&#123;l, r, ++qcnt, <span class="number">2</span>, c&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">solve</span>(-INF, INF, <span class="number">1</span>, m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= qcnt; i++) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathcal-Sign-on-Fence"><a href="#mathcal-Sign-on-Fence" class="headerlink" title="$\mathcal{Sign \ on \ Fence}$"></a>$\mathcal{Sign \ on \ Fence}$</h2><h3 id="mathcal-Link-2"><a href="#mathcal-Link-2" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/CF484E">link</a></p>
<h3 id="mathcal-Sol-2"><a href="#mathcal-Sol-2" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>把求值转化成判定就好了，大概是个 <code>trick</code> 。<br>把问题变成查询是否有大于等于 <code>mid</code> 且长度不少于 <code>k</code> 的子区间。<br>然后就要线段树来维护一段最长的 <code>0/1</code> 区间。<br>于是题目就变成了 <a href="https://www.luogu.com.cn/problem/P4344">SHOI2015脑洞治疗仪</a> + 整体二分。   </p>
<h3 id="mathcal-Code-2"><a href="#mathcal-Code-2" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, cnt, ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123; <span class="type">int</span> l, r, dat, lmax, rmax; &#125; s[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	s[p].lmax = <span class="built_in">max</span>((s[p &lt;&lt; <span class="number">1</span>].lmax == s[p &lt;&lt; <span class="number">1</span>].r - s[p &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>) * s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lmax + s[p &lt;&lt; <span class="number">1</span>].lmax, s[p &lt;&lt; <span class="number">1</span>].lmax);</span><br><span class="line">	s[p].rmax = <span class="built_in">max</span>((s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rmax == s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>) * s[p &lt;&lt; <span class="number">1</span>].rmax + s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rmax, s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rmax);</span><br><span class="line">	s[p].dat = <span class="built_in">max</span>(<span class="built_in">max</span>(s[p &lt;&lt; <span class="number">1</span>].dat, s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].dat), s[p &lt;&lt; <span class="number">1</span>].rmax + s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	s[p].l = l, s[p].r = r;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		s[p].dat = s[p].lmax = s[p].rmax = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l == s[p].r) &#123;</span><br><span class="line">		s[p].dat = s[p].lmax = s[p].rmax = val;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (x &lt;= mid) <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span>, x, val);</span><br><span class="line">	<span class="keyword">if</span> (x &gt; mid) <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, val);</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) <span class="keyword">return</span> s[p].dat;</span><br><span class="line">	<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>, lmax = <span class="number">0</span>, rmax = <span class="number">0</span>, addl = <span class="number">0</span>, addr = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">		lmax = <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">		<span class="keyword">if</span> (r &gt; mid) addl = <span class="built_in">min</span>(mid - l + <span class="number">1</span>, s[p &lt;&lt; <span class="number">1</span>].rmax);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (r &gt; mid) &#123;</span><br><span class="line">		rmax = <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">		<span class="keyword">if</span> (l &lt;= mid) addr = <span class="built_in">min</span>(r - mid, s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lmax);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(addl + addr, <span class="built_in">max</span>(lmax, rmax));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Question</span> &#123; <span class="type">int</span> l, r, k, op, ind; &#125; q[MAXN], q1[MAXN], q2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> vall, <span class="type">int</span> valr, <span class="type">int</span> optl, <span class="type">int</span> optr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (optl &gt; optr) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (vall == valr) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = optl; i &lt;= optr; i++) <span class="keyword">if</span> (q[i].op == <span class="number">2</span>) ans[q[i].ind] = vall;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (vall + valr) &gt;&gt; <span class="number">1</span>, cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = optl; i &lt;= optr; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (q[i].op == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (q[i].l &gt; mid) <span class="built_in">update</span>(<span class="number">1</span>, q[i].ind, <span class="number">1</span>), q2[++cnt2] = q[i];</span><br><span class="line">			<span class="keyword">else</span> q1[++cnt1] = q[i];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> tmp = <span class="built_in">query</span>(<span class="number">1</span>, q[i].l, q[i].r);</span><br><span class="line">			<span class="keyword">if</span> (tmp &gt;= q[i].k) q2[++cnt2] = q[i];</span><br><span class="line">			<span class="keyword">else</span> q1[++cnt1] = q[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) q[optl + i - <span class="number">1</span>] = q1[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) q[optl + cnt1 + i - <span class="number">1</span>] = q2[i];</span><br><span class="line">	<span class="built_in">solve</span>(vall, mid, optl, optl + cnt1 - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = optl + cnt1; i &lt;= optr; i++) <span class="keyword">if</span> (q[i].op == <span class="number">1</span>) <span class="built_in">update</span>(<span class="number">1</span>, q[i].ind, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">solve</span>(mid + <span class="number">1</span>, valr, optl + cnt1, optr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">		q[++cnt] = Question&#123;x, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, i&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l, r, k; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">		q[++cnt] = Question&#123;l, r, k, <span class="number">2</span>, i&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">solve</span>(-INF, INF, <span class="number">1</span>, cnt);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mathcal-THUPC2017-天天爱射击"><a href="#mathcal-THUPC2017-天天爱射击" class="headerlink" title="$\mathcal{THUPC2017 \ 天天爱射击}$"></a>$\mathcal{THUPC2017 \ 天天爱射击}$</h2><h3 id="mathcal-Link-3"><a href="#mathcal-Link-3" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P7424">link</a></p>
<h3 id="mathcal-Sol-3"><a href="#mathcal-Sol-3" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>首先吐槽题面。<br>题目可以把子弹看成修改，把木板看成查询。<br>可以直接上手了。<br>主要在修改答案时改为统计每个修改造成贡献的查询有多少个。   </p>
<h3 id="mathcal-Code-3"><a href="#mathcal-Code-3" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, up, cnt, x1[MAXN], x2[MAXN], cou[MAXN], ans[MAXN], bit[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> val)</span> </span>&#123; <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= up; i += <span class="built_in">lowbit</span>(i)) bit[i] += val; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) res += bit[i];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Question</span> &#123; <span class="type">int</span> l, r, k, op, ind; &#125; q[MAXN], q1[MAXN], q2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> vall, <span class="type">int</span> valr, <span class="type">int</span> optl, <span class="type">int</span> optr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (optl &gt; optr) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (vall == valr) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = optl; i &lt;= optr; i++) <span class="keyword">if</span> (q[i].op == <span class="number">2</span>) ans[vall]++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (vall + valr) &gt;&gt; <span class="number">1</span>, cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = optl; i &lt;= optr; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (q[i].op == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (q[i].ind &lt;= mid) <span class="built_in">update</span>(q[i].l, <span class="number">1</span>), q1[++cnt1] = q[i];</span><br><span class="line">			<span class="keyword">else</span> q2[++cnt2] = q[i];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> tmp = <span class="built_in">query</span>(q[i].r) - <span class="built_in">query</span>(q[i].l - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (q[i].k &lt;= tmp) q1[++cnt1] = q[i];</span><br><span class="line">			<span class="keyword">else</span> q[i].k -= tmp, q2[++cnt2] = q[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) q[optl + i - <span class="number">1</span>] = q1[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) q[optl + cnt1 + i - <span class="number">1</span>] = q2[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) <span class="keyword">if</span> (q1[i].op == <span class="number">1</span>) <span class="built_in">update</span>(q1[i].l, <span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">solve</span>(vall, mid, optl, optl + cnt1 - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">solve</span>(mid + <span class="number">1</span>, valr, optl + cnt1, optr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;x1[i], &amp;x2[i], &amp;cou[i]), up = <span class="built_in">max</span>(up, x2[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), q[++cnt] = Question&#123;x, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, i&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) q[++cnt] = Question&#123;x1[i], x2[i], cou[i], <span class="number">2</span>, i&#125;;</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>, cnt);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathcal-Till-I-Collapse"><a href="#mathcal-Till-I-Collapse" class="headerlink" title="$\mathcal{Till \ I \ Collapse}$"></a>$\mathcal{Till \ I \ Collapse}$</h2><h3 id="mathcal-Link-4"><a href="#mathcal-Link-4" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/CF786C">link</a></p>
<h3 id="mathcal-Sol-4"><a href="#mathcal-Sol-4" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>大概是个整体二分？<br>你会发现答案单调，且最多只有 $\sqrt n $ 种答案取值。<br>然后可以搞一个神奇的二分模板套上去算它。   </p>
<h4 id="mathcal-Template"><a href="#mathcal-Template" class="headerlink" title="$\mathcal{Template}$"></a>$\mathcal{Template}$</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> lnum = <span class="built_in">check</span>(l), rnum = <span class="built_in">check</span>(r);</span><br><span class="line">	<span class="keyword">if</span> (lnum == rnum) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) ans[i] = lnum;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(l, mid), <span class="built_in">solve</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度是 $\mathcal{O}(\sqrt n \log n)$ 。   </p>
<h3 id="mathcal-Code-4"><a href="#mathcal-Code-4" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, len, dp[MAXN], fa[MAXN], dfn[MAXN], ans[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fath)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (v == fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(v, u);</span><br><span class="line">	&#125;</span><br><span class="line">	fa[u] = fath, dfn[++len] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dp[i] = <span class="number">1</span>, vis[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[dfn[i]] &amp;&amp; !vis[fa[dfn[i]]] &amp;&amp; fa[dfn[i]]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dp[fa[dfn[i]]] + dp[dfn[i]] &gt;= k) &#123;</span><br><span class="line">			sum++, vis[fa[dfn[i]]] = <span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> dp[fa[dfn[i]]] = <span class="built_in">max</span>(dp[fa[dfn[i]]], dp[dfn[i]] + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> lnum = <span class="built_in">check</span>(l), rnum = <span class="built_in">check</span>(r);</span><br><span class="line">	<span class="keyword">if</span> (lnum == rnum) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) ans[i] = lnum;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(l, mid), <span class="built_in">solve</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		G[u].<span class="built_in">push_back</span>(v), G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">solve</span>(<span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">	ans[<span class="number">1</span>] = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathcal-You-Are-Given-a-Tree"><a href="#mathcal-You-Are-Given-a-Tree" class="headerlink" title="$\mathcal{You \ Are \ Given \ a \ Tree}$"></a>$\mathcal{You \ Are \ Given \ a \ Tree}$</h2><h3 id="mathcal-Link-5"><a href="#mathcal-Link-5" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/CF1039D">link</a></p>
<h3 id="mathcal-Sol-5"><a href="#mathcal-Sol-5" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>与上一题类似。<br>只不过在树上，先 <code>dfs</code> 出 <code>dfn</code> 序，搞一个在 <code>dfn</code> 序上的 <code>dp</code> 就好了。   </p>
<h3 id="mathcal-Code-5"><a href="#mathcal-Code-5" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, len, dp[MAXN], fa[MAXN], dfn[MAXN], ans[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fath)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="keyword">if</span> (v == fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(v, u);</span><br><span class="line">	&#125;</span><br><span class="line">	fa[u] = fath, dfn[++len] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dp[i] = <span class="number">1</span>, vis[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[dfn[i]] &amp;&amp; !vis[fa[dfn[i]]] &amp;&amp; fa[dfn[i]]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dp[fa[dfn[i]]] + dp[dfn[i]] &gt;= k) &#123;</span><br><span class="line">			sum++, vis[fa[dfn[i]]] = <span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> dp[fa[dfn[i]]] = <span class="built_in">max</span>(dp[fa[dfn[i]]], dp[dfn[i]] + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> lnum = <span class="built_in">check</span>(l), rnum = <span class="built_in">check</span>(r);</span><br><span class="line">	<span class="keyword">if</span> (lnum == rnum) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) ans[i] = lnum;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(l, mid), <span class="built_in">solve</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		G[u].<span class="built_in">push_back</span>(v), G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">solve</span>(<span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">	ans[<span class="number">1</span>] = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>分治</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」LinkCutTree</title>
    <url>/2022/02/25/2022-02-25-LinkCutTree/</url>
    <content><![CDATA[<p>我不理解?</p>
<span id="more"></span>

<h2 id="mathbb-Problem"><a href="#mathbb-Problem" class="headerlink" title="$\mathbb{Problem}$"></a>$\mathbb{Problem}$</h2><p>简单的来说，就是在树剖的基础上加一个操作，支持树的<strong>裂开</strong>与<strong>合并</strong>。   </p>
<h2 id="mathbb-Editorial"><a href="#mathbb-Editorial" class="headerlink" title="$\mathbb{Editorial}$"></a>$\mathbb{Editorial}$</h2><p>如果做一遍重链剖分操作，操作完之后会发现，树上形成了很多以链为单位的连续区间，那么这时就能用 <code>SegmentTree</code> 做一些操作。   </p>
<p>本质上， <code>LinkCutTree</code> 维护的是动态的重链。<br>搞清楚维护的内容或许就来了一大半了。   </p>
<p>然后说一下具体的实现。<br>如果我们想操作某个区间，对于树剖来说，就是两个点反复上跳到 <code>lca</code> 并在中途维护题目要求的信息，会发现走的都是重链，如果我维护的是一个动态的树，并且期望达到树剖一样的效果，那我该怎么搞呢？   </p>
<p>把重链抽象成结构体 : <code>struct maxchain&#123; chain, fa &#125;</code> 。<br>这提示我们可以单独对于每条链维护一个结构体，其中包含本条链的信息和这条链的顶端的点的父节点（方便往上跳）。   </p>
<h4 id="mathcal-Struct"><a href="#mathcal-Struct" class="headerlink" title="$\mathcal{Struct}$"></a>$\mathcal{Struct}$</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span> &#123; <span class="type">int</span> fa, ch[<span class="number">2</span>], dat, ind, val; <span class="type">bool</span> rev; &#125; s[MAXN];</span><br></pre></td></tr></table></figure>

<p>如果把 <code>link</code> 和 <code>cut</code> 搬到链上表示，即是拆掉某条链的部分，接在另外一条链的某个位置。就是个序列操作，那么就可以用 <code>Splay</code> 作为内层数据结构实现这个操作。   </p>
<p>注：<code>Splay</code> 以动态的深度作为关键字建树。父节点的指针是单向的，仅是 <code>son -&gt; fa</code>   </p>
<p>大致的思想如上，讲讲核心的操作。   </p>
<h3 id="mathcal-Opter"><a href="#mathcal-Opter" class="headerlink" title="$\mathcal{Opter}$"></a>$\mathcal{Opter}$</h3><p>我自己造的操作。。。<br><code>opter(x, y)</code> 表示把 <code>x</code> 和 <code>y</code> 之间的路径抠出来，进行操作。<br>如果 <code>x</code> 和 <code>y</code> 在一个 <code>splay</code> 里面，并且 <code>x</code> 为原树的根，这个就是 <code>Splay</code> 的基操，直接把 <code>y</code> 转到 <code>Splay</code> 的根，然后 <code>x -&gt; y</code> 的路径就以 <code>y</code> 为根，取出 <code>y</code> 不就好了嘛。<br>然而这个美好的想法肯定不是一直成立。<br>那我们就强行让它成立。<br>因为他是 <strong>动态树</strong> &#x2F;xyx。</p>
<h3 id="mathcal-Makeroot"><a href="#mathcal-Makeroot" class="headerlink" title="$\mathcal{Makeroot}$"></a>$\mathcal{Makeroot}$</h3><p><del>顾名思义，造一个根</del>，额，<code>makeroot(x)</code> 实际上是把 <code>x</code> 变成原树的根。<br>如果 <code>x</code> 和原树的根再一个 <code>Splay</code> 里面，那这个只需要把 <code>x</code> 旋到 <code>Splay</code> 的根就行了。<br>你发现我又开始设想某种简单舒适的 <code>case</code> 了。<br>然而我还是可以强行办到。<br>只要我把 <code>x</code> 到原树根路径上的点塞到一个 <code>Splay</code> 里面就好了。   </p>
<h3 id="mathcal-Accecss"><a href="#mathcal-Accecss" class="headerlink" title="$\mathcal{Accecss}$"></a>$\mathcal{Accecss}$</h3><h5 id="mathbb-Editorial-1"><a href="#mathbb-Editorial-1" class="headerlink" title="$\mathbb{Editorial}$"></a>$\mathbb{Editorial}$</h5><p>通俗的讲， <code>access(x)</code> 就是把 <code>x</code> 和当前的根（原树）之间的路径变成一条重链，或者是说，把 <code>x</code> 和当前的根（原树）之间的路径上的点塞到一个 <code>Splay</code> 里面。<br>所以现在你沿着当前点往上跳就行了。。。</p>
<p>步骤如下：</p>
<ul>
<li>首先把 <code>x</code> 旋到他所在的 <code>Splay</code> 的根。</li>
<li>找到这条 <code>Splay</code> 的顶端节点的父指针，直接将单向的父指针改成双向的，两条链就拼在了一起，即是 <code>s[x].ch[1] = i</code> 。直接连右儿子就行了，因为 <code>i</code> 的深度一定大于 <code>x</code> 。发现这里不需要去双向断边。</li>
<li>更新 <code>x</code> 。</li>
</ul>
<h5 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; x; i = x, x = s[x].fa) &#123;</span><br><span class="line">		<span class="built_in">splay</span>(x);</span><br><span class="line">		s[x].ch[<span class="number">1</span>] = i;</span><br><span class="line">		<span class="built_in">push_up</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回去， <code>makeroot</code> 和 <code>opter</code> 的代码就也能写了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">access</span>(x);</span><br><span class="line">	<span class="built_in">splay</span>(x);</span><br><span class="line">	<span class="built_in">push_rev</span>(x); <span class="comment">// 反转两个儿子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">opter</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">makeroot</span>(x);</span><br><span class="line">	<span class="built_in">access</span>(y);</span><br><span class="line">	<span class="built_in">splay</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p>回到本职操作。<br>链接两个点，实际上是把两棵树拼到一起，首先把其中一个点旋到根，这个时候处于根的点可以随便搞，直接把 <code>fa</code> 指针指到另一个节点即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">makeroot</span>(x);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">findroot</span>(y) == x) <span class="keyword">return</span>; <span class="comment">// 不对同连通块里的两点加边</span></span><br><span class="line">	s[x].fa = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mathcal-Cut"><a href="#mathcal-Cut" class="headerlink" title="$\mathcal{Cut}$"></a>$\mathcal{Cut}$</h3><p>很(h&amp;emacr;i)清晰，先把一个点旋到根，把另外一点的父节点置空，把当前节点的右儿子置空。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">makeroot</span>(x);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">findroot</span>(y) != x || s[y].ch[<span class="number">0</span>] || s[y].fa != x) <span class="keyword">return</span>; <span class="comment">// 判 &lt;x,y&gt; 是否存在</span></span><br><span class="line">	s[y].fa = <span class="number">0</span>, s[x].ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="mathcal-Changes-about-Splay"><a href="#mathcal-Changes-about-Splay" class="headerlink" title="$\mathcal{Changes \ about \ Splay}$"></a>$\mathcal{Changes \ about \ Splay}$</h3><p>突然发现 <code>Splay</code> 部分忘了写了。。。   </p>
<p>观察可知，当 <code>makeroot</code> 之后父子关系、深度会发生变化，以前的 <code>Splay</code> 并不适用了，这个时候应该把 <code>Splay</code> 以 <code>newroot</code> 为根反转过来。   </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_rev</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; s[p].rev ^= <span class="number">1</span>, <span class="built_in">swap</span>(s[p].ch[<span class="number">0</span>], s[p].ch[<span class="number">1</span>]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!s[p].rev) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">push_rev</span>(s[p].ch[<span class="number">0</span>]), <span class="built_in">push_rev</span>(s[p].ch[<span class="number">1</span>]);</span><br><span class="line">	s[p].rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> ((s[s[x].fa].ch[<span class="number">0</span>] != x) &amp;&amp; (s[s[x].fa].ch[<span class="number">1</span>] != x)); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_all</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">check</span>(x)) <span class="built_in">push_all</span>(s[x].fa);</span><br><span class="line">	<span class="built_in">push_down</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">push_all</span>(x);</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">check</span>(x)) &#123;</span><br><span class="line">		<span class="type">int</span> y = s[x].fa, z = s[y].fa;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">check</span>(y)) <span class="built_in">rotate</span>((<span class="built_in">ident</span>(x) == <span class="built_in">ident</span>(y)) ? y : x);</span><br><span class="line">		<span class="built_in">rotate</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="mathcal-Code-1"><a href="#mathcal-Code-1" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h2><p>以 <a href="https://www.luogu.com.cn/problem/P2387">「NOI2014」魔法森林</a> 中维护联通块内最大边权及其编号的代码为例。</p>
<details class="code">
<summary>LinkCutTree.cpp</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkCutTree</span> &#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Splay</span> &#123; <span class="type">int</span> fa, ch[<span class="number">2</span>], dat, ind, val; <span class="type">bool</span> rev; &#125; s[MAXN];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		s[p].dat = <span class="built_in">max</span>(s[s[p].ch[<span class="number">0</span>]].dat, <span class="built_in">max</span>(s[p].val, s[s[p].ch[<span class="number">1</span>]].dat));</span><br><span class="line">		<span class="keyword">if</span> (s[s[p].ch[<span class="number">0</span>]].dat == s[p].dat) &#123;</span><br><span class="line">			s[p].ind = s[s[p].ch[<span class="number">0</span>]].ind;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[s[p].ch[<span class="number">1</span>]].dat == s[p].dat) &#123;</span><br><span class="line">			s[p].ind = s[s[p].ch[<span class="number">1</span>]].ind;</span><br><span class="line">		&#125; <span class="keyword">else</span> s[p].ind = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_rev</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; s[p].rev ^= <span class="number">1</span>, <span class="built_in">swap</span>(s[p].ch[<span class="number">0</span>], s[p].ch[<span class="number">1</span>]); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!s[p].rev) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">push_rev</span>(s[p].ch[<span class="number">0</span>]), <span class="built_in">push_rev</span>(s[p].ch[<span class="number">1</span>]);</span><br><span class="line">		s[p].rev = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> ((s[s[x].fa].ch[<span class="number">0</span>] != x) &amp;&amp; (s[s[x].fa].ch[<span class="number">1</span>] != x)); &#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ident</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == s[s[x].fa].ch[<span class="number">1</span>]; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">connect</span> <span class="params">(<span class="type">int</span> f, <span class="type">int</span> p, <span class="type">int</span> k)</span> </span>&#123; s[f].ch[k] = p, s[p].fa = f; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">rotate</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = s[x].fa, z = s[y].fa, k = <span class="built_in">ident</span> (x), k2 = <span class="built_in">ident</span> (y);</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">check</span>(y)) s[z].ch[k2] = x;</span><br><span class="line">		s[x].fa = z;</span><br><span class="line">		<span class="built_in">connect</span>(y, s[x].ch[k ^ <span class="number">1</span>], k);</span><br><span class="line">		<span class="built_in">connect</span>(x, y, k ^ <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">push_up</span> (y), <span class="built_in">push_up</span> (x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_all</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">check</span>(x)) <span class="built_in">push_all</span>(s[x].fa);</span><br><span class="line">		<span class="built_in">push_down</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">push_all</span>(x);</span><br><span class="line">		<span class="keyword">while</span> (!<span class="built_in">check</span>(x)) &#123;</span><br><span class="line">			<span class="type">int</span> y = s[x].fa, z = s[y].fa;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">check</span>(y)) <span class="built_in">rotate</span>((<span class="built_in">ident</span>(x) == <span class="built_in">ident</span>(y)) ? y : x);</span><br><span class="line">			<span class="built_in">rotate</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">push_up</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; x; i = x, x = s[x].fa) <span class="built_in">splay</span>(x), s[x].ch[<span class="number">1</span>] = i, <span class="built_in">push_up</span>(x); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="built_in">access</span>(x), <span class="built_in">splay</span>(x), <span class="built_in">push_rev</span>(x); &#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">access</span>(x), <span class="built_in">splay</span>(x), <span class="built_in">push_down</span>(x);</span><br><span class="line">		<span class="keyword">while</span> (s[x].ch[<span class="number">0</span>]) x = s[x].ch[<span class="number">0</span>], <span class="built_in">push_down</span>(x);</span><br><span class="line">		<span class="built_in">splay</span>(x);</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">opter</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">makeroot</span>(x), <span class="built_in">access</span>(y), <span class="built_in">splay</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">makeroot</span>(x);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">findroot</span>(y) == x) <span class="keyword">return</span>;</span><br><span class="line">		s[x].fa = y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">makeroot</span>(x);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">findroot</span>(y) != x || s[y].ch[<span class="number">0</span>] || s[y].fa != x) <span class="keyword">return</span>;</span><br><span class="line">		s[y].fa = <span class="number">0</span>, s[x].ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">push_up</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; lct;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</details>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」PresidentTree</title>
    <url>/2022/02/22/2022-02-22-%5BNote%5D%20PresidentTree/</url>
    <content><![CDATA[<p>小清新数据结构</p>
<span id="more"></span>

<h2 id="查询-Kth"><a href="#查询-Kth" class="headerlink" title="查询 Kth"></a>查询 Kth</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PresidentTree</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot, cnt, root[MAXN];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> l, r, lch, rch; LL dat; &#125; s[MAXN];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) s[i] = Node&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, root[i] = <span class="number">0</span>;</span><br><span class="line">		tot = cnt = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; s[++tot] = Node&#123;l, r, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="keyword">return</span> tot; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span> x, LL val)</span> </span>&#123;</span><br><span class="line">		s[++tot] = s[p], p = tot, s[p].dat++;</span><br><span class="line">		<span class="keyword">if</span> (s[p].l == s[p].r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!s[p].lch) s[p].lch = <span class="built_in">newnode</span>(<span class="number">0</span>, s[p].l, mid);</span><br><span class="line">			<span class="built_in">update</span>(s[p].lch, x, val);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (!s[p].rch) s[p].rch = <span class="built_in">newnode</span>(<span class="number">0</span>, mid + <span class="number">1</span>, s[p].r);</span><br><span class="line">			<span class="built_in">update</span>(s[p].rch, x, val);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> rt1, <span class="type">int</span> rt2, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[rt1].l == s[rt1].r) <span class="keyword">return</span> s[rt1].l;</span><br><span class="line">		<span class="type">int</span> mid = (s[rt1].r + s[rt1].l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> num = s[s[rt2].lch].dat - s[s[rt1].lch].dat;</span><br><span class="line">		<span class="keyword">if</span> (num &gt;= k) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!s[rt1].lch) s[rt1].lch = <span class="built_in">newnode</span>(<span class="number">0</span>, s[rt1].l, mid);</span><br><span class="line">			<span class="keyword">if</span> (!s[rt2].lch) s[rt2].lch = <span class="built_in">newnode</span>(<span class="number">0</span>, s[rt2].l, mid);</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">query</span>(s[rt1].lch, s[rt2].lch, k);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (!s[rt1].rch) s[rt1].rch = <span class="built_in">newnode</span>(<span class="number">0</span>, mid + <span class="number">1</span>, s[rt1].r);</span><br><span class="line">			<span class="keyword">if</span> (!s[rt2].rch) s[rt2].rch = <span class="built_in">newnode</span>(<span class="number">0</span>, mid + <span class="number">1</span>, s[rt2].r);</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">query</span>(s[rt1].rch, s[rt2].rch, k - num);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; pret;</span><br></pre></td></tr></table></figure>

<h2 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PresidentTree</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot, cnt, root[MAXN];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> l, r, lch, rch; LL dat, tag; &#125; s[MAXN];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) s[i] = Node&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, root[i] = <span class="number">0</span>;</span><br><span class="line">		tot = cnt = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		p = ++tot; s[p].l = l, s[p].r = r, s[p].dat = a[s[p].l];</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(s[p].lch, l, mid), <span class="built_in">build</span>(s[p].rch, mid + <span class="number">1</span>, r);</span><br><span class="line">		s[p].dat = s[s[p].lch].dat + s[s[p].rch].dat;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span> l, <span class="type">int</span> r, LL val)</span> </span>&#123;</span><br><span class="line">		s[++tot] = s[p], p = tot;</span><br><span class="line">		<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) &#123; s[p].tag += val; <span class="keyword">return</span>; &#125;</span><br><span class="line">		<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (l &lt;= mid) <span class="built_in">update</span>(s[p].lch, l, r, val);</span><br><span class="line">		<span class="keyword">if</span> (r &gt; mid) <span class="built_in">update</span>(s[p].rch, l, r, val);</span><br><span class="line">		s[p].dat += val * (<span class="built_in">min</span>(r, s[p].r) - <span class="built_in">max</span>(l, s[p].l) + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) &#123; <span class="keyword">return</span> s[p].dat + s[p].tag * (s[p].r - s[p].l + <span class="number">1</span>); &#125;</span><br><span class="line">		<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>; LL res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (l &lt;= mid) res += <span class="built_in">query</span>(s[p].lch, l, r);</span><br><span class="line">		<span class="keyword">if</span> (r &gt; mid) res += <span class="built_in">query</span>(s[p].rch, l, r);</span><br><span class="line">		res += s[p].tag * (<span class="built_in">min</span>(r, s[p].r) - <span class="built_in">max</span>(l, s[p].l) + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; pret;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」杜教筛</title>
    <url>/2022/02/18/2022-02-18-%5BNote%5D%E6%9D%9C%E6%95%99%E7%AD%9B/</url>
    <content><![CDATA[<p>大抵算个套路。</p>
<span id="more"></span>

<h2 id="mathbb-Editorial"><a href="#mathbb-Editorial" class="headerlink" title="$\mathbb{Editorial}$"></a>$\mathbb{Editorial}$</h2><p>给一个积性函数 $f$ ， 要求 $f$ 前缀和。<br>即是求 $\sum_{i &#x3D; 1}^{n} f(i)$ 。 但是当 $n$ 很大时，直接线筛的时间复杂度会很大。<br>杜教筛利用了狄利克雷卷积的性质，建立方程，将比较难直接算的函数，转化成一些简单函数的运算求解。   </p>
<p>具体地说，首先把要求的结果 $\sum_{i &#x3D; 1}^n f(i)$ 设为 $S(n)$ 。<br>然后再找一个积性函数 $g(i)$ ，利用卷积，可以知道<br>$$<br>\begin{aligned}<br>     &amp;\sum_{i &#x3D; 1}^{n} (f * g)(i) \<br>    &#x3D;&amp;\sum_{i &#x3D; 1}^{n} \sum_{d \mid i} f(d) g(\frac{i}{d}) \<br>    &#x3D;&amp;\sum_{d &#x3D; 1}^{n} g(d) \sum_{i &#x3D; 1}^{\lfloor{\frac{n}{d}}\rfloor} f(i) \<br>\end{aligned}<br>$$<br>马上可以发现 $\sum_{i &#x3D; 1}^{\lfloor{\frac{n}{d}}\rfloor} f(i)$ 可以替换成 $S(\lfloor{\frac{n}{d}}\rfloor)$ 。<br>那么原式就是 $\sum_{d &#x3D; 1}^{n} g(d) S(\lfloor{\frac{n}{d}}\rfloor)$ 。<br>我想要的是 $S(n)$ 。这个式子里有 $g(1)S(n)$ 。<br>那么找到 $g(1)S(n)$ 就找得到 $S(n)$ 了。这个可以通过 $\sum_{d &#x3D; 1}^{n} g(d) S(\lfloor{\frac{n}{d}}\rfloor) - \sum_{d &#x3D; 2}^{n} g(d) S(\lfloor{\frac{n}{d}}\rfloor)$ 得到。<br>再来一波回代， $S(n) &#x3D; \frac{\sum_{i &#x3D; 1}^{n} (f * g)(i) - \sum_{d &#x3D; 2}^{n} g(d) S(\lfloor{\frac{n}{d}}\rfloor)}{g(1)}$ 。<br>你可以选择一个合适的 $g$ 使得卷积可以飞快的算出来，假设算卷积的时间复杂度为 $\mathcal{O}(1)$ 。 那总共的时间复杂度可以达到 $\mathcal{O}(n^{\frac{3}{4}})$ , 比线性快得多。   </p>
<h2 id="mathcal-Lucas的数论"><a href="#mathcal-Lucas的数论" class="headerlink" title="$\mathcal{Lucas的数论}$"></a>$\mathcal{Lucas的数论}$</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://hydro.ac/d/bzoj/p/4176">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>先记一个结论。<br>$d(ij) &#x3D; \sum_{x \mid i} \sum_{y \mid j<br>}[\gcd(x, y)]$<br>于是这道题就可做了。<br>$$<br>$$</p>
]]></content>
      <tags>
        <tag>数论</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「Note」可持久化数据结构 全家桶</title>
    <url>/2022/03/02/2022-03-02-%E3%80%8CNote%E3%80%8D%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<p>统一了代码风格，一律是封装的形式。</p>
<span id="more"></span>

<h2 id="mathcal-SegmentTree"><a href="#mathcal-SegmentTree" class="headerlink" title="$\mathcal{SegmentTree}$"></a>$\mathcal{SegmentTree}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PresidentTree</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot, cnt, root[MAXN];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> lch, rch, dat; &#125; s[MAXN * <span class="number">25</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) s[i] = Node&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, root[i] = <span class="number">0</span>;</span><br><span class="line">		tot = cnt = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; s[++tot] = Node&#123;l, r, <span class="number">0</span>&#125;; <span class="keyword">return</span> tot; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span>&amp; p, <span class="type">int</span> x, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		s[++tot] = s[p], p = tot, s[p].dat += val;</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (x &lt;= mid) <span class="built_in">update</span>(l, mid, s[p].lch, x, val);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">update</span>(mid + <span class="number">1</span>, r, s[p].rch, x, val);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> rt1, <span class="type">int</span> rt2, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">		<span class="type">int</span> mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> num = s[s[rt2].lch].dat - s[s[rt1].lch].dat;</span><br><span class="line">		<span class="keyword">if</span> (num &gt;= k) <span class="keyword">return</span> <span class="built_in">query</span>(l, mid, s[rt1].lch, s[rt2].lch, k);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(mid + <span class="number">1</span>, r, s[rt1].rch, s[rt2].rch, k - num);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> rt1, <span class="type">int</span> rt2, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span> s[rt2].dat - s[rt1].dat;</span><br><span class="line">		<span class="type">int</span> mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (x &lt;= mid) <span class="keyword">return</span> <span class="built_in">count</span>(l, mid, s[rt1].lch, s[rt2].lch, x);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">count</span>(mid + <span class="number">1</span>, r, s[rt1].rch, s[rt2].rch, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; pret;</span><br></pre></td></tr></table></figure>
<h2 id="mathcal-DSU"><a href="#mathcal-DSU" class="headerlink" title="$\mathcal{DSU}$"></a>$\mathcal{DSU}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Present_UnionFindTree</span> &#123;</span><br><span class="line">	<span class="type">int</span> cnt, root[MAXN * <span class="number">35</span>];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Node</span>&#123; <span class="type">int</span> l, r, fa, rnk, res; &#125; s[(MAXN &lt;&lt; <span class="number">2</span>) * <span class="number">35</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		p = ++cnt, s[p].res = INF;</span><br><span class="line">		<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">			s[p].fa = l, s[p].res = dis[l];</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(s[p].l, l, mid), <span class="built_in">build</span>(s[p].r, mid + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> nfa)</span> </span>&#123;</span><br><span class="line">		s[++cnt] = s[p], p = cnt;</span><br><span class="line">		<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">			s[p].fa = nfa;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">merge</span>(s[p].l, l, mid, pos, nfa);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">merge</span>(s[p].r, mid + <span class="number">1</span>, r, pos, nfa);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> add, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		s[++cnt] = s[p], p = cnt;</span><br><span class="line">		<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">			s[p].rnk += add;</span><br><span class="line">			s[p].res = val;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">update</span>(s[p].l, l, mid, pos, add, val);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">update</span>(s[p].r, mid + <span class="number">1</span>, r, pos, add, val);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span> p;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (pos &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(s[p].l, l, mid, pos);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(s[p].r, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> now = <span class="built_in">query</span>(p, <span class="number">1</span>, n, pos);</span><br><span class="line">		<span class="keyword">if</span> (s[now].fa == pos) <span class="keyword">return</span> now;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">FindSet</span>(p, s[now].fa);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; ust;</span><br></pre></td></tr></table></figure>
<h2 id="mathcal-Trie"><a href="#mathcal-Trie" class="headerlink" title="$\mathcal{Trie}$"></a>$\mathcal{Trie}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="type">int</span> cnt, root[MAXN], ch[MAXN * <span class="number">30</span>][<span class="number">30</span>], ed[MAXN * <span class="number">30</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> lst, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> now = s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">26</span>; j++) <span class="keyword">if</span> (j != now) ch[p][j] = ch[lst][j];</span><br><span class="line">            p = ch[p][now] = ++cnt, lst = ch[lst][now];</span><br><span class="line">            ed[p] = ed[lst] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> pre, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>), res = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> now = s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            res = <span class="built_in">min</span>(res, ed[ch[x][now]] + ed[ch[y][now]] - <span class="number">2</span> * ed[ch[pre][now]]);</span><br><span class="line">            x = ch[x][now], y = ch[y][now], pre = ch[pre][now];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; trie;</span><br></pre></td></tr></table></figure>
<h2 id="mathcal-Treap"><a href="#mathcal-Treap" class="headerlink" title="$\mathcal{Treap}$"></a>$\mathcal{Treap}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span> &#123;</span><br><span class="line">	<span class="type">int</span> cnt, root[MAXN], pre, now, nxt;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> val, key, l, r, siz; &#125; s[MAXN * MAXLOG];</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123; s[++cnt].val = val, s[cnt].key = <span class="built_in">rand</span>(), s[cnt].siz = <span class="number">1</span>; <span class="keyword">return</span> cnt; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; s[p].siz = s[s[p].l].siz + s[s[p].r].siz + <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> val, <span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!p) &#123; x = y = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">		<span class="keyword">if</span> (s[p].val &lt;= val) s[++cnt] = s[p], x = cnt, <span class="built_in">split</span>(s[x].r, val, s[x].r, y), <span class="built_in">push_up</span>(x);</span><br><span class="line">		<span class="keyword">else</span> s[++cnt] = s[p], y = cnt, <span class="built_in">split</span>(s[y].l, val, x, s[y].l), <span class="built_in">push_up</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">		<span class="type">int</span> p = ++cnt;</span><br><span class="line">		<span class="keyword">if</span> (s[x].key &gt; s[y].key) s[p] = s[x], s[p].r = <span class="built_in">merge</span>(s[p].r, y);</span><br><span class="line">		<span class="keyword">else</span> s[p] = s[y], s[p].l = <span class="built_in">merge</span>(x, s[p].l);</span><br><span class="line">		<span class="built_in">push_up</span>(p);</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span> val)</span> </span>&#123; <span class="built_in">split</span>(p, val, pre, nxt), p = <span class="built_in">merge</span>(pre, <span class="built_in">merge</span>(<span class="built_in">newnode</span>(val), nxt)); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">split</span>(p, val, pre, nxt), <span class="built_in">split</span>(pre, val - <span class="number">1</span>, pre, now);</span><br><span class="line">		now = <span class="built_in">merge</span>(s[now].l, s[now].r), p = <span class="built_in">merge</span>(<span class="built_in">merge</span>(pre, now), nxt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">queryrnk</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">split</span>(p, val - <span class="number">1</span>, pre, nxt);</span><br><span class="line">		<span class="type">int</span> res = s[pre].siz + <span class="number">1</span> - <span class="number">1</span>;</span><br><span class="line">		p = <span class="built_in">merge</span>(pre, nxt);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">querykth</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (p) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[s[p].l].siz + <span class="number">1</span> == k) <span class="keyword">return</span> s[p].val;</span><br><span class="line">			<span class="keyword">if</span> (s[s[p].l].siz &gt;= k) &#123; p = s[p].l; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			k -= s[s[p].l].siz + <span class="number">1</span>, p = s[p].r;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">querypre</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">split</span>(p, val - <span class="number">1</span>, pre, nxt);</span><br><span class="line">		<span class="type">int</span> res = <span class="built_in">querykth</span>(pre, s[pre].siz);</span><br><span class="line">		p = <span class="built_in">merge</span>(pre, nxt);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">querynxt</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">split</span>(p, val, pre, nxt);</span><br><span class="line">		<span class="type">int</span> res = <span class="built_in">querykth</span>(nxt, <span class="number">1</span>);</span><br><span class="line">		p = <span class="built_in">merge</span>(pre, nxt);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; treap;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>线段树</tag>
        <tag>平衡树</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」棘手的操作 题解</title>
    <url>/2022/03/29/2022-03-29-%E3%80%8CSolution%E3%80%8D%E6%A3%98%E6%89%8B%E7%9A%84%E6%93%8D%E4%BD%9C%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><del>关于我不会可并堆这个事。</del>   </p>
<span id="more"></span>

<h2 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h2><p><a href="https://www.luogu.com.cn/problem/P3273">link</a></p>
<h2 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h2><p>两个 $log$ 的线段树合并应该都会，我就不说了。<br>这个做法的瓶颈在于合并过慢，考虑把它办了。<br>希望是不合并，把每个连通块搞到一段连续的区间里，以降低复杂度。<br>发现只有合并操作，不用考虑分割，貌似这个思路是对的。<br>继续想，把所有的联通块都可以挤扁成链，如图：<br><img data-src="https://chenjg41.gitee.io/assets/images/T2.png"><br>当两个联通块中有两点相连时，可以等价地直接把他们首尾相接。<br>那么可以先把操作离线下来，把所有的合并操作先做一遍，并记录每个操作后，被操作的连通块的大小变化，同时把连出来的图存好。<br>跑 <code>dfs</code> ，标上 <code>dfn</code> ，现在图上只有多条单链，可以直接映射到线段树上，就可以把联通块的操作转到区间上。   </p>
<hr>
<p>大约的确是没写的太清楚，可以看看加了注释的代码</p>
<h2 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Maybe it is a LinkQueryTree...</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[MAXN], dfn[MAXN], redfn[MAXN], tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Question</span> &#123; <span class="type">int</span> opt, u, v; &#125; que[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; len[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UnionFindSet</span> &#123;</span><br><span class="line">	<span class="type">int</span> fa[MAXN], siz[MAXN], tail[MAXN];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			len[i].<span class="built_in">clear</span>();</span><br><span class="line">			G[i].<span class="built_in">clear</span>();</span><br><span class="line">			fa[i] = tail[i] = i, siz[i] = <span class="number">1</span>, len[i].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">FindSet</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[v] == v) <span class="keyword">return</span> v;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> fa[v] = <span class="built_in">FindSet</span>(fa[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> x = <span class="built_in">FindSet</span>(u);</span><br><span class="line">		<span class="type">int</span> y = <span class="built_in">FindSet</span>(v);</span><br><span class="line">		<span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (siz[x] &lt; siz[y]) <span class="built_in">swap</span>(x, y); <span class="comment">// 启发式</span></span><br><span class="line">		fa[y] = tail[x]; <span class="comment">// 将小块的头接到大块的尾</span></span><br><span class="line">		G[tail[x]].<span class="built_in">push_back</span>(y); <span class="comment">// 大块的尾箱小块的头连边，把两条链拼一起</span></span><br><span class="line">		tail[x] = tail[y]; <span class="comment">// 更新链尾</span></span><br><span class="line">		siz[x] += siz[y]; <span class="comment">// 更新大小</span></span><br><span class="line">		len[x].<span class="built_in">push_back</span>(siz[x]); <span class="comment">// 记录每个版本的链长</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125; dsu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	dfn[u] = ++tot, redfn[tot] = u; <span class="comment">// 双向映射</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> v = G[u][i];</span><br><span class="line">		<span class="built_in">dfs</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123; <span class="comment">// 这个就是一个区修区查线段树</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> l, r, dat, tag; &#125; s[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; s[p].dat = <span class="built_in">max</span>(s[p &lt;&lt; <span class="number">1</span>].dat, s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].dat); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!s[p].tag) <span class="keyword">return</span>;</span><br><span class="line">		s[p &lt;&lt; <span class="number">1</span>].tag += s[p].tag;</span><br><span class="line">		s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tag += s[p].tag;</span><br><span class="line">		s[p &lt;&lt; <span class="number">1</span>].dat += s[p].tag;</span><br><span class="line">		s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].dat += s[p].tag;</span><br><span class="line">		s[p].tag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		s[p].l = l, s[p].r = r;</span><br><span class="line">		<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">			s[p].dat = a[redfn[l]];</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">		<span class="built_in">push_up</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) &#123;</span><br><span class="line">			s[p].dat += val;</span><br><span class="line">			s[p].tag += val;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">push_down</span>(p);</span><br><span class="line">		<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (l &lt;= mid) <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span>, l, r, val);</span><br><span class="line">		<span class="keyword">if</span> (r &gt; mid) <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, val);</span><br><span class="line">		<span class="built_in">push_up</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) <span class="keyword">return</span> s[p].dat;</span><br><span class="line">		<span class="built_in">push_down</span>(p);</span><br><span class="line">		<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>, res = -INF;</span><br><span class="line">		<span class="keyword">if</span> (l &lt;= mid) res = <span class="built_in">max</span>(res, <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span>, l, r));</span><br><span class="line">		<span class="keyword">if</span> (r &gt; mid) res = <span class="built_in">max</span>(res, <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// freopen(&quot;kittle.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="comment">// freopen(&quot;kittle.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">char</span> opt[<span class="number">3</span>]; <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, opt);</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">&#x27;U&#x27;</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v), que[i] = Question&#123;<span class="number">0</span>, u, v&#125;;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (opt[<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v), que[i] = Question&#123;<span class="number">1</span>, u, v&#125;;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (opt[<span class="number">1</span>] == <span class="string">&#x27;2&#x27;</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v), que[i] = Question&#123;<span class="number">2</span>, u, v&#125;;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v), que[i] = Question&#123;<span class="number">3</span>, <span class="number">0</span>, v&#125;;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (opt[<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u), que[i] = Question&#123;<span class="number">4</span>, u, <span class="number">0</span>&#125;;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (opt[<span class="number">1</span>] == <span class="string">&#x27;2&#x27;</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u), que[i] = Question&#123;<span class="number">5</span>, u, <span class="number">0</span>&#125;;</span><br><span class="line">			<span class="keyword">else</span> que[i] = Question&#123;<span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 离线下来，连一遍图</span></span><br><span class="line">	dsu.<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (que[i].opt == <span class="number">0</span>) &#123;</span><br><span class="line">		dsu.<span class="built_in">UnionSet</span>(que[i].u, que[i].v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 建立映射</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (dsu.<span class="built_in">FindSet</span>(i) == i) &#123; <span class="comment">// 对于每条链，从链头开始标 dfn</span></span><br><span class="line">		<span class="built_in">dfs</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">	<span class="comment">// 	printf(&quot;%d &quot;, dfn[i]);</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line">	<span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">	<span class="comment">// 	printf(&quot;%d &quot;, redfn[i]);</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line"></span><br><span class="line">	seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n), dsu.<span class="built_in">init</span>(); <span class="comment">// 这里又把 dsu 清空一遍，边操作边更新，保证 dsu 和当前图的一致性</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, res; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (que[i].opt == <span class="number">0</span>) &#123;</span><br><span class="line">			dsu.<span class="built_in">UnionSet</span>(que[i].u, que[i].v);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (que[i].opt == <span class="number">1</span>) &#123;</span><br><span class="line">			seg.<span class="built_in">update</span>(<span class="number">1</span>, dfn[que[i].u], dfn[que[i].u], que[i].v);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (que[i].opt == <span class="number">2</span>) &#123; <span class="comment">// 现在这个联通块对应的区间就是 [dfn[now], dfn[now] + len - 1]</span></span><br><span class="line">			<span class="type">int</span> now = dsu.<span class="built_in">FindSet</span>(que[i].u);</span><br><span class="line">			seg.<span class="built_in">update</span>(<span class="number">1</span>, dfn[now], dfn[now] + len[now][len[now].<span class="built_in">size</span>() - <span class="number">1</span>] - <span class="number">1</span>, que[i].v);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (que[i].opt == <span class="number">3</span>) &#123;</span><br><span class="line">			seg.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, que[i].v);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (que[i].opt == <span class="number">4</span>) &#123;</span><br><span class="line">			res = seg.<span class="built_in">query</span>(<span class="number">1</span>, dfn[que[i].u], dfn[que[i].u]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (que[i].opt == <span class="number">5</span>) &#123;</span><br><span class="line">			<span class="type">int</span> now = dsu.<span class="built_in">FindSet</span>(que[i].u);</span><br><span class="line">			res = seg.<span class="built_in">query</span>(<span class="number">1</span>, dfn[now], dfn[now] + len[now][len[now].<span class="built_in">size</span>() - <span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			res = seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		for (int j = 1; j &lt;= n; j++) &#123;</span></span><br><span class="line"><span class="comment">			printf(&quot;%d &quot;, seg.query(1, dfn[j], dfn[j]));</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」2022-04-09-CQ2008 &amp; ZJ2009踩坑祭</title>
    <url>/2022/04/09/2022-04-09-CQ2008%20&amp;%20ZJ2009%E8%B8%A9%E5%9D%91%E7%A5%AD/</url>
    <content><![CDATA[<p>属于是把能踩的坑都跳了一遍。。。</p>
<span id="more"></span>

<h2 id="位统计"><a href="#位统计" class="headerlink" title="位统计"></a>位统计</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="http://222.180.160.110:1024/contest/2527/problem/1">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>把所有的操作累到一起。<br>查询的是一段区间。   </p>
<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><details class="code">
<summary>bit.cpp</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">200005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK = <span class="number">25</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">65536</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		<span class="type">int</span> dat;</span><br><span class="line">	&#125; s[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		s[p].l = l, s[p].r = r;</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[p].l == s[p].r) &#123;</span><br><span class="line">			s[p].dat += <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span>, pos);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos);</span><br><span class="line">		s[p].dat = s[p &lt;&lt; <span class="number">1</span>].dat + s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].dat;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[p].l &gt;= l &amp;&amp; s[p].r &lt;= r) <span class="keyword">return</span> s[p].dat;</span><br><span class="line">		<span class="type">int</span> mid = (s[p].l + s[p].r) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (l &lt;= mid) res += <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">		<span class="keyword">if</span> (r &gt; mid) res += <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; seg[MAXK];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 	freopen(&quot;bit.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">// 	freopen(&quot;bit.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i++) seg[i].<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, Mod);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">		<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt;= <span class="number">15</span>; w++) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((x &gt;&gt; w) &amp; <span class="number">1</span>) num |= (<span class="number">1</span> &lt;&lt; w);</span><br><span class="line">			seg[w].<span class="built_in">update</span>(<span class="number">1</span>, num);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, add, pos; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">char</span> opt[<span class="number">2</span>]; <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, opt);</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;add);</span><br><span class="line">			d = (d + add) % Mod;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">			<span class="type">int</span> l, r, ans = <span class="number">0</span>;</span><br><span class="line">			l = (<span class="number">1</span> &lt;&lt; pos) + (<span class="number">1</span> &lt;&lt; pos + <span class="number">1</span>) - (d &amp; ((<span class="number">1</span> &lt;&lt; pos + <span class="number">1</span>) - <span class="number">1</span>));</span><br><span class="line">			r = <span class="built_in">min</span>((<span class="number">1</span> &lt;&lt; pos + <span class="number">2</span>) - (d &amp; ((<span class="number">1</span> &lt;&lt; pos + <span class="number">1</span>) - <span class="number">1</span>)), Mod);</span><br><span class="line">			ans += seg[pos].<span class="built_in">query</span>(<span class="number">1</span>, l, r);</span><br><span class="line">			l = (<span class="number">1</span> &lt;&lt; pos) - (d &amp; ((<span class="number">1</span> &lt;&lt; pos + <span class="number">1</span>) - <span class="number">1</span>));</span><br><span class="line">			r = <span class="built_in">min</span>((<span class="number">1</span> &lt;&lt; pos + <span class="number">1</span>) - <span class="number">1</span> - (d &amp; ((<span class="number">1</span> &lt;&lt; pos + <span class="number">1</span>) - <span class="number">1</span>)), Mod);</span><br><span class="line">			ans += seg[pos].<span class="built_in">query</span>(<span class="number">1</span>, l, r);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="矩阵的个数"><a href="#矩阵的个数" class="headerlink" title="矩阵的个数"></a>矩阵的个数</h2><h3 id="mathcal-Link-1"><a href="#mathcal-Link-1" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="http://222.180.160.110:1024/contest/2527/problem/2">link</a></p>
<h3 id="mathcal-Sol-1"><a href="#mathcal-Sol-1" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>看到其实前两行定了，第三行就会固定下来。<br>一个 $n^5$ 的 <code>dp</code> 可以搞定</p>
<h3 id="mathcal-Code-1"><a href="#mathcal-Code-1" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><details class="code">
<summary>matrix.cpp</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> LL Mod = <span class="number">1e17</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[MAXN], c1, c2, c3;</span><br><span class="line">LL dp[MAXN][MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld %lld&quot;</span>, &amp;n, &amp;c1, &amp;c2, &amp;c3);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= c1; j++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= c2; k++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt;= a[i] &amp;&amp; x + j &lt;= c1; x++) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y + k &lt;= c2 &amp;&amp; y + x &lt;= a[i]; y++) &#123;</span><br><span class="line">						dp[i][j + x][k + y] = (dp[i][j + x][k + y] + dp[i - <span class="number">1</span>][j][k]) % Mod;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dp[n][c1][c2]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="传感器网络"><a href="#传感器网络" class="headerlink" title="传感器网络"></a>传感器网络</h2><h3 id="mathcal-Link-2"><a href="#mathcal-Link-2" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="http://222.180.160.110:1024/contest/2527/problem/3">link</a></p>
<h3 id="mathcal-Sol-2"><a href="#mathcal-Sol-2" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p><del>醉了，这个东西居然是个暴力</del>   </p>
<hr>
<p>什么神奇题目。以为是个很厉害的构造，结果是网络流跑答案然后暴力连边判断。<br>强烈吐槽诈骗题目。</p>
<h3 id="mathcal-Code-2"><a href="#mathcal-Code-2" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><details class="code">
<summary>net</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">55</span> * <span class="number">55</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, l, r, mid, fa[MAXN];</span><br><span class="line"><span class="type">char</span> opt[MAXN][MAXN];</span><br><span class="line"><span class="type">bool</span> con[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> st, ed, head[MAXN], ver[MAXN], edge[MAXN], nxt[MAXN], tot, d[MAXN], cur[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">// printf(&quot;%d %d %d\n&quot;, u, v, c);</span></span><br><span class="line">	ver[++tot] = v, edge[tot] = c, nxt[tot] = head[u], head[u] = tot;</span><br><span class="line">	ver[++tot] = u, edge[tot] = <span class="number">0</span>, nxt[tot] = head[v], head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> st)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">	q.<span class="built_in">push</span>(st), d[st] = <span class="number">1</span>, cur[st] = head[st];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">			<span class="type">int</span> v = ver[i];</span><br><span class="line">			<span class="keyword">if</span> (!edge[i] || d[v] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(v); cur[v] = head[v];</span><br><span class="line">			d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (v == ed) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line">	<span class="type">int</span> res = flow, k, i;</span><br><span class="line">	<span class="keyword">for</span> (i = cur[u]; i &amp;&amp; res; i = nxt[i]) &#123;</span><br><span class="line">		<span class="type">int</span> v = ver[i];</span><br><span class="line">		<span class="keyword">if</span> (!edge[i] || d[v] != d[u] + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		k = <span class="built_in">dinic</span>(v, <span class="built_in">min</span>(res, edge[i]));</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">0</span>) d[v] = <span class="number">0</span>;</span><br><span class="line">		edge[i] -= k, edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">		res -= k;</span><br><span class="line">		cur[u] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ind</span><span class="params">(<span class="type">int</span> op, <span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x + op * n; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="built_in">sizeof</span>(head));</span><br><span class="line">	tot = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">AddEdge</span>(st, <span class="built_in">ind</span>(<span class="number">0</span>, i), <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (fa[i]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (fa[i] &gt; n) <span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(<span class="number">0</span>, i), ed, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(<span class="number">0</span>, i), <span class="built_in">ind</span>(<span class="number">1</span>, fa[i]), <span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (con[<span class="number">0</span>][i]) &#123;</span><br><span class="line">			<span class="built_in">AddEdge</span>(i, ed, <span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span> (con[i][j]) &#123;</span><br><span class="line">				<span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(<span class="number">0</span>, i), <span class="built_in">ind</span>(<span class="number">1</span>, j), <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">AddEdge</span>(<span class="built_in">ind</span>(<span class="number">1</span>, i), ed, mid);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">bfs</span>(st)) &#123;</span><br><span class="line">		<span class="keyword">while</span> ((tmp = <span class="built_in">dinic</span>(st, INF))) res += tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// printf(&quot;%d %d\n&quot;, mid, res);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> res == n;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// freopen(&quot;sensor.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="comment">// freopen(&quot;sensor.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	st = (n &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, ed = (n &lt;&lt; <span class="number">1</span>) + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, opt[i] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			con[i][j] = (opt[i][j] == <span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) con[n + <span class="number">1</span>][i] = con[<span class="number">0</span>][i];</span><br><span class="line"></span><br><span class="line">	l = <span class="number">0</span>, r = n;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span> (con[i][j]) &#123;</span><br><span class="line">			fa[i] = j;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">check</span>(l)) &#123;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!flag) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, n), fa[i] = n + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, fa[i] - <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>「Summary」NOI Online 2022 提高组 瞎搞游记</title>
    <url>/2022/03/26/2022-03-28-%E3%80%8CSummary%E3%80%8DNOI%20Online%202022%20%E6%8F%90%E9%AB%98%E7%BB%84%20%E7%9E%8E%E6%90%9E%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>真·乱搞   </p>
<span id="more"></span>

<h2 id="mathbb-丹钓战"><a href="#mathbb-丹钓战" class="headerlink" title="$\mathbb{丹钓战}$"></a>$\mathbb{丹钓战}$</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P8251">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>没啥好说的。<br>先按照题意模拟一遍《丹钓战》，然后你可记录在未插入当前点时栈顶点的下标，作为当前点的权值。<br>对于查询 <code>[l, r]</code> ，就是找 <code>[l, r]</code> 内权值 <code>&lt;l</code> 的点的个数。</p>
<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXLOG = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		x = -x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">		<span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tp, pre[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Position</span> &#123; <span class="type">int</span> a, b, ind; &#125; pos[MAXN], st[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PresidentTree</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot, root[MAXN];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Node</span> &#123; <span class="type">int</span> lch, rch, dat; &#125; s[MAXN * MAXLOG];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; s[p].dat = s[s[p].lch].dat + s[s[p].rch].dat; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		s[++tot] = s[p], p = tot;</span><br><span class="line">		<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">			s[p].dat += val;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">update</span>(s[p].lch, l, mid, pos, val);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">update</span>(s[p].rch, mid + <span class="number">1</span>, r, pos, val);</span><br><span class="line">		<span class="built_in">push_up</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) <span class="keyword">return</span> s[p].dat;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (ql &lt;= mid) res += <span class="built_in">query</span>(s[p].lch, l, mid, ql, qr);</span><br><span class="line">		<span class="keyword">if</span> (qr &gt; mid) res += <span class="built_in">query</span>(s[p].rch, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; pret;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;stack.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;stack.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// scanf(&quot;%d %d&quot;, &amp;n, &amp;m);</span></span><br><span class="line">	<span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="comment">// scanf(&quot;%d&quot;, &amp;pos[i].a);</span></span><br><span class="line">		<span class="built_in">read</span>(pos[i].a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="comment">// scanf(&quot;%d&quot;, &amp;pos[i].b);</span></span><br><span class="line">		<span class="built_in">read</span>(pos[i].b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// int tot = 0;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		pos[i].ind = i;</span><br><span class="line">		<span class="keyword">while</span> (tp &amp;&amp; (st[tp].a == pos[i].a || st[tp].b &lt;= pos[i].b)) tp--;</span><br><span class="line">		pre[i] = st[tp].ind;</span><br><span class="line">		st[++tp] = pos[i];</span><br><span class="line">		<span class="comment">// if (tp == 1) &#123;</span></span><br><span class="line">		<span class="comment">// 	tot++;</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="comment">// printf(&quot;%d &quot;, tot);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">	<span class="comment">// 	printf(&quot;%d &quot;, pre[i]);</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pret.<span class="built_in">update</span>(pret.root[i] = pret.root[i - <span class="number">1</span>], <span class="number">0</span>, n, pre[i], <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l, r; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="comment">// scanf(&quot;%d %d&quot;, &amp;l, &amp;r);</span></span><br><span class="line">		<span class="built_in">read</span>(l), <span class="built_in">read</span>(r);</span><br><span class="line">		<span class="type">int</span> tmp = pret.<span class="built_in">query</span>(pret.root[r], <span class="number">0</span>, n, <span class="number">0</span>, l - <span class="number">1</span>) - pret.<span class="built_in">query</span>(pret.root[l - <span class="number">1</span>], <span class="number">0</span>, n, <span class="number">0</span>, l - <span class="number">1</span>);</span><br><span class="line">		<span class="comment">// printf(&quot;%d\n&quot;, tmp);</span></span><br><span class="line">		<span class="built_in">write</span>(tmp), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-讨论"><a href="#mathbb-讨论" class="headerlink" title="$\mathbb{讨论}$"></a>$\mathbb{讨论}$</h2><h3 id="mathcal-Link-1"><a href="#mathcal-Link-1" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P8252">link</a></p>
<h3 id="mathcal-Sol-1"><a href="#mathcal-Sol-1" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>写了个神奇暴力在洛谷过了。。。<br>大约的确出题人应该不会想到我这个做法，但愿卡不掉吧。。。   </p>
<hr>
<p>思路很简单，对于每个人和他会做的题目连边，依次遍历每个人和他会做的每一道题，找到另外会做这道题的人，把他的贡献值加一， 在一个人遍历完之后查看有贡献的人，如果他的贡献值比双方会做的题数都要少，那么两个人就可以讨论。<br>如果，这个人找不到讨论对象，就可以把连向他的所有边删掉。<br>找到就直接输出。   </p>
<hr>
<p>其实可以把这个做法卡到 $\mathcal{O(n^2)}$ 。<br>但是我觉得出题人不会这样造数据。 &#x2F;xyx</p>
<hr>
<p>update: 嘤嘤嘤，被卡成了 $70pts$ (2022-03-30)</p>
<h3 id="mathcal-Code-1"><a href="#mathcal-Code-1" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">		x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">		c = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		x = -x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">		<span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, tot[MAXN], cnt[MAXN], ans1, ans2;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN], pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;discuss.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;discuss.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// scanf(&quot;%d&quot;, &amp;t);</span></span><br><span class="line">	<span class="built_in">read</span>(t);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// scanf(&quot;%d&quot;, &amp;n);</span></span><br><span class="line">		<span class="built_in">read</span>(n);</span><br><span class="line">		<span class="comment">// printf(&quot;!!%d!!\n&quot;, n);</span></span><br><span class="line">		ans1 = ans2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++) G[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="comment">// scanf(&quot;%d&quot;, &amp;k);</span></span><br><span class="line">			<span class="built_in">read</span>(k);</span><br><span class="line">			cnt[i] = k;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, x; j &lt;= k; j++) &#123;</span><br><span class="line">				<span class="comment">// scanf(&quot;%d&quot;, &amp;x);</span></span><br><span class="line">				<span class="built_in">read</span>(x);</span><br><span class="line">				G[i].<span class="built_in">push_back</span>(x + n);</span><br><span class="line">				G[x + n].<span class="built_in">push_back</span>(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">			pos.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">				<span class="type">int</span> u = G[i][j];</span><br><span class="line">				G[u].<span class="built_in">pop_back</span>();</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; G[u].<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">					<span class="type">int</span> v = G[u][k];</span><br><span class="line">					tot[v]++;</span><br><span class="line">					<span class="keyword">if</span> (tot[v] == <span class="number">1</span>) pos.<span class="built_in">push_back</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; pos.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (tot[pos[j]] &lt; cnt[pos[j]] &amp;&amp; tot[pos[j]] &lt; cnt[i]) &#123;</span><br><span class="line">					<span class="comment">// printf(&quot;%d %d %d\n&quot;, tot[pos[j]], cnt[pos[j]], cnt[i]);</span></span><br><span class="line">					ans1 = i, ans2 = pos[j];</span><br><span class="line">					flag = <span class="literal">true</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; pos.<span class="built_in">size</span>(); j++) tot[pos[j]] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;YES\n%d %d\n&quot;</span>, ans1, ans2);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mathbb-如何正确地排序"><a href="#mathbb-如何正确地排序" class="headerlink" title="$\mathbb{如何正确地排序}$"></a>$\mathbb{如何正确地排序}$</h2><h3 id="mathcal-Link-2"><a href="#mathcal-Link-2" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P8253">link</a></p>
<h3 id="mathcal-Sol-2"><a href="#mathcal-Sol-2" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>不会了。</p>
<h3 id="mathcal-Code-2"><a href="#mathcal-Code-2" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3>]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-04-13-HNOI2012 题解集合</title>
    <url>/2022/04/13/2022-04-13-HNOI2012%20%E9%A2%98%E8%A7%A3%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>蔬菜越来越多。</p>
<span id="more"></span>

<h2 id="与非"><a href="#与非" class="headerlink" title="与非"></a>与非</h2><h3 id="mathcal-Link"><a href="#mathcal-Link" class="headerlink" title="$\mathcal{Link}$"></a>$\mathcal{Link}$</h3><p><a href="https://www.luogu.com.cn/problem/P3220">link</a></p>
<h3 id="mathcal-Sol"><a href="#mathcal-Sol" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>记录一个常见（？）技巧。<br>当题目给定一个位运算操作时，先从每个数位入手，只考虑四种情况。<br>再看这个位运算操作是否可以推广。</p>
<hr>
<p>拿这道题举例。   </p>
<p>$$<br>not (A) &#x3D; A \ nand \ A \<br>A \ or \ B &#x3D; not(not(A) \ nand \ not(B)) \<br>A \ and \ B &#x3D; not(A \ nand \ B) \<br>A \ xor \ B &#x3D; not(not(A) \ and \ not(B) \ or \ (A \ and \ B))<br>$$   </p>
<p>就是说，只要有 <code>nand</code> 操作，你就可以把所有的操作全部表示出来。   </p>
<h3 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><details class="Code">
<summary>nand.cpp</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL n, k;</span><br><span class="line">LL l, r, a[MAXN], b[MAXN], num[MAXN], ans;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">	LL res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= ((<span class="number">1ll</span> &lt;&lt; k) - <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1ll</span> &lt;&lt; num[k - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; x &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (b[i]) &#123;</span><br><span class="line">				res = (res + (<span class="number">1ll</span> &lt;&lt; num[i] - <span class="number">1</span>));</span><br><span class="line">				x -= b[i];</span><br><span class="line">				<span class="comment">// printf(&quot;--%lld %lld %lld\n&quot;, res, 1ll &lt;&lt; num[i] - 1, b[i]);</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				res = (res + (<span class="number">1ll</span> &lt;&lt; num[i]));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	res += (x == <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// freopen(&quot;nand.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="comment">// freopen(&quot;nand.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld %lld&quot;</span>, &amp;n, &amp;k, &amp;l, &amp;r);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">	LL statment = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="keyword">if</span> (!((statment &gt;&gt; i) &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">		LL tmp = (<span class="number">1ll</span> &lt;&lt; k) - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span> ((a[j] &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			tmp &amp;= a[j];</span><br><span class="line">		&#125; <span class="keyword">else</span> tmp &amp;= (~a[j]);</span><br><span class="line">		b[i] = tmp;</span><br><span class="line">		num[i] = <span class="number">1</span>;</span><br><span class="line">		statment |= tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i++) num[i] += num[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(r) - <span class="built_in">query</span>(l - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>


<h2 id="集合选数"><a href="#集合选数" class="headerlink" title="集合选数"></a>集合选数</h2><h3 id="mathcal-Sol-1"><a href="#mathcal-Sol-1" class="headerlink" title="$\mathcal{Sol}$"></a>$\mathcal{Sol}$</h3><p>属于神仙构造了。<br>考试时想到了要把建树，但是没把树拍扁。  </p>
<p>首先一个 <code>树形DP</code> 的感觉不难得到。<br>然后构造如下的矩阵。  </p>
<p>$$<br>1 \ 2 \ 4 \ 8 \ 16 \ 32 \ 64 \dots \<br>3 \ 6 \ 12 \ 24 \ 48 \ 96 \ 192 \ 384 \dots \<br>9 \ 18 \ 36 \ 72 \ 144 \ 288 \ 576 \ 1152 \dots \<br>$$</p>
<p>形式化一点就是   </p>
<p>$a_{i, j}&#x3D;\left{\begin{matrix} a_{i - 1, j} \times 3, j &#x3D; 1 \ a_{i, j - 1} \times 2, j \not&#x3D; 1 \end{matrix}\right.$   </p>
<p>矩阵很小，可以状压。   </p>
<h3 id="mathcal-Code-1"><a href="#mathcal-Code-1" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h3><details class="code">
<summary>set.cpp</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1e9</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, r, c[MAXM], mat[MAXN][MAXM];</span><br><span class="line"><span class="type">bool</span> vis[(<span class="number">1</span> &lt;&lt; MAXM) + <span class="number">5</span>], used[(<span class="number">1</span> &lt;&lt; MAXM) + <span class="number">5</span>];</span><br><span class="line">LL dp[MAXN][(<span class="number">1</span> &lt;&lt; MAXM) + <span class="number">5</span>], ans;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">cal</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	mat[<span class="number">1</span>][<span class="number">1</span>] = s;</span><br><span class="line">	used[s] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">		mat[i][<span class="number">1</span>] = mat[i - <span class="number">1</span>][<span class="number">1</span>] * <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">if</span> (mat[i][<span class="number">1</span>] &gt; n) &#123; r = i - <span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">		used[mat[i][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= <span class="number">18</span>; j++) &#123;</span><br><span class="line">			mat[i][j] = mat[i][j - <span class="number">1</span>] * <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span> (mat[i][j] &gt; n) &#123; c[i] = j - <span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">			used[mat[i][j]] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; c[<span class="number">1</span>]); i++) dp[<span class="number">1</span>][i] = vis[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= r; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; c[i]); j++) <span class="keyword">if</span> (vis[j]) &#123;</span><br><span class="line">			dp[i][j] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; (<span class="number">1</span> &lt;&lt; c[i - <span class="number">1</span>]); k++) <span class="keyword">if</span> (vis[k] &amp;&amp; (k &amp; j) == <span class="number">0</span>) &#123;</span><br><span class="line">				dp[i][j] = (dp[i - <span class="number">1</span>][k] + dp[i][j]) % Mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	LL sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; c[r]); i++) sum = (sum + dp[r][i]) % Mod;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// freopen(&quot;set.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">	<span class="comment">// freopen(&quot;set.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; MAXM - <span class="number">2</span>); i++) <span class="keyword">if</span> (!((i &lt;&lt; <span class="number">1</span>) &amp; i)) vis[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!used[i]) ans = (ans * <span class="built_in">cal</span>(i)) % Mod;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<details>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>「Solution」2022-05-04-构造题入坑</title>
    <url>/2022/05/04/2022-05-04-%E6%9E%84%E9%80%A0%E9%A2%98%E5%85%A5%E5%9D%91/</url>
    <content><![CDATA[<p>被小学生题目羞辱了。。。</p>
<span id="more"></span>

<h2 id="Engineer-Artem"><a href="#Engineer-Artem" class="headerlink" title="Engineer Artem"></a>Engineer Artem</h2><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p><a href="https://www.luogu.com.cn/problem/CF1438C">link</a></p>
<h3 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h3><p><strong>double - 奇偶性</strong> 处理。  <br>只要保证了相邻数字奇偶性不同就行了。   </p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><details class="Code">
  <summary>Engineer Artem</summary>

  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e2</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, x; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">                <span class="keyword">if</span> (((i + j) &amp; <span class="number">1</span>) == (x &amp; <span class="number">1</span>)) x++;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="XOR-gun"><a href="#XOR-gun" class="headerlink" title="XOR-gun"></a>XOR-gun</h2><h3 id="Link-1"><a href="#Link-1" class="headerlink" title="Link"></a>Link</h3><p><a href="">link</a></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>乱搞</tag>
        <tag>构造</tag>
      </tags>
  </entry>
</search>
